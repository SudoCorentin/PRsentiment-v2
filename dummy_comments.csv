"createdAt","body"
"2022-11-09 09:36:04.032536+00","yes, edited"
"2022-11-07 18:44:59.757591+00","```suggestion ```"
"2022-11-08 16:20:59.662478+00","@lcolston08 "
"2022-11-09 09:36:04.032536+00","yes, edited"
"2022-11-02 17:35:11.766522+00","Agree, we can create a util just for this."
"2022-11-02 18:41:11.029451+00","such a boss"
"2022-11-02 18:42:13.48715+00","This prevents the OSX `.DS_Store` from being checked into git."
"2022-11-03 08:13:02.482488+00","Add a description of this page?"
"2022-11-03 20:32:20.188195+00","I changed this to `lab`"
"2022-11-07 16:44:39.554285+00","what's this?"
"2022-11-07 22:01:15.252477+00","```suggestion * Files other than UTF-8 are excluded  ```"
"2022-11-08 01:15:14.019467+00","I tried to reorder this and made proposals below"
"2022-11-08 10:05:24.972697+00","@FaridGitStart delete this empty first line"
"2022-11-08 16:24:24.423394+00","Thanks. Resolving this conversation. "
"2022-11-09 21:52:15.500752+00","this comment should be removed"
"2022-11-11 06:32:25.018098+00","Shouldn't we be using it? Why not?"
"2022-11-02 06:22:17.221404+00","```suggestion # Environment variables ```"
"2022-11-02 16:13:04.910913+00","nit: make `name.split(' ')[0]` a const"
"2022-11-03 20:32:44.411203+00","Updated descriptions to add this info"
"2022-11-03 20:34:10.346852+00","Added this test case"
"2022-11-03 20:34:20.108443+00","Updated descriptions to add this info"
"2022-11-03 20:34:25.721771+00","Updated descriptions to add this info"
"2022-11-03 22:28:37.971393+00","Yes definitely agree! Great catch, thanks JR"
"2022-11-03 22:36:48.611793+00","uh... is this missing `@orthly/critical-path`?  I'm unclear what a name on a line by itself does"
"2022-11-07 22:05:02.835441+00","Are we indexing code from code hosts other than GitHub on dot com?"
"2022-11-08 00:40:24.01431+00","Can the router be placed inside of the ComponentsComposer components list?"
"2022-11-08 07:19:24.291443+00","Is the Sentry significant enough to be included in this list? If yes, better include it as well."
"2022-11-08 07:19:24.370954+00","@murcul-coherent Any information can be provided on this?"
"2022-11-08 16:26:25.088922+00","Nuke empty line 3"
"2022-11-09 08:35:20.12241+00","This TODO is outdated, can you remove it?"
"2022-11-09 11:46:35.722742+00","The output is rather ugly, but surely transparent, so 👍 "
"2022-11-09 21:06:49.944994+00","Are these `#region...` sort of tags a new pattern? 👀 "
"2022-11-10 08:07:33.594139+00","Could you please move these to an ""Open questions"" section?"
"2022-11-11 01:55:26.394822+00","This might be difficult as the DB lives in Amazon, is not instrumented AFAIK"
"2022-11-11 01:55:26.924461+00","They are exposed on staging too: https://fly-metrics.net/d/fly-app/fly-app?orgId=42164&var-app=equanimity-stg"
"2022-11-08 16:49:32.99638+00","Should this be compiler-accurate"
"2022-11-08 16:53:51.569579+00","Updated"
"2022-11-11 01:55:26.568007+00","This is called ""Tracing"". https://en.wikipedia.org/wiki/Tracing_(software)"
"2022-11-11 01:55:26.598971+00","What do you mean by `Ecto query strings by default`?"
"2022-11-11 01:55:26.886121+00","+1 to start with this one"
"2022-11-01 12:39:20.330371+00","switching from peer to regular dep?"
"2022-11-01 16:54:28.801757+00","What's the reason for fetching this as the practice rather than as internal or the lab?"
"2022-11-01 17:23:09.061963+00","Out of curiosity, is there an instance where the response would be `undefined` and need the `?`? It seems like it will always response with an object containing `monitors`. If not, we will have an error and drop into the error handler portion."
"2022-11-01 22:13:29.476753+00","Can we do something to `queryExampleSectionsColumns` doesn't do a server call on dotcom?"
"2022-11-02 09:09:01.947567+00","@sourcegraph/dev-experience the generated PRs from this workflow requires stamp approvals + merge"
"2022-11-01 16:54:34.597816+00","```suggestion                 'should mark an order as ""In Fabrication"" as ops', ```"
"2022-11-01 17:14:45.235937+00","```suggestion - [REVIEW] Review pull request ```"
"2022-11-01 17:55:09.061623+00","https://gfycat.com/welldocumentedevilindianrhinoceros"
"2022-11-02 10:39:16.708346+00","So can I do it if I am an experienced developer, or repo owner or only the project managers? This is not clear to me. "
"2022-11-03 08:41:13.132313+00","@Mjanuary same here "
"2022-11-02 10:39:54.00296+00","Sorry for late review! If this is already protected in the dashboard, it's fine"
"2022-11-02 10:57:27.258439+00","`specs`? Should be `webhooks`, right?"
"2022-11-02 10:57:27.393911+00","Do you need that?"
"2022-11-03 12:11:39.771464+00","Missing empty new line at the end."
"2022-11-03 16:46:12.782468+00","i first read this as ""prioritized sorted please"" map, which is also a good name"
"2022-11-04 01:58:48.842481+00","yes"
"2022-11-04 16:21:07.078745+00","```suggestion // tslint:disable:max-file-line-count ```"
"2022-11-07 07:36:51.446723+00","```suggestion     startGitSlicePull(pull_job: GitSlicePullUpsertOptions!): _some_output ```"
"2022-11-07 15:00:54.2332+00","Lets nuke, we need to resolve eslint errors"
"2022-11-07 15:13:39.08466+00","Add a space above"
"2022-11-07 22:15:30.282628+00","```suggestion GitHub code search does not offer commit diff search or commit message search.  ```"
"2022-11-03 16:46:21.874021+00","lolol"
"2022-11-07 22:25:04.793549+00","We're 100% sure that it's 100% accurate?"
"2022-11-07 22:25:48.79112+00","Should use `setFieldValue` instead so that we don't have to explicitly call `clearValue` every time we call this method."
"2022-11-03 16:46:28.121428+00","nice refactor"
"2022-11-07 22:27:06.118314+00","Not sure if this is a necessary row for the end user  "
"2022-11-07 22:43:40.154199+00","CC @iskyOS "
"2022-11-07 22:43:48.520393+00","cc @iskyOS "
"2022-11-07 22:43:59.770544+00","cc @iskyOS "
"2022-11-07 22:58:44.726654+00","Yes, for example we have repos from http://src.fedoraproject.org/"
"2022-11-07 15:13:39.072505+00","This file won't exists, move your tests and delete it"
"2022-11-08 00:04:12.593025+00","Thanks. This seems to back up the statement about public repos from multiple code hosts. "
"2022-11-08 05:51:31.132679+00","we don't actually use this anywhere - let's get rid of it"
"2022-11-08 08:11:42.999578+00","@murcul-coherent should be in total 7 types of products, seems the ""participating whole life"" product type is missing? "
"2022-11-10 04:49:11.377318+00","Was there a clear owner/incident commander at this point?"
"2022-11-10 04:49:11.388554+00","Good to have a template for this"
"2022-11-10 08:13:14.328041+00","I added the open questions section, and am also keeping this here to ensure they get answered."
"2022-11-10 16:24:29.123299+00","missing other metadata"
"2022-11-10 18:00:13.267226+00","Maybe I misunderstood how to read those constraints but I thought it would mean 1.1 and any above lol "
"2022-11-11 02:35:40.670261+00","```suggestion - [ ]  **File changes:** This PR is expected to result in ≥ 10 file changes ```"
"2022-11-11 09:07:34.940557+00","Oh I mean the raw SQL queries. Appsignal does record them whereas the PromEx metrics do not"
"2022-11-11 10:39:57.102514+00","I have added a custom handler in https://github.com/Murcul/equanimity/pull/623"
"2022-11-11 12:42:02.331213+00","Nice! I think we cab send those notifications to #platform-engineering-alerts just for our team to monitor"
"2022-11-10 18:00:13.670163+00","If not, I wonder if we shouldn't do that and just say here, use 1.1+"
"2022-11-11 02:35:43.185719+00","The other factors make more sense to me"
"2022-11-10 18:00:14.254844+00","I think this is the default, isn't it? "
"2022-11-10 18:29:36.826999+00","Yep it is. I'll remove this section (thought it was not defaulting to `true`)"
"2022-11-10 16:24:29.655658+00","missing other metadata"
"2022-11-11 09:07:38.015153+00","Grafana just reads data from the metrics PromEx collects. It does not collect anything on its own."
"2022-11-10 17:06:12.973331+00","will add it "
"2022-11-10 17:06:20.180126+00","will add it "
"2022-11-11 01:55:27.096325+00","You meant: `while Grafana does not`?"
"2022-11-11 01:55:28.869055+00","I'm not sure if we are using Swap, if we are not even using a swap partition we can remove this alert"
"2022-11-02 13:26:43.681501+00","Should we add a doc, then? Or change the naming somehow?"
"2022-11-03 08:35:20.749293+00","Revert this line"
"2022-11-10 23:30:15.521211+00","```suggestion     min-width: 45px;     overflow: hidden; ```"
"2022-11-08 15:53:26.237357+00","I'd add a `set -ex` to this, which we use in a lot of scripts: https://sourcegraph.sourcegraph.com/search?q=context%3Aglobal+set+-ex+repo%3Asourcegraph%24&patternType=standard&groupBy=repo  "
"2022-11-10 05:05:42.368876+00","I have added the type, please take a look"
"2022-11-11 03:05:23.443375+00","```suggestion  export async function getStaticProps({ locale }) { ```"
"2022-11-11 12:04:14.762482+00","https://github.com/sourcegraph/sourcegraph/pull/44275"
"2022-11-01 20:25:33.975795+00","Rename and move under the `// Text` section ```suggestion $color-missing-value: #808080; ```"
"2022-11-02 15:13:42.993769+00","Merge main/revert this file to main"
"2022-11-03 08:06:34.81379+00","```suggestion   @spec create_tasks_multi(Ecto.Multi.t(), list(map())) :: Ecto.Multi.t() ```"
"2022-11-03 08:06:34.840587+00","```suggestion   @spec get_task!(pos_integer()) :: Task.t() ```"
"2022-11-03 08:06:35.554322+00","Same here. Import and use relative path"
"2022-11-03 08:35:19.012662+00","Revert this line"
"2022-11-03 16:57:58.951511+00","Update docstring: `Alert Delay` -> `Bucket Count`"
"2022-11-04 09:07:42.490298+00","```suggestion   @spec get_client!(String.t()) :: Client.t()   def get_client!(id), do: Repo.get!(Client, id) ```"
"2022-11-07 08:54:10.957373+00","```suggestion   @type role :: :admin | :user | :internal ```"
"2022-11-07 21:43:48.458546+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     /* Causes fanout */     -- , labtrac_production_case_steps.stageitemid     -- , labtrac_production_case_steps.pathstepid ``` "
"2022-11-09 23:04:34.824094+00","https://github.com/sourcegraph/sourcegraph/issues/44179"
"2022-11-10 04:11:47.720901+00","```suggestion   @spec get_ticket(pos_integer()) :: {:ok, Ticket.t()} | {:error, :ticket_not_found} ```"
"2022-11-10 07:58:10.812473+00","Can you remove the bang in the `get_pull_request_ticket!` function as well?"
"2022-11-11 12:59:56.082479+00","```suggestion      * The list of ids of photos that were skipped. ```"
"2022-11-02 09:15:04.712479+00","lol"
"2022-11-02 10:10:59.371521+00","> Suggestion use this ![image](https://user-images.githubusercontent.com/2725300/199465481-836eef3a-bbcc-426e-b0a2-f5466e1b41b8.png) "
"2022-11-03 11:46:08.081244+00","Should we have a feature flag / some other kind of toggle for running this (here, on in CleanUp)?"
"2022-11-04 09:05:27.242503+00","```suggestion   @spec list_tasks(map(), pos_integer(), Keyword.t()) :: list(Task.t()) ```"
"2022-11-07 08:58:02.489492+00","@passy4ucj But this [PR](https://github.com/GitStartHQ/client-bluemeg-database-service/pull/4) is not yet merged, this means, this PR will return errors"
"2022-11-04 09:05:28.311199+00","```suggestion   @spec get_total_time_spent_in_minutes(Task.t()) :: non_neg_integer() ```"
"2022-11-07 12:07:38.405114+00","```suggestion         onInputChange={filterByCities} ```"
"2022-11-07 14:20:39.086032+00","Value should be a boolean"
"2022-11-07 14:45:37.107808+00","Your metadata should include all query params"
"2022-11-07 12:32:37.651501+00","Just a frame of reference to debug when multiple stuff is happening simultaneously. 🙂 "
"2022-11-07 14:20:39.323806+00","Value should be an empty array or undefined"
"2022-11-07 14:45:36.104007+00","Space between words  ```suggestion /* Envelope Activities related activity */ ``` "
"2022-11-07 12:39:34.971432+00","@passy4ucj Done!"
"2022-11-08 11:24:59.560934+00","Yes, I was thinking about this too... the `Menu` component doesn't seem to wrap around selection, though maybe that can be configured.  > Additionally, I think that menu makes more sense semantically here than listbox anyway since it's not a form control but a menu that lists options that will cause navigation (if the submission is immediate).  If the submission was immediate I would agree, but it's not. After reading MDN's description:  > A menu generally represents a grouping of common actions or functions that the user can invoke.  I felt that a listbox would be a better fit.  (That's why a11y is hard :-/)  But I don't have strong feelings about this..."
"2022-11-08 21:43:04.551745+00","should we not add a `nexHealthEnabled` var as well? "
"2022-11-08 11:45:08.162484+00","Reverted, thanks for the heads up!"
"2022-11-09 16:13:10.427411+00","```suggestion   @spec list_all_tickets_for_developer_query(pos_integer()) :: Ecto.Query.t() ```"
"2022-11-02 16:26:40.766918+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion FROM source ``` "
"2022-11-02 16:26:41.03332+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     SELECT * FROM {{ ref('base_segment_marketing_website_fcpid') }} ``` "
"2022-11-02 16:26:41.698411+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion FROM source ``` "
"2022-11-04 09:45:47.712492+00","Not running in frontend is IMO the way to go because otherwise we horizontally scale this routine for no benefit"
"2022-11-07 09:06:34.226444+00","maybe? ```suggestion 			return nil, errors.Wrap(err, ""http request failed"") ```"
"2022-11-07 21:50:59.765119+00","tests, sure -- but why should it be static? lol"
"2022-11-08 08:44:39.230194+00","Wrapped error with the repo name is a good idea! Will fix!"
"2022-11-08 16:48:25.81336+00","is there no updated_at field in dialpad users? Will we need to snapshot it?"
"2022-11-08 21:43:44.352342+00","This field serves both purposes. If they have a config it's enabled."
"2022-11-10 14:46:53.076355+00","same here"
"2022-11-11 14:11:49.512481+00","Done."
"2022-11-02 13:26:46.583406+00","this function doesn't seem to return a bool. should the doc be fixed"
"2022-11-02 13:38:36.580777+00","Should have an await"
"2022-11-02 13:38:36.574053+00","Organize your imports in the format we shared earlier, relative imports should come last Format to be https://gitstart.slack.com/archives/C02QH7ZUQBT/p1667213225110949 "
"2022-11-02 14:13:45.597654+00","note here, we are changing the format of the job names.    the new job will simply be called `excavator-pre-release` for instance. "
"2022-11-02 14:18:06.230797+00","```suggestion > NOTE: Repository access over SSH is not yet supported on [Sourcegraph Cloud](../../cloud/index.md). ```  not sure if without the ""space"" would work or not"
"2022-11-02 15:38:44.261286+00","Organize imports"
"2022-11-02 15:38:45.359749+00","Space between import categories"
"2022-11-03 16:48:00.492485+00","did you create the relevant two slack channels?"
"2022-11-03 17:53:51.372374+00","Can we use the page as a prefix here, i.e. `this.deps.opsDashboardSearch`?"
"2022-11-03 17:53:51.645476+00","Nitpick: 'cause this method returns a `JSXString` I believe you can just type this as a self-closing tag, i.e.  ```ts <div id=""search"" /> ```"
"2022-11-03 22:27:42.802502+00","True... `publicEventTypes` Makes sense. "
"2022-11-03 22:56:15.836935+00","I am bad at typing yikes "
"2022-11-03 16:48:20.222489+00","yes :)"
"2022-11-04 06:25:36.057939+00","After looking into https://docs.sourcegraph.com/dev/background-information/workers, I think it is too heavy-lifting (requires a dedicated database table) for a simple clean-up job."
"2022-11-04 08:47:20.524303+00","Let's limit the possible atom that can be passed here  `  @possible_statuses [:draft, :open, :paid, :void, :uncollectible, :deleted]`  Refer to my comment here for guidelines https://github.com/GitStartHQ/client-gitstart-backend/pull/34#discussion_r1012583800"
"2022-11-04 14:58:46.116357+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion , prospects AS (     SELECT * FROM {{ ref('stg_prospect') }} ``` "
"2022-11-04 14:58:46.38839+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion WHERE row_num = 1 ``` "
"2022-11-02 17:24:29.990774+00","@trevorImmunefi this part of the code is because we only want to run this on the client side, correct?"
"2022-11-02 17:25:49.771617+00","This was a poc test. @trevorImmunefi should we delete this one?"
"2022-11-04 14:44:40.509892+00","I think you're right about that. I'll modify this to ensure a 404 is returned."
"2022-11-04 04:39:20.809179+00","Removed this as I think we should not come up with our own kickoff projects through refactor comments/ and instead through conversations. Besides, reimplementing syncers in equanimity is already a project and this will be handled then."
"2022-11-01 17:09:31.911206+00","The problem is you are using un-typed prop, IMO it's pretty the same as the old one `isSelected` un-typed un-documented."
"2022-11-01 12:41:40.672464+00","is there a reason to avoid fetch/axios here?"
"2022-11-01 12:43:23.977988+00","this is a pure function from the perspective of this component and it can be declared outside of the component to avoid unneccesary rerenders/memory usage"
"2022-11-01 12:43:44.412468+00","Yeah, I'd do that. In theory, we should always have the actor ID available, but if there was some kind of background job pruning stale tokens using internal actor the call would crash."
"2022-11-01 13:00:15.141155+00","my bad. switched in back 3f506caeef3b2cd48e1d9d16c9c091dd10fa5856"
"2022-11-01 12:45:26.822471+00","Yep, looking good!"
"2022-11-01 12:51:53.701539+00","Do you think we can take the > 0?"
"2022-11-01 12:53:34.790473+00","I think would be clean, WDYT? ```suggestion       const controlsCount = Object.values(rows).filter(         (argType) => !argType.table?.disable       ).length; ```"
"2022-11-01 12:56:39.762473+00","@JoeWrenn fetch is not supported by IE 11. Sending request via axios throws react-saga related errors. I'll see what can be done for axios."
"2022-11-01 13:04:58.653552+00","@matheusmuniz03 changed it"
"2022-11-01 13:08:31.539028+00","yes. and its tripping up because in AuthenticatedRoute, component is defined as: `component: PropTypes.elementType,`  whereas in TeacherAuthRoute: `component: PropTypes.object,`  Should I just updated the propType?"
"2022-11-01 13:13:38.767673+00","> and should review approval be considered here since it's considered for the ""final design"" flag above?  I've raised this concern with Sana and Ana. They've said they're ok considering some units as multiple times because they still wanted units that weren't sent to a lab/delivered but had a QC approved design to be paid out on.   QC also happens much faster than lab acceptance or delivery, and they want to payout sooner / know sooner for capacity model.  Since you're out and we want to get this merged for today, I'm merging, however I'm happy to further discuss if you have more concerns"
"2022-11-01 13:31:52.519462+00","You're right about that. I should change the docstring to reflect that. It's the list of authz providers that will be used in any query coming from the frontend to determine if the user has access or not. "
"2022-11-01 13:37:04.139287+00","For the purposes of this test, we only care about the list of authz providers used in the frontend. The flakiness was happening when the list wasn't yet updated there, and we were bypassing any authz checking entirely in that case (which happened about 1 in 10 times)"
"2022-11-01 13:39:07.819184+00","This new gql api is basically the equivalent of the repo-updater debug endpoint that you posted, just for the frontend. The state of the authz providers list could potentially differ between the two for a few seconds, causing test flakiness if we try to use the endpoint from repo-updater."
"2022-11-01 13:42:23.16665+00","this is what is set on dotcom, so wanted to be more explicit about it "
"2022-11-01 13:43:00.978381+00","If our test cases are targeting the read path (checking perms), totally on board with the approach in the PR. I couldn't really in detail anymore though, if this set of test setup expects the background perms syncing to do anything (if not, then good!)."
"2022-11-01 13:44:21.23225+00","Note: no intention to block the PR, purely jumping on for discussions 😛 "
"2022-11-01 14:16:27.80043+00","oops - this shouldn't be here"
"2022-11-01 14:30:09.642474+00","I appreciate your comments! 🙏 "
"2022-11-01 14:54:29.416256+00","not concurrently? "
"2022-11-01 14:54:42.610526+00","It's smol, already created it on cloud no issue."
"2022-11-01 14:56:51.592491+00","@karimsa @A1Liu please give the change here a look when you have a chance"
"2022-11-01 14:57:48.259323+00","Updated to avoid this in https://github.com/ChalkTalk/chalktalk-react-40/pull/3477/commits/b74a9fc4c2a26fe91b74df25970ced57b2cbd583"
"2022-11-01 14:57:59.88982+00","Added the proptype here: https://github.com/ChalkTalk/chalktalk-react-40/pull/3477/commits/b74a9fc4c2a26fe91b74df25970ced57b2cbd583"
"2022-11-01 15:02:55.818415+00","I suppose this is here because we're still in draft, just a friendly reminder that if we were to make this PR ready for review, we should explain why we're commenting those. "
"2022-11-01 15:02:55.987149+00","WIP ? "
"2022-11-01 15:02:56.130486+00","TIL this works. Totally makes sense when you think about it. "
"2022-11-01 15:02:56.77269+00","`TrimLeft` and `TrimPrefix` have different semantics, is that what we want there? What prompted to fix this?   For example, if the input string is `""""foo` the old code would return `foo` whereas the new code returs `""foo`.   https://go.dev/play/p/Dkntpfg7qQ3"
"2022-11-01 15:02:56.83932+00","Oh, that sounds like a bug. How did you catch this? "
"2022-11-01 15:02:56.913677+00","Why do we need this?"
"2022-11-01 15:02:59.172509+00","The previous code was effectively duplicating the client, the new code is modifying a global, which may have unintended consequences. Was this brought by a linter? "
"2022-11-01 15:02:59.244493+00","If we're returning a slice, why don't we return nil?"
"2022-11-01 15:02:59.972493+00","Why is the new code working? Does create and attach does this on its own?"
"2022-11-01 15:04:38.183995+00","Yeah it was, and that is a good point! I was wondering why it did that. GREAT CATCH! "
"2022-11-01 15:05:25.637963+00","yip ... already fixed. Will fix in next push!"
"2022-11-01 15:07:20.242469+00",":( how about the case we use model without `id` prop? Where did you get this `id` prop?"
"2022-11-01 15:07:16.980593+00","I was also puzzled but the explanatio made sense to me: https://staticcheck.io/docs/checks/#SA1024"
"2022-11-01 15:16:49.672474+00","<img width=""437"" alt=""Screenshot 2022-10-31 at 18 42 12"" src=""https://user-images.githubusercontent.com/1001709/199268441-e4557772-8cb3-4bc7-b1d1-6268b1400f71.png""> "
"2022-11-01 17:23:09.542329+00","```suggestion      * Lists all auto measure subscriptions in the user's project.      *      * @returns A Promise that resolves with a list of all auto measure subscriptions. ```"
"2022-11-01 15:08:22.83434+00","I couldn't figure out how to do this for a single client so I just [beat all clients into submission](https://github.com/sourcegraph/sourcegraph/pull/43649/files#diff-f5bd0ec043180a518c5e040c8d8c4f83331edea600ed6c8bf98a7ba91f07de7fR67) lol  I will reuse this 🎉 "
"2022-11-01 15:14:37.132481+00","Hahahahah! You know. I went through that EXACT same thought process"
"2022-11-01 15:17:22.052485+00","![6z3xxw](https://user-images.githubusercontent.com/1001709/199268688-b9171a12-fc15-489d-bfb7-65d1a8e04dfa.jpg) "
"2022-11-01 15:19:46.898247+00","Just to check my understanding here, this change means generated queries can return duplicate results now?"
"2022-11-01 15:32:13.467474+00","This was the lint error for this line https://staticcheck.io/docs/checks/#SA4001"
"2022-11-01 15:25:12.269732+00","in the WalkDirFunc, an `error` is being passed in and the function overrides that error"
"2022-11-01 15:41:44.369165+00"," So I asked in the code-insights team about it, because the linter complained initially about a array that was being appened to but not used. When I removed the array, all what was left was the `c` var and it was also unused. Long story short, the code-insights team says it is ok to ignore."
"2022-11-01 15:14:05.907443+00","https://go.dev/play/p/oIJugDQH99g"
"2022-11-01 15:56:35.889529+00"," it follows what the method does earlier see https://sourcegraph.com/github.com/sourcegraph/sourcegraph/-/blob/enterprise/internal/insights/store/store.go?L187"
"2022-11-01 17:46:39.102491+00","😡 "
"2022-11-01 16:00:18.154042+00","This check is correct, a user with Manage permission can also read and envelope"
"2022-11-01 15:44:27.534214+00","For the `ExternalEditor`, we are getting id from `gql query` <img width=""485"" alt=""Screen Shot 2022-11-01 at 21 22 33"" src=""https://user-images.githubusercontent.com/51731962/199274539-83a1c8aa-edaf-4766-b1ff-9ac9d22fdd74.png""> For the ConnectingOrganization we are getting id from query <img width=""583"" alt=""Screen Shot 2022-11-01 at 21 23 47"" src=""https://user-images.githubusercontent.com/51731962/199275031-f95613f1-6cc8-4ff0-9d43-447d41eaa310.png""> And for the `Selecting Framework`  <img width=""415"" alt=""Screen Shot 2022-11-01 at 21 28 06"" src=""https://user-images.githubusercontent.com/51731962/199275540-cd80e5c7-fe79-4bc0-a84a-fa742eaff482.png"">  Please let me know if I am missing something @phunguyenmurcul "
"2022-11-01 16:11:27.1316+00","Oh shit, it actually does not copy in the previous code as per the linting explanation. TIL. I guess the copy must be made explicit.   ``` c := *client  use(&c)  ```"
"2022-11-01 16:12:31.000418+00","What about renaming the err to `innerErr` then?"
"2022-11-01 16:15:02.998051+00","I think we'd better with `nil` in both cases no? Why create an empty slice struct to hold nothing? "
"2022-11-01 16:15:18.054813+00","I ... am ashamed I didn't think of that 😅 "
"2022-11-01 16:24:03.284816+00","```suggestion         // Find if there are crowns or abutments in the new state that aren't in the old. ```"
"2022-11-01 17:23:12.834595+00","Understandability nitpick: ```suggestion  * Returns an Elasticsearch query to retrieve a list of manual measurements given the metric page's filters. ```"
"2022-11-01 16:24:03.561909+00","would recommend comparing against the `FluorideScreen` enum value"
"2022-11-01 16:33:34.206199+00","is this a left join?"
"2022-11-01 16:35:59.866803+00","OK let's go with this!"
"2022-11-01 16:37:14.365385+00","In an old thread, John had mentioned to me that for identifying ACH, `payment_source_id`: 1. if payment_source_id starts with ba_ then it's definitely an ACH payment 2. if it starts with src_, pm_, or pi_ then we can't tell whether it's a card or ACH (though those are rare) 3. anything else and it's definitely not an ACH  is this consistent with filtering for 'ch_ACH'?"
"2022-11-01 16:54:31.883945+00","This is inconsistent with the tests above, and describes more technical details than user scenario:  ```suggestion             it('should fail to mark in fabrication as ops', () => { ```"
"2022-11-01 16:39:36.673006+00","looks like this stg table doesn't apply any filters or anything, but do want to be conscious for future changes that mix base data with dbt tables, because we may be applying filters in dbt (test orders is a good example of this. dbt filters out all test orders, but currently Acctg is interested in them as part of reconciliation)"
"2022-11-01 17:23:08.954573+00","Codebase styling nitpick: ```suggestion      * Loads physical measurements data.      */     private async loadPhysicalMeasurements(): Promise<Array<{ ```"
"2022-11-01 16:42:26.507016+00","do we need `treasure.` prefix here? and line below"
"2022-11-01 16:43:34.524349+00","should this be treasure.fact_invoice?"
"2022-11-01 16:47:24.282479+00","Since fields get rendered as well even if you can't parse the logs as JSON, isn't filtering for `auditId` a more relevant and specific thing to look for?"
"2022-11-01 16:48:31.798337+00","Minor, but I believe its more correct to say ""Thanks, {firstName}"" (note the comma after thanks)! "
"2022-11-01 16:54:29.005739+00","ditto  ```suggestion             it('should mark an order an ""In Fabrication"" as the lab', () => { ```"
"2022-11-01 16:54:30.961015+00","This describe is missing a test for a non-integrated lab being able to mark an order in fab, which was the scenario that caused the incident"
"2022-11-01 17:04:35.615905+00","Done!"
"2022-11-01 17:27:57.571651+00","I tested on main, commented vs uncommented, tests pass either way"
"2022-11-01 16:54:34.906939+00","This assumes that every manufacturer has a `ManufacturerIntegrationDTO` entry, which is not true - most manufacturers actually don't have an entry in this table, since we have zero integration with their systems"
"2022-11-01 16:58:43.415512+00","Can we clean this up pre-merge?"
"2022-11-01 16:58:43.610367+00","Do these still pass?"
"2022-11-01 16:59:08.994002+00","i swear i un-commented these before pushing, but yes they do"
"2022-11-01 16:59:18.750443+00","real brainfart moment today"
"2022-11-01 17:00:32.461667+00","Do we no longer need this record to be deleted?"
"2022-11-01 17:09:14.152491+00","The cast is just trying to convince TS that these fields are not null, right? Can't we just `updatedField!`?"
"2022-11-01 17:09:25.45249+00"," I think there is a current guarantee by the api to return a valid slice. Clicking through the call graph I see no checks for nil, so it would make sense in that regard to return an empty slice?"
"2022-11-01 17:12:26.528944+00","That's pretty interesting. Do we expect our data to hit this edge case though? My worry is that more complex code is harder to CR or verify, and since we're not storing raw data in the data model, we have a limited number of tries on this."
"2022-11-01 17:14:45.134209+00","```suggestion   - **Project Manager:** a client-facing role that tracks internal progress, addresses client issues and manages client expectations on pull request delivery dates and credit costs  ```"
"2022-11-01 17:14:45.218124+00","```suggestion 2. **An experienced developer:** **Find tickets that don’t have PRs or Tasks yet**. As you grow in skill and experience, try to scope out work for yourself and others such as reviewing pull requests (remember, teamwork makes the dream work 😁). ```"
"2022-11-01 17:14:46.325826+00","```suggestion   - **Repo Owner:** typically an experienced developer who has deep knowledge about the client repository and ensures high code quality of each pull request ```"
"2022-11-01 17:16:50.255291+00","Minor nit: the tentative log message convention is lowercase and generally no punctuation: https://docs.sourcegraph.com/dev/how-to/add_logging#writing-log-messages"
"2022-11-01 17:22:16.968063+00","Do the '-''s belong here? it seems like it should just be: ""live and persistent documentation"""
"2022-11-01 17:22:17.005884+00","I realize you moved this and didn't write this on your own, but this sentence and paragraph are confusing to me.  we say ""All developers, except:"" and then we have one bullet that *sort of* matches the ""except"" clause (the second one) and one that is just a definition of who uses sourcegraph.  Maybe we should drop the ""All developers, except:"" part and just describe it in a paragraph?  Or, alternatively, change the 2 sentences so they align with the ""except"" like: - Developers at organizations with a small amount of code - Developers that rarely search, read, or review code "
"2022-11-01 17:22:17.140645+00","This paragraph seems out of place.  I like it but it doesn't seem to go with ""Who else uses Sourcegraph?"".  It seems like it belongs at the top as a ""Why do I need code search?"" heading or something like that maybe?"
"2022-11-01 17:22:17.262488+00","it's => its"
"2022-11-01 17:22:17.59783+00","this might be a pet peeve of mine, but I prefer ""developers"" to ""devs"".  Not a big deal either way - just my own preference :)   Also - ""code base"" can be either but it _looks_ like we usually use ""codebase"".  Again here I have no preference, just a preference towards consistency.  "
"2022-11-01 17:22:17.730812+00","same thing here - could we link to the doc describing code monitoring?"
"2022-11-01 17:23:07.96265+00","Nitpick: It appears to be the case that only two lines are in need of this lint rule being disabled. We should disable those lines (i.e. `eslint-disable-next-line max-len`) specifically instead of the entire document.   Alternatively, it feels we could make the params on the extra long lines into individual params. For example,  ```ts const metricNameFilter = metricName ? [{ wildcard: { 'inspections.measurements.intent.name.raw': `*${metricName}*` } }] : []; ... // And then in the query bool: {     filter: [ ...metricNameFilter ], } ```"
"2022-11-01 17:28:31.515402+00","When the user is parent navigate to Bookings screen"
"2022-11-01 17:22:17.789994+00","""large technology companies"" feels kind of limiting what about re-wording this to:  ""In addition to the [companies listed on about.sourcegraph.com](https://about.sourcegraph.com), companies with a few hundred developers all the way up to those with more than 40,000 use Sourcegraph daily."" "
"2022-11-01 17:22:17.828998+00","is this supposed to be search contexts?  could we link to the docs on it?"
"2022-11-01 17:22:18.199697+00","can we link to the query syntax page (/code_search/reference/queries) here?"
"2022-11-01 17:22:18.602484+00","I would drop the "", and has no indexing delay"" entirely.   Or, if you prefer, change it to ""with minimal delay"" or similar wording.   "
"2022-11-01 17:23:07.966938+00","This line should not be broken up like this for understandability purposes. We should apply the disable lint rule right above this line so it can be directly to this line.  Alternatively, we can do something like this (untested): ```ts const statsAggregation = { stats: { field: 'inspections.measurements.bodyAsImageFeature.realValue' } }; ... meas_stats: statsAggregation, ```"
"2022-11-01 17:23:08.000091+00","You can save a level of indentation for the block below by just returning here. Also note that the closing parenthesis needs to be on the next line.  ```suggestion         if (!deps.flags.accessStatus('measurement-r-1', true) ||             !deps.flags.accessStatus('measurement-sandbox-persistence', true)         ) return []; ```"
"2022-11-01 17:23:08.360671+00","Is there a reason for not combining these two requests in a `Promise.all`? Same questions for below on line 556?"
"2022-11-01 17:23:08.857095+00","Several items here:  1. We should use the edi-limits-helpers to do this check instead of doing it ourselves. I.e. `hasSavedLimits(limits, APIListMetricsDataType.NUMBER)` 2. The indentation is off for this line."
"2022-11-01 17:23:08.298494+00","Nitpick: We can probably just drop this for now as we are not using it nor verifying this is correct yet. FYI @jonboiser, this will probably be close to what we need for the Distribution chart."
"2022-11-01 17:23:08.582817+00","Codebase readability nitpick: ```suggestion                                                 must: [{                                                     exists: {                                                         field: 'inspections.measurements.bodyAsImageFeature',                                                     },                                                 }], ```"
"2022-11-01 17:23:09.960485+00","Codebase styling: ```suggestion                                     return stationInfo.doc_count > mostMeasurementStation.doc_count                                         ? stationInfo                                         : mostMeasurementStation; ```"
"2022-11-01 17:23:10.091085+00","Codebase styling: ```suggestion             retest         ); ```"
"2022-11-01 17:23:10.250174+00","```suggestion         dataType: APIListMetricsDataType.NUMBER, ```"
"2022-11-01 17:23:10.812426+00","Might be nice to organize this as `monitor: { id: DFXID, name: string }`. Also would be nice if these were alphabetical so it's easier to skim through."
"2022-11-01 17:23:11.082004+00","Nitpick: Swap the order here to match the order of inputs in the method. Also, it does not appear that the query param is ""Optional"" anymore so we should probably drop that from the description. "
"2022-11-01 17:23:11.197525+00","Codebase styling:  ```suggestion                                 const station = station_names.by_station_name.buckets.reduce((                                     mostMeasurementStation: any, stationInfo: any                                 ) => { ```"
"2022-11-01 17:23:12.840331+00","I think this is possible if we set `EmptyFilter = {""match_all"": {}}`, or at least it didn't break when I ran the query in my console. The only item I would be wary of is the `match_all` sets all document scores to `1` ([documentation](https://www.elastic.co/guide/en/elasticsearch/reference/master/query-dsl-match-all-query.html)). For this use case probably doesn't make a difference, but I would be hesitant to make this our standard. That being said, we do use `match_all: {}` in the filter clause in some of the older control-panel/subscriptions queries."
"2022-11-01 17:23:12.886232+00","I also wonder if `metricName` needs to be separate considering it is a part of `physicalMeasurementData`?"
"2022-11-01 17:24:23.996864+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion         , ARRAY_AGG(             message_details__dialpad_time_to_connect_in_seconds         ) WITHIN GROUP (ORDER BY message_created_at ASC, message_details__direction = 'in' DESC)[0]::varchar         AS dialpad_time_to_connect_in_seconds         , ARRAY_AGG(             message_details__call_duration_minutes         ) WITHIN GROUP (ORDER BY message_created_at ASC, message_details__direction = 'out' DESC)[0]::varchar         AS call_duration_minutes ``` "
"2022-11-01 17:24:24.281877+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion ``` "
"2022-11-01 17:25:39.800662+00","It didnt appear to be needed beforehand either, and Im not able to figure out a reason why I had this in the first place :thinking: "
"2022-11-01 17:26:56.439156+00","Well, you took 16 and 17 out of an existing test case. Is this why?"
"2022-11-01 17:28:31.718706+00","if this hook is only for parents, every useEffect should check for `if (!isParent) return`  You should not make any queries here is the user is not parent"
"2022-11-01 17:44:03.031474+00","This is just a POC to test the package is working for excavator too - I am planning on writing extensive tests for this feature in another PR"
"2022-11-01 17:44:41.931533+00","Turns out excavator uses `sdk.ts` directly, and does not have its own RDS, which is required for the test helpers. So I put this in as a copy of the zipstream one."
"2022-11-01 17:45:21.440909+00","I think the style conventions are to use lower case on all field and explore names  ```suggestion explore: am_outreach_datespine { ```"
"2022-11-01 17:45:21.529189+00","i think one way to make this not a `many_to_many` join and instead a `many_to_one` join (if that's what we want) is if we join tasks directly to this table using the sf account id AND the month of the task = the month of the status?"
"2022-11-01 17:46:00.470601+00","I'd be curious to understand why you'd need such a guarantee on a normal slice, I mean if you need to append, it works with nil perfectly, so where else would we need this if we don't have methods on that type ? "
"2022-11-01 17:46:25.570754+00","You killed me with that meme btw 🤣 "
"2022-11-01 17:54:16.194337+00","Should these be cast a INT or NUMERIC type instead?"
"2022-11-01 17:56:20.693379+00","Definitely yes"
"2022-11-01 17:58:10.066439+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion         , ARRAY_AGG(             message_details__dialpad_time_to_connect_in_seconds         ) WITHIN GROUP (ORDER BY message_created_at ASC, message_details__direction = 'in' DESC)[0]::numeric         AS dialpad_time_to_connect_in_seconds         , ARRAY_AGG(             message_details__call_duration_minutes         ) WITHIN GROUP (ORDER BY message_created_at ASC, message_details__direction = 'out' DESC)[0]::numeric         AS call_duration_minutes ``` "
"2022-11-01 17:50:43.76228+00","My prettier settings fucked this file, but the only real change in this to `testMatch` - integration tests are able to run alongside unit tests, we don't need them to be separate anymore"
"2022-11-01 18:19:23.710362+00","my brain was not working yesterday -- the invocation of `cmd.handle` is indeed within the context of the trace callback and captures the parent context.  I think the code is a bit hard to reason about with the promise being passed out and awaited externally, so I'd still recommend going the route of my code suggestion, as it's a lot simpler to understand for most developers, IMO."
"2022-11-01 18:34:38.329601+00","To add to Jonathan's note, I pasted the training material that Vivek shared which also suggested that we use a 'bool' clause as it allows taking an array of filters or a single filter object. [Training slide](https://docs.google.com/presentation/d/1b9zD6eS50IIwSek-vtYhwZ1wOZNP4tU2yRpVSoWL0Ao/edit#slide=id.g4529e599f5_0_131) "
"2022-11-01 18:46:59.621056+00","I lost this change while rebasing this PR, so opened a new PR for it: https://github.com/sourcegraph/sourcegraph/pull/43764"
"2022-11-01 18:47:51.239964+00","👑 "
"2022-11-01 18:47:51.401295+00","Can add this once my PR is mergiddy merged"
"2022-11-01 18:51:09.956227+00","In theory yes. But in practice there isn't much overlap in the rules that should result in duplicate results. The main cause of duplicate results is running both of, say, `func parse` and `func AND parse`.  Plan is to reintroduce the deduping (only for the odd ~13% of affected searches) or find a way to do this with the term negation. Depends a little how difficult it is to restructure the code for either of those cases."
"2022-11-04 18:41:25.652542+00","```suggestion 	if !opt.IncludeNeverActive { 		conds = append(conds, sqlf.Sprintf(listUsersWithEventsCond)) 	} ```"
"2022-11-01 19:02:56.250718+00","Isn't the `lastSeen` used here in UTC? Does it make a difference?"
"2022-11-01 19:09:30.786795+00","Just curious, how is this different from onClick? Would this cause the handler to be invoked twice?"
"2022-11-01 19:15:27.367392+00","This is a good way to reuse the old markup, but maybe it would be simpler to implement this as an actual table element? It would probably require less CSS, I imagine."
"2022-11-01 19:21:15.422476+00","@jonboiser  that is a good point.  @jonathan-yee Sometimes there are cases where measurement name is an empty string and I also suspect there could be a similar case as well in the autoMeasure data. With that being said, shall we still use the measurement Name against monitor Name to pull in the monitor name for the manual measurements data?"
"2022-11-01 19:24:05.151901+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion FROM account_plans ``` "
"2022-11-01 19:24:05.277595+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion ``` "
"2022-11-01 19:24:05.274393+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion ``` "
"2022-11-04 18:41:25.709912+00","- [x] Nest this in the if statement above so that it only applies when both `InactiveSince` and `NeverActive` are set."
"2022-11-01 19:24:05.692545+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion ``` "
"2022-11-01 19:24:06.196508+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion ``` "
"2022-11-01 19:24:06.286011+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion ``` "
"2022-11-01 19:24:06.591022+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion /* ``` "
"2022-11-01 19:24:08.637249+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     /* description plan_status_changed_to_complete_at = date the status of the plan was moved to Complete */ ``` "
"2022-11-01 20:24:56.195715+00","@hashimaziz46 let's change this approach ```suggestion  check('withLatestVersion').isBoolean().optional().default(true), ```"
"2022-11-01 19:31:01.192472+00","Hi @jonboiser , I tried to use an actual table element but lost the list interaction. This was the easiest route with out updating the function and still maintain the interaction."
"2022-11-01 20:03:40.538996+00","That is a good point. However, based on previous experiences, this could cause a lot of problems if we allow users to create monitors without saving a name. In fact, currently, we cannot open the bulk measure modal without saving a name for the measurement so it should never be the case that we would be able to create a monitor without a name.  Update: Yes we need to match names. Otherwise, there is no way to distinctively match the measurements to the monitors?"
"2022-11-01 20:24:56.089+00","this EXCEPT enum hasn't been provided so we can remove it ```suggestion  ```"
"2022-11-01 20:25:34.010275+00","Using `colors` is causing the JS bundle to compile to something that is not valid JS. Replace this line for now with this, but I think we should find a different solution for overriding the SVG attributes  ```suggestion             .replaceAll('#03BBD2', '#777777') ```"
"2022-11-01 20:47:55.397026+00","@hashimaziz46  since we've added `default()` in router we'll remove this line ```suggestion     const { statuses, withLatestVersion } = req.query; ```"
"2022-11-01 20:48:17.993275+00","ordering a single aggregate's events in memory shouldn't be too expensive (and in any case we currently do this in node, so the index doesn't help at all - though we'll likely change that in the near-medium future)"
"2022-11-01 20:48:26.156163+00","ordering by `id` works just as well as `created_at` for this index's purpose (partitioning aggregates for rebuilds) and removing `created_at` makes this index much less expensive to build"
"2022-11-01 20:50:06.141376+00","just giving this an explicit name to make it easier/clearer to refer to in future migrations"
"2022-11-01 21:10:41.102489+00","All I did was add curly braces and a `return` statement.  I can revert this file back for a cleaner diff, but I think leaving it this way will make it easier for future developers to throw in a `console.log(update)`, for example."
"2022-11-02 01:38:46.762604+00","minor nit: this component only ever calls with true, so why not make it just `() => void` and set the true part higher in the component tree closer to where the state variable is defined?"
"2022-11-01 21:11:10.05248+00","@Mjanuary I think this a tautology when do we need to countDocuments?since we pass same conditions pipeline I think we should have used one `EnvelopeService.getEnvelopeActivities({});` can you take a look in your codes?"
"2022-11-01 22:12:36.322492+00","Let's keep the name of this property consistent throughout the code.  ```suggestion     isSourcegraphDotCom?: boolean ```"
"2022-11-01 22:12:36.411063+00","Do we not want to show these interactive tips on dotcom? Or do they not work?"
"2022-11-01 22:12:37.252474+00","I think this footer doesn't work in its current location because [in the tablet/phone view, it's in the middle of the suggestions](https://www.chromatic.com/pullrequest?activeElementId=comparison-test-key-630e3ef135d96f02a5757bdc-544&appId=5f0f381c0e50750022dc6bf7&number=43766&view=changes). It should probably be outside of the columns altogether so it appears after all the suggestions regardless of layout."
"2022-11-01 22:12:38.232481+00","`/help` should work everywhere, even on dotcom."
"2022-11-01 23:18:09.42002+00","@dandysean this now reads imperatively ""start span, do stuff and return, end span"" vs. triple-nested async; thoughts?"
"2022-11-01 22:12:39.374967+00","I think we can simplify this? Not identical but I don't think we have (many?) customers allowing unauthenticated use.  ```suggestion                 {(!showEnterpriseHomePanels && props.authenticatedUser) && ( ```"
"2022-11-01 22:14:34.44284+00","The logged out homepage looks almost the same as the logged in homepage, do we want to get rid of this file? The only difference left seems to be the ""pro tip"" part which I think would be OK to show to all users (authenticated or not) on dotcom."
"2022-11-01 22:15:24.637102+00","There is a lot of code duplication happening just to make these 3 lines different. Instead of creating a separate point object it would be better to just modify `point`. This could be done in two ways.  Option 1: modify the definition of `points` so these properties are conditionally set:  ```ts                 xPx: this.zoomState === 'in' ?                     parseFloat(eventTarget.parentElement.dataset.thumbX) + (mouseX * thumbExtract / thumbDisplay) :                     zoomedOutPointRegions[pointIndex].x + (mouseX * thumbExtractZoomedOut / thumbDisplay),                 yPx: this.zoomState === 'in' ?                     parseFloat(eventTarget.parentElement.dataset.thumbY) + (mouseY * thumbExtract / thumbDisplay) :                     zoomedOutPointRegions[pointIndex].y + (mouseY * thumbExtractZoomedOut / thumbDisplay),                 magnification: thumbDisplay / (this.zoomState === 'in' ? thumbExtract : thumbExtractZoomedOut), ```  Option 2: just modify the point in the `else` clause:  ```ts                     point.xPx = zoomedOutPointRegions[pointIndex].x + (mouseX * thumbExtractZoomedOut / thumbDisplay);                     point.yPx = zoomedOutPointRegions[pointIndex].y + (mouseY * thumbExtractZoomedOut / thumbDisplay);                     point.magnification = thumbDisplay / thumbExtractZoomedOut; ```  In either case you can keep `this.points.push` where it was before, outside of the `if`/`else`."
"2022-11-01 22:23:09.038794+00","`dashboard` (lowercase `d`) to match what we have in other menu items?"
"2022-11-01 22:58:20.282811+00","I don't understand the objection to spreading an empty array? We use that pattern all over the place:  ```bash frontend$ git grep -E '\.\.\.\(.*\?' | wc -l       69 ```  Personally I think it's great because it prevents unnecessary clauses from showing up in the resulting array and potentially slowing things down."
"2022-11-01 23:02:22.25015+00","It is in UTC, that's why we reformat it into user-local time."
"2022-11-01 23:07:14.041741+00","added in else below"
"2022-11-01 23:11:37.702483+00","As is, I believe that if an error is thrown inside this method our `errorHandler` will emit an alert independently of whether user's context changed (i.e. by navigating away from the page, selecting a different unit/sidebar filter) between the request trigger and the response which seems unfortunate.  Have you put any thought into this?"
"2022-11-01 23:13:51.311046+00","Yeah, pulled all of that for this MVP.  When using webpack to pull in this file, it would have been easy to just *not include* anything by dropping it from webpack. I'm not too sad about dns/tcp being included. GRPC was a pain to get the autoinstrumentation working, but we want that. Haven't yet figured out why we're seeing HTTP but not GraphQL.  I intend to add only the ones we want once we figure out what's useful; was trying to get this in others' hands before going nuts on the configuration: still not sure how to gate that on LaunchDarkly since this is the *first thing* that loads and gets enabled."
"2022-11-02 01:38:54.080602+00","```suggestion     }, [patient, setEditedPatient]); ```"
"2022-11-01 23:22:57.202493+00","I confirmed it worked correctly before I put it up."
"2022-11-01 23:24:12.644894+00","added, @Joeb3219 does that work?"
"2022-11-01 23:24:52.198553+00","I'm not familiar with how to call `errorHandler` so that it does not bring up the modal.  Is it just a matter of adding an option here? https://github.com/dfxmachina/frontend/blob/49daa9ce9ab183eae212e755b5e5fb613388beb6/app/modules/metrics/metrics-controller.tsx#L1367-L1378"
"2022-11-01 23:27:59.806118+00","These tests are posting to a live click up endpoint?"
"2022-11-01 23:36:16.262453+00","Yes, you can use: [renderTarget](https://github.com/dfxmachina/frontend/blob/master/app/modules/utils/error-handler.ts#L56-L58)  But that by itself won't fix the behavior I'm describing here, it'd only render the error message onto the given target and stop emitting the alert."
"2022-11-01 23:59:07.678818+00","I would need to create a closure that saves the current context at the request trigger (would the URL alone be enough to capture the context?) and cancels the callback if the context has changed by the time the response comes back.  I could add here if simply checking URL is enough, or if there is another solution"
"2022-11-04 18:41:26.462619+00","- [x] Rename - [ ] Redocument to match graphql layer semantics"
"2022-11-02 00:43:18.967125+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion         , SUM(additions) AS sum_commit_additions         , SUM(deletions) AS sum_commit_deletions         , SUM(changes) AS sum_commit_changes         , COUNT(DISTINCT filename) AS count_distinct_files_in_commit_changed ``` "
"2022-11-02 00:43:19.048136+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion         , COUNT( DISTINCT IFF(status = 'added', filename, NULL) ) AS count_distinct_files_added ``` "
"2022-11-02 00:43:19.558633+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion WITH source AS (     SELECT * FROM {{ ref ('github__pull_requests') }} ``` "
"2022-11-02 00:43:19.978937+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     SELECT ``` "
"2022-11-02 00:11:31.68756+00","I'm actually wrong, sorry about that 🤦   Looking closely it seems like we're feeding `loadControlChartTimeSeriesData` a `CancelableAPI` which means that if an error is thrown or if the context changes (which cancels any in-progress requests made with this API) the `errorHandler` will simply ignore it.  Edit: fwiw and for my own sanity check, it looks like we were only using a `CancelableAPI` after rebasing from latest master 🤷 "
"2022-11-04 18:41:26.582478+00","```suggestion const listUsersWithEventsCond = ` (EXISTS ( 	SELECT 1 FROM event_logs 	WHERE event_logs.user_id = u.id )) ` ```"
"2022-11-02 00:43:20.137367+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     LEFT OUTER JOIN commit_summary ``` "
"2022-11-02 00:43:20.919387+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     FROM pull_request ``` "
"2022-11-02 00:57:17.502478+00","Okay, I went ahead and added a closure to check whether the context (based on the load ID, URL, and active chart tab) has changed. This handles the examples you gave (going to a new page, changing the filters, etc.), but still has the shortcoming (?) that we are flatten the error message by not using the error handler.  Also, I'm not sure if the CancelableAPI is cancelling the request, since George and I have been able to get the error modal to appear by navigating away from the metrics page."
"2022-11-02 01:13:52.977107+00","We want to avoid functions like this as much as possible, especially when we're modifying things in state (which we are in this case). We should adopt a pure function that does not modify the input"
"2022-11-02 01:07:22.324676+00","instead of mutating the input we can return the input with the fields we do not want to keep `filter`ed out. The fields we would want to filter are those listed in `MATERIAL_TO_FIELD_ID` above"
"2022-11-02 01:07:22.467023+00","Instead of setting the fields to keep, we should set the fields that we want to remove as it will be far more flexible. If I want to add an additional field for night guards that shouldn't be cleared, I would not have any idea that I also have to update this function in order for that value to actually exist"
"2022-11-02 01:07:23.09259+00","what's the purpose of this change? It's not related to the work being done in this ticket and doesn't seem to change behavior so I'd suggest we revert"
"2022-11-02 01:07:23.284446+00","```suggestion     return preference_fields.find(pref => fieldIdsForMaterialsWithThicknessSettings.includes(pref.field_id))?.value ``` this can be simplified down quite a bit"
"2022-11-02 01:07:23.491899+00","same thing with this change - is unrelated to PR w/ no effect so it doesn't make sense to include it"
"2022-11-02 04:35:10.518395+00","Let's not do this for now till we figure out better permissions rather than permissions on just the parent. I'd introduce a ticketCode field instead and just return the ticketCode only"
"2022-11-02 01:07:24.052493+00","We should derive this from the metafield itself rather than hardcoding anything. You can find an example of this in the quantity select"
"2022-11-02 01:07:24.328254+00","```suggestion const MATERIALS_WITH_THICKNESS_OPTIONS = [     'Hard',     'Soft',     'Hard / Soft' ] as const; type MaterialsWithThicknessOptions = typeof MATERIALS_WITH_THICKNESS_OPTIONS[number];  const MATERIAL_TO_THICKNESS_FIELD_ID: { [T in MaterialsWithThicknessOptions]: string } = {     Hard: 'night-guard-thickness-order-item-meta',     Soft: 'soft-night-guard-thickness-order-item-meta',     'Hard / Soft': 'hard-soft-ng-thickness-order-item-meta' }; ```  just a suggestion as to how these types can be simplified"
"2022-11-02 01:07:25.032886+00","We've already declared these properties in one place, so we should aim to avoid re-declaring them so that we can maintain a single source of truth. You can just use `Object.values(MATERIAL_TO_FIELD_ID)` to get each of these properties in an array"
"2022-11-02 01:11:27.844811+00","this function is disgustingly bad already - can you move this into another component that abstracts away some of the state? Also, not sure why the state needs to be passed as props, you can just render the edit modal in the new component and manage the state locally there"
"2022-11-02 01:38:46.672529+00","why isn't `setPatientEditOpen` included in the memo props?"
"2022-11-02 06:22:20.232476+00","```suggestion - `STRIPE_WEBHOOK_SIGNING_SECRET` is the webhook secret key used to verify that the events received on our API were sent by Stripe, not by a third party mimicking to be Stripe. It's generated by Stripe and unique to an endpoint, see `endpoint.ex` for the list of all endpoints. ```"
"2022-11-02 01:40:27.500892+00","I would prefer that we use the Grid system to enforce the width rather than setting it on the options themselves - should be easier to update when it comes time to respect our layouts more accurately as part of the framework refactor"
"2022-11-02 02:10:17.757745+00","We need an additional check for the type of error being thrown otherwise when a cancelation error is thrown these new lines will cause new errors, see this: [screen capture](https://drive.google.com/file/d/1K5lxsKYhCWLemD7G2HtQqX9u0NNVx-t9/view?usp=sharing)  Adding the following between lines 1371 and 1372 should suffice.  ```ts if (isAbortError(error)) return undefined ```"
"2022-11-02 02:20:29.49247+00","I'm skeptical that we need the url check 🤨  Could it be that the branch version you were working from did not include the Correlations Control chart changes and as such [was not making use of a CancelableAPI](https://github.com/dfxmachina/frontend/pull/2551/files#diff-42d0d92ca14f57870f047e735b75392ecdac7f941b157bec8d05a46750446f4dL1396) for when fetching time series data for Control Charts?   I believe something like following should suffice for the use cases we're trying to cover:  ```ts const loadId = this.loadId; const response = await eventHandlers.activateControlChartTabHandler(metricName); if (typeof response === 'undefined') return; if (this.loadId !== loadId) return; if ((this.elem() as HTMLElement)?.dataset.chartContent !== 'control') return; ``` "
"2022-11-02 02:35:53.182485+00","From **_mattkrick_**: -1 we'll want to clean up the function on unmount. Consider using https://github.com/ParabolInc/parabol/blob/f3361ab138d76ecbd2fa233e518790226414709e/packages/client/hooks/useHotkey.ts#L7 "
"2022-11-02 03:06:58.807582+00","One last thing I noticed:  I think we also want `package.json` => `""@google-cloud/opentelemetry-cloud-trace-propagator"": ""0.14.0"",` `const textMapPropagator = new CloudPropagator();` `new NodeSDK({ ..., textMapPropagator });` so that the traces will propagate with headers that are recognized by our GCP LoadBalancer, allowing e.g. *same trace* functionality in the associated GCP Logs."
"2022-11-02 03:54:29.534994+00","Just a nit: this comment is duplicating the code. I think ""Returns a query for Developer, joining with User"" should suffice."
"2022-11-02 03:56:09.939414+00","@iurimadeira @rlopzc  I am not sure if this is ok, or if we should have separate environment variables for these two use cases?"
"2022-11-02 03:57:16.022487+00","because i am OFF MY GAME"
"2022-11-02 04:00:33.850114+00","Thanks for the comment, I was following how other join functions are documented.   And in my opinion, specifying the named binding in the documentation is useful because we can see the named binding through the doc when piping these functions in context files, which is useful when we try to run operations like `select` and `where`. "
"2022-11-02 04:19:18.418172+00","3468ea4"
"2022-11-02 04:19:20.432495+00","3468ea4"
"2022-11-02 04:18:30.441608+00","Actually it may be nice to recommend adding more context in task titles like the PR number or the PR title so that when developers have their standups posted on Slack others also get that context.  This could also be an improvement later on to add this context automatically as the default task title depending on the type of the task."
"2022-11-02 04:19:40.152615+00","."
"2022-11-02 04:42:10.702467+00","dd6e279"
"2022-11-02 04:42:24.587964+00","https://github.com/orthly/Scanner/commit/dd6e279d7198233374e20e7ed36968f8275a0049#diff-8afb574ab0744a80cd86f7db2865cce3fd29a32a6cef3309d9e798836d28e898R75"
"2022-11-02 04:48:36.664676+00","Fixed, thanks"
"2022-11-02 07:21:03.603561+00","Same as above"
"2022-11-02 07:09:55.183948+00","It's the condition that determines the presence of the SearchMenuItem field within the menu. The same applies to all the use cases below as well. I have also extracted them into variables https://github.com/GitStartHQ/client-parabolinc-parabol/blob/dc61249ebb85035bde1064f0202f82a6975c9fb4/packages/client/components/UserDashTeamMemberMenu.tsx#L76-L78"
"2022-11-02 09:21:47.202664+00","what is this?"
"2022-11-02 05:10:33.092465+00","I literally independently made this same exact change on the rebrand 🤯   I would suggest modifying the `Icon` prop to be similar to here since we actually don't need them to provide a component anymore - [`c1ab6f8` (#980)](https://github.com/orthly/Scanner/pull/980/commits/c1ab6f86bd7ec9758745996d3de800e2b9864237#diff-996a3eec4855d51afe0e3a4cbbefedfc95fd8b74ab4e655d1b86f594c4e796c1R73)"
"2022-11-02 05:10:37.962083+00","."
"2022-11-02 05:10:28.242473+00","."
"2022-11-02 04:46:35.034942+00","."
"2022-11-02 05:31:35.726801+00","0d73ed7"
"2022-11-02 05:58:41.513339+00","TIL about nil append"
"2022-11-02 06:17:03.632475+00","This is ok. Phoenix explicitly states: `a secret key used as a base to generate secrets for encrypting and signing data. For example, cookies and tokens are signed by default, but they may also be encrypted if desired. Defaults to nil as it must be set per application`"
"2022-11-02 07:21:07.782471+00","Same as above"
"2022-11-02 08:23:45.532473+00","@jhchabran / @davejrt Any reason we can't make this part of the base agent image?"
"2022-11-02 09:23:31.580267+00","Thanks.  - Do we get warning in console? - Can we fix it? i.e. make correct itemKey?"
"2022-11-02 09:41:34.692602+00","oooh good point. I'll bail out rather then. Initially I aimed to keep existing behaviour"
"2022-11-07 16:24:19.516407+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     WHERE training_created_order = 1         AND is_initial = true ``` "
"2022-11-02 06:22:16.102489+00","```suggestion An environment variable is a dynamic-named value that affect the way running applications and services will behave within the system. Each variable contains a name and an associated value.  We typically use them to provide credentials, and secrets for the applications that our system interacts with. Production and staging variables are defined in the appropriate [fly.io](fly.io/) project.  Local variables are defined in `.envrc` which is a git-ignored file (you can create it from the template file `.envrc.example`).  The values are highly sensitive and must stay private as they enable access to critical services that our system interacts with. Most of the values are stored on 1Password, while the most sensitive ones are kept in the related application for specific people to access them. This document defines all the environment variables that we use in `equanimity`.  ```"
"2022-11-02 06:22:16.219369+00","Why is this removed?"
"2022-11-02 06:22:16.412489+00","```suggestion - `STRIPE_API_SECRET` is the secret key generated by Stripe. It's used to authenticate the requests made by our server to Stripe. There are a live/test mode secrets and start with ""sk_live_"" / ""sk_test_"" respectively. ```"
"2022-11-02 06:22:18.318498+00","You could also explain what is this used for"
"2022-11-02 06:22:20.426698+00","Can you list what are the AppSignal variable names?"
"2022-11-02 06:39:51.090264+00","```suggestion export interface FetchElasticResponse { ```"
"2022-11-02 06:44:05.242556+00","```suggestion 	private focusListener: Function; ```"
"2022-11-02 06:44:05.642335+00","Why did you add a new line here?"
"2022-11-02 06:47:06.839605+00","might be better to open up in new page instead of same page for usability"
"2022-11-02 06:47:06.981394+00","this type looks sus 😆 "
"2022-11-02 06:48:07.882497+00","```suggestion   const URL = 'https://developers.gitstart.com/'; ``` Or get from env variable"
"2022-11-02 06:48:30.580633+00","```suggestion         <meta property=""og:image"" content={`${URL}favicon.ico`} /> ``` There is the `/` at the end in URL"
"2022-11-02 06:52:22.201072+00","We do plan to add images and diagrams in a later step - right now, we're not entirely sure how they will render in GitBook, so don't want to spend too much time optimizing them in case they don't look good (and we're better off using just PNGs)"
"2022-11-02 06:54:43.260197+00","```suggestion  private objectContainsTemplate(obj?: object) {     if (!obj) {       return false;     }      for (const key of Object.keys(obj)) {       const typedKey = key as keyof typeof obj;       if (this.isPrimitive(obj[typedKey])) {         if (this.templateSrv.containsTemplate(obj[typedKey])) {           return true;         }       } else if (Array.isArray(obj[typedKey])) {         for (const item of obj[typedKey] as object[]) {           if (this.objectContainsTemplate(item)) {             return true;           }         }       } else {         if (this.objectContainsTemplate(obj[typedKey])) {           return true;         }       }     }      return false;   } ```"
"2022-11-02 06:59:04.552485+00","For select frontend framework , we are getting undefined value for  `get(option, props.itemKey)` and `get(props.modelValue, props.itemKey)` in all option so every option are selected  <img width=""1440"" alt=""Screen Shot 2022-11-02 at 12 40 48"" src=""https://user-images.githubusercontent.com/51731962/199421277-550a466c-6c44-447d-b3bb-d4e7f45ddba8.png""> "
"2022-11-02 07:03:02.12229+00","Thanks! We will keep this into account once we move to GitBook. This is a bit of a rough draft, so it's not organized in the prettiest way and sorely lacks visuals.   We'll also aim to simplify the language once the content is live to ensure our point is getting across for non-native English speakers 😄 "
"2022-11-02 07:03:48.880994+00","Changed, thanks"
"2022-11-02 06:18:01.54027+00","Both the `zoomedOutPoint` and the `point` objects are used inside the else block. Changing the `point.xPx` and `point.yPx` values in the else block will produce a different result. Would it be okay if I just spread the rest of the `point` object properties inside the `zoomedOutPoint` object like so:  ``` else if (this.zoomState === 'out') {       const zoomedOutPoint = {          ...point,           xPx: zoomedOutPointRegions[pointIndex].x + (mouseX * thumbExtractZoomedOut / thumbDisplay),           yPx: zoomedOutPointRegions[pointIndex].y + (mouseY * thumbExtractZoomedOut / thumbDisplay),           magnification: thumbDisplay / thumbExtractZoomedOut,       };        this.points.push(zoomedOutPoint);       eventTarget.insertAdjacentHTML('afterend', (           <>               <div class=""bulk-measure-modal-point"" data-zoom-level=""in"" style={{                   top: Math.round((zoomedOutPoint.yPx - pointRegions[pointIndex].y) *                       (thumbDisplay / thumbExtract)) + 'px',                   left: Math.round((zoomedOutPoint.xPx - pointRegions[pointIndex].x) *                       (thumbDisplay / thumbExtract)) + 'px',               }}></div>               <div class=""bulk-measure-modal-point"" data-zoom-level=""out"" style={{                   top: Math.round((                       point.yPx - pointRegions[pointIndex].y) * thumbDisplay / thumbExtract) + 'px',                   left: Math.round((                       point.xPx - pointRegions[pointIndex].x) * thumbDisplay / thumbExtract) + 'px',               }}></div>           </>       ).s);   } ```"
"2022-11-02 07:09:32.426798+00","This is a very slow way of doing it, specially with all the date parsing and stuff being called there."
"2022-11-02 07:20:52.155523+00","Same as above"
"2022-11-02 07:12:52.076172+00","I've added [a follow-up ticket in Linear](https://linear.app/gitstart/issue/PD-38/improve-developer-docs) as a catch-all for improvements we want to make to docs. We can add a few things in there going forward.  We can create a separate ticket for features (not sure how we organize that + coordinate it with HelloNext output yet, maybe we can discuss in the next product team meeting)"
"2022-11-02 07:20:55.43115+00","Same as above"
"2022-11-02 07:58:05.482552+00","I think we can just use the standard `updateItem({ name: 'preference_field', payload: submission })` here since we won't ever be updating the specific properties that `getUpdateMetafield` is useful for. That function was designed specifically for the nuances of the preferences select"
"2022-11-02 07:58:05.512747+00","I would still suggest that we adopt the simplified, functional version expressed here - https://github.com/orthly/Scanner/pull/1048#discussion_r1011042749  In general it's preferred to avoid explicit for loops as it's easier to make mistakes and in this case harder to read"
"2022-11-02 07:58:05.626008+00","if you move this check out to a type guard function you shouldn't have to use the `as typeof MATERIALS_WITH_THICKNESS_OPTIONS[number]` cast below. Ping me if it's unclear what this means"
"2022-11-02 07:58:06.922491+00","if you merge in the changes from the latest develop you shouldn't need to include the next button here"
"2022-11-02 07:58:09.558224+00","instead of making this a function it's likely less error prone if we adopt a map structure with the following type so that we can just get the options directly: `{ [T in MaterialsWithThicknessOptions]: BigRadioOption<string>[] }`"
"2022-11-02 07:58:09.988329+00","Better yet, we should actually be able to pull these directly from the metafield that we get with `AllItemMetafields.find(f => f.id === field_id)` and we don't need to define them at all here"
"2022-11-02 08:05:18.041937+00","```suggestion ```"
"2022-11-02 08:18:16.022489+00","Fixed! And all tests pass ❤️ "
"2022-11-02 08:28:16.911734+00","I'm not sure if it's possible for the same field to have multiple entries in the errors list? I've never seen it happen, and I can try to create a test case with that scenario that could break this. What do you think @rlopzc @iurimadeira ?"
"2022-11-02 08:38:07.882506+00","Shouldn't this be `Owner`?  ```suggestion 				RepositoryPathPattern: ""{nameWithOwner}"", ```"
"2022-11-02 08:38:13.670779+00","That's wrong, right? It just puts the pattern in the name. Is that what you wanted to test?"
"2022-11-02 08:39:40.112505+00","That is a good point; I confirmed that both return the same amount of data. I'll fix the docs, and I agree that `auditId` is more idiomatic than `sampling immunity token`; the latter makes the search de facto depending on the side effect."
"2022-11-02 08:39:51.261862+00","Weird that the template isn't been populated here.  For example, the other tests don't do this: https://sourcegraph.sourcegraph.com/github.com/sourcegraph/sourcegraph/-/blob/internal/repos/testdata/golden/GithubSource_makeRepo_path-pattern"
"2022-11-02 08:40:16.068453+00","same as the other file, it is fine to overwrite err. You may in fact want to handle coming across an err as a function argument. From reading the code, I'd recommend just logging and skipping. (the err in WalkDir comes from failing to stat something, eg permission error)"
"2022-11-02 08:40:16.100954+00","log error as well"
"2022-11-02 08:40:16.250259+00","last statement in function, no point using defer"
"2022-11-02 08:40:17.090429+00","over writing err is fine here. additiionally you need to return innerErrr if this fails, not the err param."
"2022-11-02 08:40:17.280033+00","this should be err"
"2022-11-02 08:41:03.350026+00","doh - thanks. Will fix"
"2022-11-02 08:44:32.187554+00","Fixed"
"2022-11-02 08:51:08.242473+00","Thanks  for the observation"
"2022-11-02 09:10:26.628253+00","right - I'll take a look at them. Thanks for flagging it @bobheadxi "
"2022-11-02 09:56:33.766777+00","Why the use of `any` type?"
"2022-11-02 10:57:21.652072+00","I think this looks a bit off with the icon just dangling in a separate line:  <img width=""713"" alt=""screenshot_2022-11-02_11 56 22@2x"" src=""https://user-images.githubusercontent.com/1185253/199472405-4c582b74-9b6b-4d5f-b00e-e948fc0e20b1.png"">   I played around a bit with the code and arrived at this: <img width=""713"" alt=""screenshot_2022-11-02_11 55 20@2x"" src=""https://user-images.githubusercontent.com/1185253/199472451-d21046d0-06ef-4d41-b5dd-9da08262da16.png"">   I think that's better. WDYT?  Here's the diff for how to get there:  ```diff diff --git a/client/web/src/site-admin/WebhookNode.module.scss b/client/web/src/site-admin/WebhookNode.module.scss index 1233407166..17b5a37a22 100644 --- a/client/web/src/site-admin/WebhookNode.module.scss +++ b/client/web/src/site-admin/WebhookNode.module.scss @@ -3,6 +3,7 @@          // Make it full width in the current row.          grid-column: 1 / -1;          border-top: 1px solid var(--border-color-2); -        padding-bottom: 0.3rem; +        margin-top: 0.5rem; +        padding-bottom: 0.5rem;      }  } diff --git a/client/web/src/site-admin/WebhookNode.tsx b/client/web/src/site-admin/WebhookNode.tsx index 068332471c..67f580e8d2 100644 --- a/client/web/src/site-admin/WebhookNode.tsx +++ b/client/web/src/site-admin/WebhookNode.tsx @@ -2,7 +2,7 @@ import React from 'react'    import { mdiCog, mdiDelete } from '@mdi/js'   -import { Button, H3, Icon, Text, Tooltip } from '@sourcegraph/wildcard' +import { Button, H3, Icon, Tooltip } from '@sourcegraph/wildcard'    import { defaultExternalServices } from '../components/externalServices/externalServices'  import { WebhookFields } from '../graphql-operations' @@ -19,34 +19,23 @@ export const WebhookNode: React.FunctionComponent<React.PropsWithChildren<Webhoo          <>              <span className={styles.nodeSeparator} />              <div className=""pl-1""> -                <H3 className=""pr-2"">{node.codeHostURN}</H3> -                <Text className=""mb-0 text-muted""> -                    <small> -                        <Icon as={IconComponent} aria-label=""Code host logo"" className=""mr-2"" /> -                    </small> -                </Text> +                <H3 className=""pr-2""> +                    {' '} +                    <Icon inline={true} as={IconComponent} aria-label=""Code host logo"" className=""mr-2"" /> +                    {node.codeHostURN} +                </H3>              </div>              <div className=""d-flex flex-shrink-0 ml-3"">                  <div>                      <Tooltip content=""Edit webhook""> -                        <Button -                            aria-label=""Edit"" -                            className=""test-edit-webhook"" -                            variant=""secondary"" -                            size=""sm"" -                        > +                        <Button aria-label=""Edit"" className=""test-edit-webhook"" variant=""secondary"" size=""sm"">                              <Icon aria-hidden={true} svgPath={mdiCog} /> Edit                          </Button>                      </Tooltip>                  </div>                  <div className=""ml-1"">                      <Tooltip content=""Delete code host connection""> -                        <Button -                            aria-label=""Delete"" -                            className=""test-delete-webhook"" -                            variant=""danger"" -                            size=""sm"" -                        > +                        <Button aria-label=""Delete"" className=""test-delete-webhook"" variant=""danger"" size=""sm"">                              <Icon aria-hidden={true} svgPath={mdiDelete} />                          </Button>                      </Tooltip> ``` "
"2022-11-02 08:55:11.719464+00","@IceCreamYou based on your points above, would we be expecting any changes to the ticket scope?"
"2022-11-02 09:07:23.869568+00","@rwagatenga When we are Implementing the pagination, we need the Total based on the Pipeline/Query, if I use `$count` on the same `pipeline` on a single `EnvelopeService.getEnvelopeActivities({});` I won't get the exact total number because I'm applying `{ $skip: skipPage }, { $limit: limit }` in the same pipeline"
"2022-11-02 09:13:18.1033+00","Please get rid of this(it is hacky code), this is an interface to a `FetchResponse` and it clearly does not have this property."
"2022-11-02 09:13:19.170117+00","`this.request` will make the actual request using `getBackendSrv().fetch()`, note that `fetch` takes an optional type parameter `fetch<T>` that specifies the type of data the response will contain. We expect the response to be of type `FetchElasticResponse` hence we use `fetch<FetchElasticResponse>`. fetch will return an Observable(rxjs) of type `Observable<FetchResponse<FetchElasticResponse>>`, we transform this observable using `pipe` and `map` to a new type `Observable<FetchElasticResponse>`"
"2022-11-02 09:15:04.63206+00","should we bail out here? it would mean that the hostname doesn't match below and it would remove repos if the DB is down for example "
"2022-11-02 09:48:59.227038+00","Yes we get warning in console. "
"2022-11-02 09:56:31.119115+00","```suggestion   @spec get_total_time_spent_in_minutes_query(pos_integer()) :: Ecto.Queryable.t() ```"
"2022-11-02 09:56:31.166699+00","```suggestion         ) :: pos_integer() ```"
"2022-11-02 09:56:31.316844+00","```suggestion   @spec team_lead(pos_integer()) :: Ecto.Query.t() ```"
"2022-11-02 09:56:31.825352+00","```suggestion   @spec possible_assignees(pos_integer()) :: [GitstartEngine.Accounts.User.t()] ```"
"2022-11-02 09:56:32.162264+00","```suggestion   @spec client_manager(pos_integer()) :: Ecto.Query.t() ```"
"2022-11-02 09:56:32.174298+00","```suggestion   @spec repository_owner(pos_integer()) :: Ecto.Query.t() ```"
"2022-11-02 09:56:32.526334+00","```suggestion   @spec get_total_time_spent_in_minutes(Task.t()) :: pos_integer() ```"
"2022-11-02 09:56:32.762907+00","I don't think we return error here ```suggestion   @spec bootstrap_new_task_attrs(map()) :: {:ok, map()} ```"
"2022-11-02 09:56:33.063748+00","```suggestion   @spec list_tasks(map(), pos_integer(), Keyword.t()) :: Ecto.Queryable.t() ```"
"2022-11-02 09:56:33.976491+00","```suggestion   @spec team_member(pos_integer()) :: Ecto.Query.t() ```"
"2022-11-02 09:56:35.95342+00","```suggestion   @spec instance_manager(pos_integer()) :: Ecto.Query.t() ```"
"2022-11-02 10:10:36.341273+00","1. fix the typo here, should be componentWillUnmount 2. can't seem to find where this function is been used in the code "
"2022-11-02 10:11:01.991833+00","```suggestion 	async componentWillUnmount() { ```"
"2022-11-02 10:16:19.008869+00","Is that the correct error message? The comment says we're waiting for Perforce to be added as authz provider.  I know this sounds nitpicky, but these errors are crucial when debugging why a test fails or is flaky"
"2022-11-02 10:16:19.028371+00","Nitpick, but I do think multi-line strings with funny intendation are uglier than a single line:  ```suggestion 	const query = `query { authzProviders }` ```"
"2022-11-02 10:16:19.103336+00","> This new gql api is basically the equivalent of the repo-updater debug endpoint that you posted, just for the frontend.  Would it make sense then to tag this query as ""for internal use only"", like [some of the other queries we have](https://sourcegraph.sourcegraph.com/search?q=file%3Agraphql%24+internal&groupBy=repo)?"
"2022-11-02 10:16:19.897717+00","Is that correct here or should you `return gqltestutil.ErrContinueRetry`? Also, does this need a error message too? (`t.Fatal(""failed to fetch authzProviders"", err)`)"
"2022-11-02 10:17:18.665305+00","You could also pull `backend.NewRepos` out of the loop, right?"
"2022-11-02 15:13:41.499541+00","We don't need this I believe, ObjectId already exists in the imports"
"2022-11-02 10:24:04.231649+00","I am not sure if these should take a separate file since it carries no props or states. "
"2022-11-02 10:25:52.999796+00","This needs to be generated based on operating system."
"2022-11-02 10:31:47.06016+00","? ```suggestion     subHeading=""Reach out at feedback.gitstart.com"" ```"
"2022-11-02 10:32:08.782487+00","```suggestion ```"
"2022-11-02 10:36:56.184537+00","Thanks for catching the typo @hakeem-gitstart "
"2022-11-02 10:37:01.915956+00","```suggestion     1. Based on your intuition, experience, and judgment, reference the rubrics and apply the 3 checklists to rate the levels of 3 determinants. ```"
"2022-11-02 10:37:02.601881+00","""Can't run the project without reading the documentation""  I'm not sure if this is necessarily a bad thing... Usually reading documentation is a must :) "
"2022-11-02 10:37:02.651067+00","I wouldn't say ""because we do not know where things are"" , because no one ""knows"" it when they first start. I think it's more about how well organized the codebase and easy to find things"
"2022-11-02 10:38:00.454022+00","Should this part not happen before the `err := client.ScheduleUserPermissionsSync(userID)` line? Or does it not matter here? Feels weird that we're only confirming the authz provider after the user permissions have been synced."
"2022-11-02 10:40:23.935354+00","If you do not use `break` in the switch statement, it will automagically fall through, so this will be shorter, since both statements are the same: ```suggestion         case 'openidconnect':         case 'saml': ```"
"2022-11-02 10:40:24.041634+00","Love this ❤️ "
"2022-11-02 10:53:09.195442+00","What if there is more than one provider of the same type? What is returned in that case? E.g. if we have 2 github oauth providers configured, what is the output of this query? `['github']` or `['github', 'github']`?  This is a configuration that is used sometimes (even in our Cloud Managed Instances, but as far as I know we have no tests for that..."
"2022-11-02 10:53:09.374305+00","Should we instead use exponential backoff strategy? The current [`Retry` implementation](https://sourcegraph.com/github.com/sourcegraph/sourcegraph/-/blob/internal/gqltestutil/helper.go?L32) retries every 100ms, which is not ideal. Not sure how it would impact the scope of this PR, but that might be a better strategy for retries like this."
"2022-11-02 10:53:09.632472+00","I would like to see a unit test for this resolver, as it's a new functionality added and by convention we usually test every resolver / exposed graphql entity."
"2022-11-02 10:54:22.604991+00","Ah, you're right. Yes, that is a good suggestion. 👍"
"2022-11-02 10:55:32.682593+00","@hmncube  Changing  this to  be  `private focusListener: Function` would require it to have an initialiser or to be assigned in the constructor, However, making it to be optional like `private focusListener?: Function;` would result to a ts error in `componentWillUnmount`  ![Screenshot 2022-11-02 at 11 51 13](https://user-images.githubusercontent.com/39338964/199471390-21e388a8-f09f-4974-a201-c16c347d9c7e.png)  leaving it to be of type any is the best solution I can think of , kindly let make know if you have a better solution  "
"2022-11-02 10:57:27.775824+00","nice. will do"
"2022-11-02 10:57:36.670694+00","You have a single element here, you don't need to wrap it in a fragment (which you'd need if you want to have multiple elements here):  ```suggestion                         <ButtonLink className=""test-create-webhook"" variant=""primary"">                             <Icon aria-hidden={true} svgPath={mdiPlus} /> Add webhook                         </ButtonLink> ```"
"2022-11-02 10:57:38.656733+00","I don't think you need `useCallback` at all here. You can just pass `queryWebhooks` to the component."
"2022-11-02 10:57:38.947683+00","Any specific reason why you went with `FilteredConnection`?  Since we do not have filters you could probably use `useConnection`. ""Officially"" `FilteredConnection` is deprecated. See, as an example, [this function here and how it's used](https://sourcegraph.sourcegraph.com/github.com/sourcegraph/sourcegraph/-/blob/client/web/src/enterprise/batches/settings/backend.ts?L107-132&subtree=true). Or [this one here](https://sourcegraph.sourcegraph.com/github.com/sourcegraph/sourcegraph/-/blob/client/web/src/repo/stats/RepositoryStatsContributorsPage.tsx?L205&subtree=true).  Totally get if `FilteredConnection` is easier to use though."
"2022-11-02 10:59:48.583172+00","That's wrong, needs to say ""webhook"""
"2022-11-02 11:02:44.999207+00","What I described above is the intended original scope of this story, although the ticket description did not describe it sufficiently clearly. Whether it changes the scope depends on what you interpreted the original scope to be I guess, but if we had been clear about what was needed from the beginning, I do not think the effort for the intended scope would have been significantly larger than what is contemplated so far in this PR.  With that said, please ask questions if anything is unclear."
"2022-11-02 11:23:34.462619+00","It seems to work:  ``` iex(8)> %Ecto.Changeset{} |> Ecto.Changeset.add_error(:description, ""Description cannot be nil"") |> Ecto.Changeset.add_error(:description, ""Description cannot be something"") #Ecto.Changeset<   action: nil,   changes: %{},   errors: [     description: {""Description cannot be something"", []},     description: {""Description cannot be nil"", []}   ],   data: nil,   valid?: false > ```"
"2022-11-02 11:37:27.480117+00","@MatheusBeniniF is this a required change?"
"2022-11-02 11:46:45.616452+00","Yes – what's our pattern for this?"
"2022-11-02 11:55:11.975631+00","Alright, please can you update the ticket description with the clearly expected requirements so we can be sure of the acceptance criteria? @IceCreamYou "
"2022-11-02 11:58:14.558798+00","Added this to help debugging"
"2022-11-02 12:04:14.607684+00","I took https://sourcegraph.com/github.com/sourcegraph/sourcegraph/-/blob/client/web/src/enterprise/batches/BatchSpecsPage.tsx?L98&subtree=true as an example, it was pretty easy to use, actually.  I can change it to `useConnection` as a next iteration (so that I don't use deprecated stuff) if it is fine."
"2022-11-02 12:04:27.978157+00","Thanks, will fix that!"
"2022-11-02 12:03:53.836489+00","role here is an atom with the  following values `[:admin, :user, :internal]` So we can add a type spec in the `ClientUser` model as follows:   `@type roles :: :admin | :user | :internal` Then we can say `ClientUser.roles()`  "
"2022-11-02 12:05:00.651422+00","not really, will delete"
"2022-11-02 12:05:41.616277+00","that's so much better, thanks!"
"2022-11-02 12:22:53.022197+00","```suggestion   const publicEventTypes = eventTypes?.filter((evt) => !evt.hidden); ```"
"2022-11-02 12:22:54.037464+00","```suggestion                   {!isEmbed && !!publicEventTypes?.length && ( ```"
"2022-11-02 12:52:25.279221+00","it is not, probably this change appeared in a merge with main"
"2022-11-02 13:26:43.496942+00","Probably the directory itself can be added as well?  ```suggestion 			canReadAll: []string{""dir/file.java"", ""dir/""}, ```"
"2022-11-02 13:38:33.781116+00","I believe this represents all roles, lets use `Object.keys(EnvelopeRecipientRoleEnum)`"
"2022-11-02 13:38:33.831592+00","The errorr enum does not match the error message ```suggestion throw new NotFoundError(ErrorEnums.ENVELOPE_RECIPIENT_NOT_FOUND, 'Envelope recipient not found'); ```"
"2022-11-02 13:38:33.819929+00","Organize imports alphabetically i.e. from A-Z"
"2022-11-02 13:38:35.611416+00","Should have an await Add `.lean()` as well"
"2022-11-02 13:38:35.609438+00","If this represents all roles use `Object.keys()`"
"2022-11-02 15:38:47.350227+00","Move to correct section"
"2022-11-02 13:38:35.67029+00","return directly"
"2022-11-02 13:38:35.715772+00","@usmailaabdoul , use clients suggestion above ```suggestion return [ ...recipientsWithoutKyc, ...recipientsWithKyc ] ```"
"2022-11-02 13:38:37.631979+00","Same here"
"2022-11-02 14:13:12.41745+00","remove this and stop adding them"
"2022-11-02 13:38:37.178863+00","Nuke this validation, not sure why we are adding this"
"2022-11-02 13:38:37.615911+00","Should have an await, and space before this return ```suggestion  return await EnvelopeRecipient.findOneAndUpdate( ```"
"2022-11-02 13:42:26.273804+00","Is this not a recursive call, or is there work outstanding here?"
"2022-11-02 13:44:29.780496+00","```suggestion 	return s.store.ProcessStaleSourcedCommits(ctx, minimumTimeSinceLastCheck, commitResolverBatchSize, commitResolverMaximumCommitLag, shouldDelete) ```  WOW good catch"
"2022-11-02 13:50:10.337174+00","@sheldon-welinga this is required to validate the field the user is trying to update not all fields should be updated"
"2022-11-02 13:57:46.429098+00","@sheldon-welinga we can't return and await at thesame time"
"2022-11-02 14:08:57.214497+00","`debugger`! "
"2022-11-02 14:09:09.605927+00","```suggestion 		logger.Error(""Invalid UPDATE_CHECK_BASE_URL. Using default url"", log.String(""UPDATE_CHECK_BASE_URL"", base), log.String(""defaultURL"", defaultUpdateCheckBaseURL)) ```"
"2022-11-02 14:09:16.85827+00","```suggestion Setting the `UPDATE_CHECK_BASE_URL` to the value provided by Sourcegraph support on the `frontend` application manifest will ensure that  ```"
"2022-11-02 14:12:54.370336+00","remove this"
"2022-11-02 14:22:37.878774+00","I think we are destructuring what we need to update and creating a new object out of it, no need for this"
"2022-11-02 14:25:12.54653+00","It's fine to be nitpicky! I appreciate it 🙏 This is not super polished since I wanted to get some feedback on whether everyone was okay with this approach before I spent too much time on it. "
"2022-11-02 14:27:19.876611+00","@charlottemeng  isn't part of the audit to check for .YML and looker uses?  I'm wondering if this should be T4 (unsupported) until we determine otherwise. The logic (but not this view) is being used, but you could also check for looker views, and then if those are being used in the content checker"
"2022-11-02 14:27:38.962506+00","but we need to throw an error right?"
"2022-11-02 14:28:42.726315+00","Honestly this is only being used for this test, to check the list of authz providers that the frontend is using. I'll mark the query as internal as @mrnugget suggested to clarify that. If we need to provide more details about the providers in the list (i.e. the url, etc) we can add that if and when we need it. "
"2022-11-02 14:29:25.254392+00","V good point, I'll check if it's in Looker and demote to T4 when I confirm it's not being used?"
"2022-11-02 14:33:07.239126+00","Ok, just return directly then"
"2022-11-02 14:33:25.99379+00","So, that permissions sync will be using a different list of authz providers (in theory the same, just initialized/kept up to date in a different place in the code). I haven't run into that causing any flakiness in the tests.   Wrt the backoff strategy, I was just using the pattern from the other gql tests. I'm not sure if there are any problems or flakiness that would arise if we switched to exponential backoff, but it's maybe worth exploring at some point."
"2022-11-02 14:34:40.446854+00","I found your bug, wrap it in a try-catch, its the reason for the complain"
"2022-11-02 14:56:50.09878+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion ``` "
"2022-11-02 15:13:41.970433+00","Revert this line, this file should only deal with EnvelopDocument and not EnvelopeDocumentVersion"
"2022-11-02 14:34:47.145927+00","@usmailaabdoul "
"2022-11-02 14:34:55.998953+00","I don't think we want to continue retrying if there's an error fetching the authz providers. But you're right, we should wrap the error for more context."
"2022-11-02 14:41:12.935248+00","You can reference below ![image](https://user-images.githubusercontent.com/59791219/199519213-a67c7e36-69aa-46cd-9a43-8197435009cf.png) "
"2022-11-02 14:48:22.871412+00","mmmmm I'm wondering about this one.  In Glob terms, you can technically specify something like `/**/**/**/*.java` and it would still match Java files at the root. However, just trimming once would fail to catch that case.  But, in terms of Perforce rules, I'm not sure if Perforce allows a rule like `//depot/main/.../.../.../*.java` or whatever. If it does, then those would be edge cases we can't catch. If it does not, then maybe we don't have to care? Even though it's technically still wrong.  What we can do to get around this is to do the trimming in a loop until all the double stars are gone?"
"2022-11-02 14:50:40.122937+00","I was thinking about this (generally I 1000% agree) but I wasn't sure what I'd be testing for, exactly. It's basically just returning a list and there's really no functionality within this function itself since it's basically just a wrapper around `authz.GetProviders()`. But I'm never gonna say no to adding more tests, so I'll go ahead and add one 😂 😅 "
"2022-11-02 14:53:47.322512+00","You can just validate the fields that need to be updated, we do nothing otherwise I guess, Just like how we are doing it on create. Tried checking the codebase, there is no validation for unwanted fields in any method I have seen, unless you have one"
"2022-11-02 14:53:54.439362+00","want to go ahead and commit this?"
"2022-11-02 14:56:49.182173+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion             ORDER BY order_tasks.task_created_at) AS previous_task_type ``` "
"2022-11-02 14:56:49.515539+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     WHERE COALESCE(previous_task_flow_order, 99) >= task_flow_order ``` "
"2022-11-02 14:56:49.564495+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion ``` "
"2022-11-02 14:56:51.48742+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion ``` "
"2022-11-02 14:56:49.589101+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion             ORDER BY order_tasks.task_created_at) AS previous_task_flow_order ``` "
"2022-11-02 14:56:51.405109+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     , SUM(         (COALESCE(order_tasks.task_closeout_event__designreview_rejected::INT, 1) = 0)::INT     ) AS reviews__design_review_approvals ``` "
"2022-11-02 14:56:49.79205+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion                 , order_tasks.task_created_at                 , NULL)         ) IGNORE NULLS OVER ( ``` "
"2022-11-02 14:56:51.130769+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     AND COALESCE(         internaldesign__task_closeout_reason, 'force a failure for nulls'     ) = 'Completed' AS is_final_delivered_design ``` "
"2022-11-02 14:56:51.407415+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     order_tasks.order_id ASC     , flows.flow_sequence_number ASC ``` "
"2022-11-02 14:56:50.358772+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     /* description flow_sequence_number = A sequence number that shows which attempt or ""flow"" design tasks belong to. ``` "
"2022-11-02 14:56:50.379181+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion         /* if it's either of these fields, then we cast as a bool */         {% if field in ['is_active_task', 'task_assigner__is_autoassign'] %}      )[0]::INT AS designreview__{{ field | replace(""__"", ""_"") }}     {% else %}     /* otherwise we cast as a varchar */     )[0]::VARCHAR AS designreview__{{ field | replace(""__"", ""_"") }}     {% endif %} ``` "
"2022-11-02 14:56:50.497343+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion ``` "
"2022-11-02 14:56:50.688245+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion             flows.flow_start ``` "
"2022-11-02 14:56:51.306229+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion             ORDER BY order_tasks.task_created_at) AS next_design_prep_created_at  ``` "
"2022-11-02 14:56:52.044636+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     , CASE         WHEN             COUNT_IF(                 order_tasks.task_type = 'InternalDesign'             ) > 0 /* we need to make sure there was an internal design for this flow */             THEN MIN(                 IFF(                     order_tasks.task_type IN ('LabAcceptOrder', 'AcknowledgeDelivery')                     OR (                         order_tasks.task_type = 'DesignReview' AND COALESCE(                             order_tasks.task_closeout_event__designreview_rejected::INT, 1                         ) = 0                     )                     , order_tasks.task_created_at, NULL                 )             ) END AS design_delivery_confirmed_at  ``` "
"2022-11-02 14:56:52.315255+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     coalesce to an impossible number (only 1&2 are possible) so it returns true because     first task has no previous resulting in a null and then where clause excludes it ``` "
"2022-11-02 16:13:04.173282+00","no i think we actually want to make them set it now since this will eventually be mapped to the staff member, and that requires a role"
"2022-11-02 14:56:52.432817+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion                     WHEN order_tasks.task_type = 'InternalDesign' THEN 2         END AS task_flow_order ``` "
"2022-11-02 14:56:52.648453+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion      /* description is_new_design_prep = DesignPreps are attributed to all internal design attempts until there is a new one. To avoid double counting design prep units, use this flag to filter the count for only the first time the design prep was used */ ``` "
"2022-11-02 14:56:53.353582+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion ``` "
"2022-11-02 14:55:50.032473+00","@raj360 @elikeyz Please take a look at the implementation of keyboard accessibility on `EmojiMenu`, perhaps there might be some further improvements to be made.  I have also added a new demo video on the PR description to test the behavior of the `EmojiMenu` please check it out. CC: @lazymia "
"2022-11-02 14:59:06.909394+00","ok then"
"2022-11-02 15:03:20.639081+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     WHERE field = 'Assigned_Pod__c' ``` "
"2022-11-02 15:04:28.589221+00","Yeah, good point. That part of the change was a bit of a quick hack so not surprised I missed something there :) "
"2022-11-02 15:13:39.882262+00","Revert this file/ Ensure you have the latest changes"
"2022-11-02 15:13:40.124269+00","We need to add a supertest in test/routes file for the envelopes i.e. `envelopes.tests.js`"
"2022-11-02 15:13:40.290695+00","Revert"
"2022-11-02 15:13:40.380295+00","Your pipeline is vague if you are writing a filter here, please check this"
"2022-11-02 15:13:41.230797+00","Revert this file to main/merge from main"
"2022-11-02 15:13:42.179954+00","Only check if no permission, Users with Manage can also read envelope documents as they have all permissions"
"2022-11-02 15:13:42.472185+00","Nuke this, this file should not have any change I believe. Use Unauthorized operation, It already exists"
"2022-11-02 15:13:42.957413+00","Nuke ```suggestion ```"
"2022-11-02 15:08:47.435802+00","~~do you need to do a similar check here? wouldn't this get triggered twice then?~~ i am an idiot 🤦 "
"2022-11-02 15:38:40.892821+00","Organize imports and also sort from A-Z"
"2022-11-02 15:38:41.558485+00","Sort enum imports here from A-Z"
"2022-11-02 16:26:40.64683+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     , COALESCE(fcpid.fc_pid, bizible_session.visitor_id) AS full_contact_id ``` "
"2022-11-02 15:13:43.138701+00","This function should be done in`EnvelopeDocumentVersionService` not this"
"2022-11-02 15:13:43.803124+00","Follow the convention ```suggestion GET_ENVELOPES_DOCUMENTS: 'envelope.documents.get', ```"
"2022-11-02 15:13:43.943412+00","Use better names, write in full the keyword envelope"
"2022-11-02 15:13:44.753127+00","Add other metadata here e.g. envelopeId, statuses, withLatestVersion e.t.c"
"2022-11-02 15:13:45.17373+00","We should not have any filter/map, All filters should be done in the aggregate query"
"2022-11-02 15:13:47.357165+00","Use sentence case ```suggestion throw new NotFoundError(ErrorEnums.ENVELOPE_DOCUMENT_NOT_FOUND, 'Envelope document not found'); ```"
"2022-11-02 15:24:09.155926+00","I just checked and Perforce *does* allow you to save rules like `.../.../*.java`"
"2022-11-02 15:25:22.132335+00","Hmm I took it from [this file](https://sourcegraph.sourcegraph.com/search?q=context:global+documentationUrlPrefix&patternType=standard), but I'll remove both instances of it if it's not needed then"
"2022-11-02 15:32:15.289706+00","Your call in the end, not blocking here. But then again: why do it ""wrong"" when we know we need to do it ""right"" immediately after? It'll never be easier to use the non-deprecated solution than now :)"
"2022-11-02 15:38:40.523631+00","This imports should come first"
"2022-11-02 15:38:40.746324+00","Wrap in try-catch"
"2022-11-02 15:38:41.384248+00","We are not using this, delete it ```suggestion ```"
"2022-11-02 15:38:42.322041+00","Wrap in try-catch"
"2022-11-02 15:04:24.841486+00","Next steps:  - [x] Test this - [x] Un-export the three methods we use internally - [x] Inline for bulk updates, set a txn, etc. for more meaningful semantics"
"2022-11-02 15:38:41.729747+00","Also add the role, capacity, color and used to the metadata"
"2022-11-02 15:38:42.527757+00","Sort and organize imports"
"2022-11-02 15:38:42.815242+00","We don't have anything a EnvelopeModel, Its just Envelope, Revert this change"
"2022-11-02 15:38:43.781504+00","Expect specific parts of the `body.data` and not body. Also we should not have an expect like typeof, that is wrong. Target specific parts, is even better to say expect it to be defined  We can also have an expect length if its an array e.t.c, but never expect with typeof"
"2022-11-02 15:38:44.690827+00","Also expect envelopeId to match the query id"
"2022-11-02 15:38:44.741357+00","Nuke comments ```suggestion ```"
"2022-11-02 15:38:44.872694+00","Remove this space"
"2022-11-02 15:38:44.983352+00","Use async, remove done"
"2022-11-02 15:38:45.238609+00","```suggestion const StatusEnums = require('../../imports/api/enums/statusEnums ```"
"2022-11-02 15:38:45.847509+00","Don't forget the space after each category of imports. The above import should come second as its a model"
"2022-11-02 15:38:46.348445+00","Nuke the space"
"2022-11-02 15:38:46.619794+00","Sort imports A-Z"
"2022-11-02 15:38:47.759109+00","generally, organize imports and sort them A-Z"
"2022-11-02 15:38:46.711396+00","Avoid repetition of code, Have a top describe and later child describe inside"
"2022-11-02 15:38:52.622952+00","Nuke space"
"2022-11-02 15:44:21.34128+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     , flows.flow_sequence_number ASC ``` "
"2022-11-02 15:50:23.651068+00","Yes good call, adjusted in [b35babe](https://github.com/sourcegraph/sourcegraph/pull/43766/commits/b35babef92e2976a26db4b8772b56ff53ba8c39a). Since we can't do conditional hooks, I moved the logic up to the `useQueryExamples` hook & exit functions & return the static examples for dotcom. Let me know if you see any issues here! I didn't see any server call's running from that hook with the adjusted logic"
"2022-11-02 15:53:11.355989+00","`updatedField!` isn't an actual runtime check like the pre-existing logic, so would end up loosening the safety of the current checks."
"2022-11-02 15:54:32.650468+00","Also our lint rules don't like it, either."
"2022-11-02 15:56:10.602512+00","Merge latest changes, this should not be nuked I believe"
"2022-11-02 15:56:10.889768+00","This check should still exists, please revert"
"2022-11-02 15:56:11.046837+00","Start with should and add space above each `it()"
"2022-11-02 15:56:11.344258+00","Start with should"
"2022-11-02 15:56:11.383826+00","Start with `should`   ```suggestion it('should filter for uniqueNames is true', async () => { ```"
"2022-11-02 15:56:11.479082+00","Check should still exist"
"2022-11-02 15:56:12.182404+00","Avoid unnecessary changes"
"2022-11-02 15:56:12.414217+00","Nuke limit, no section mentions that"
"2022-11-02 15:56:14.66401+00","Revert"
"2022-11-02 15:56:13.104031+00","Also add check for length of array"
"2022-11-02 15:56:14.32825+00","Not enough checks, Target specific values, if result is an array, expect length to be a specific value e.t.c"
"2022-11-02 15:56:15.221898+00","Also check length of array"
"2022-11-02 16:09:58.672208+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     SELECT         *         , LOWER(             REPLACE(                 REPLACE(                     REPLACE(REPLACE(REPLACE(REPLACE(refab_reason_category, ' ', '_'), '(', ''), ')', ''), '/', '_') , '-' , '_'                 ) , '''' , ''             )         ) AS refab_reason_category_cleaned     FROM lab_order_reason_vm_enriched ``` "
"2022-11-02 16:10:35.509302+00","can we call this previous value instead of old value?"
"2022-11-02 16:11:56.200629+00","super minor, but can we capitalized IS NULL?"
"2022-11-02 16:12:00.922491+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     SELECT         *         , LOWER(             REPLACE(                 REPLACE(                     REPLACE(REPLACE(REPLACE(REPLACE(refab_reason_category, ' ', '_'), '(', ''), ')', ''), '/', '_') , '-' , '_'                 ) , '\'' , ''             )         ) AS refab_reason_category_cleaned     FROM lab_order_reason_vm_enriched ``` "
"2022-11-02 16:12:12.585327+00","`caseNotes` shouldn't be optional. If you don't pass something in for `caseNotes` then this method doesn't do anything."
"2022-11-02 16:12:12.682469+00","Fix this comment, I'm guessing you mean to talk about the caseNotes param"
"2022-11-02 16:12:12.785473+00","Alternatively, you can remove this parameter, and instead return the string that you build at the end. Leave it up to the caller to add the caseNote string to an array."
"2022-11-02 16:12:13.731748+00","NIT: I'd rather see `caseNotes` set here. ``` caseNotes.push(buildImplantPartsCaseNotes(item)); return this.buildImplantProduct(item); ``` See my suggestion on `buildImplantPartsCaseNotes` about removing the second parameter."
"2022-11-02 16:12:14.036741+00","go home sqlfluff"
"2022-11-02 16:13:03.742481+00","let's actually make this logic something like `name.split(' ').slice(1).join(' ')`, i.e. first name should be the first word and the last name is everything else in case someone has one of those multi word last names loll"
"2022-11-02 16:13:04.061546+00","ahhh icic, update looks good, tyty!"
"2022-11-02 16:14:44.859645+00","leftover comment?"
"2022-11-02 16:20:13.711584+00","why is this change being made? This is the naming that was requested from the PLs during the original implementation and it makes no sense to create a breaking graphql change for the sake of a rename"
"2022-11-02 16:21:17.017915+00","Good catch! I was able to remove the entire caching infrastructure, which is a nice cleanup"
"2022-11-02 16:25:11.812476+00","agree with sql fluff- let's make this a coalesce"
"2022-11-02 16:26:16.532476+00","I believe we don't want to `--wait` on execute, assuming this means wait for the execution to complete"
"2022-11-02 16:26:39.702961+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     AND bizible_session.ip_address = fcpid.context_ip     AND DATE_TRUNC('minute', bizible_session.event_date) = DATE_TRUNC('minute', fcpid.timestamp)     AND COALESCE(bizible_session.referrer_page, 'NA') = COALESCE(fcpid.context_page_referrer, 'NA') ``` "
"2022-11-02 16:26:39.785841+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion LEFT OUTER JOIN fcpid ``` "
"2022-11-02 16:26:39.813708+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     SELECT * FROM {{ source('segment_marketing_website', 'fcpid') }} ``` "
"2022-11-02 16:26:53.331785+00","need to `waitForCloudRunJob` on execute here too"
"2022-11-02 16:29:00.333519+00","Instead of truncating, could we look where the difference between bizible_session.event_date and fcpid.timestamp is less than a minute? to take into account the edge case you mentioned in standup"
"2022-11-02 16:37:41.412494+00","The ProductLine definitions provided by Ops: - https://www.notion.so/orthly/Product-Line-Implementation-88c577ad632a423fbd2b92f962efa356#3880f1ad15864000b41d851901843442 - https://www.notion.so/orthly/Product-Line-Implementation-88c577ad632a423fbd2b92f962efa356#9573ca0c9a0d4f43b573fdb90fd75788 - https://www.notion.so/orthly/Product-Line-Implementation-88c577ad632a423fbd2b92f962efa356#0add70ba8fc246779b481becf6ad225f"
"2022-11-02 16:38:23.80476+00","@brianna-kincaid done :)"
"2022-11-02 16:38:27.827615+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     AND bizible_session.ip_address = fcpid.context_ip     AND COALESCE(bizible_session.referrer_page, 'NA') = COALESCE(fcpid.context_page_referrer, 'NA')     AND bizible_session.event_date BETWEEN DATEADD(         'second', -60, fcpid.timestamp     ) AND DATEADD('second', 60, fcpid.timestamp) ``` "
"2022-11-02 16:38:51.385676+00","thank you!"
"2022-11-02 16:39:49.071122+00","is the `<= 25` correct here?"
"2022-11-02 16:43:17.955556+00","we have https://github.com/immunefi-team/bugs/blob/898de871c73626a21baca291cbcdfdfa5ce4d1b1/components/FeatureControl.tsx to render components by feature flags"
"2022-11-02 16:46:14.332561+00","maybe a comments will help understand this changes faster"
"2022-11-02 16:51:21.527543+00","I'll add a comment for readability, the math is the same and this converges to your solution when rest = 0.5  `0.5 * (sortedConfidence[base] + sortedCandidates[base + 1])`  `sortedConfidence[base] + .5 * (sortedConfidence[base + 1] -  sortedCandidates[base])`"
"2022-11-02 16:52:56.401864+00","```suggestion         // Here we linearly interpolate between the discrete values         // found at index base and base + 1         const base = Math.floor(pos); ```"
"2022-11-02 16:53:51.371259+00","can we check that the user has 0 paid reports here `expect(user.totalPaidReports).toBe(0);` "
"2022-11-02 16:55:46.654299+00","not fan of snapshots but, can we just validate presence of things here, os should we test the design too?"
"2022-11-02 17:34:05.032486+00","Yeah me too, but last time we talked about this we agreed to use a combination of component existence and component snapshots tests. However, I believe some cases it will be difficult because a component can be affected by many feature flags, so not all the time is going to be possible to do snapshot testing."
"2022-11-02 17:47:06.577764+00","The handling of this is definitely quite bad. We can add a fixture to make this less bad in the consumer tests. The reason I didn't include that right now is there is a built in baseURL fixture that I wasn't able to figure out how to properly override. The two solutions I can imagine are to just make a different fixture for the url, or look more deeply into how to override the base one.  That still leaves open how to do this more nicely in utility functions like this one, though."
"2022-11-02 18:55:34.403339+00","It will work but I thought it looked funky with the design (the added title) & it wasn't outlined in the design spec for this use. If we do use it it'd create an extra white space between the title/queries when not showing. What do you think?"
"2022-11-02 16:56:26.352567+00","is this safe? are we going to have timeouts in stg envs when the network is slow? "
"2022-11-02 16:58:12.225382+00","can we put the url `http://localhost` on a shared constant or function that can automatically now what is the host url, this will help when we start setting up the ci"
"2022-11-02 16:58:53.941355+00","is this correct? "
"2022-11-02 17:00:11.162095+00","same, lets use a constant for host"
"2022-11-02 17:00:34.832053+00","we also dont have he port here as we have it in the previous commit"
"2022-11-02 17:00:53.309901+00","@jonathan-yee I combined the calls with `Promise.all` in a new method `loadAllMeasurementsData()`.  In the new method, there is also a logic added that applies to both data stream and physical measurements if the name matches. Can you please confirm if the logic is what we are looking for?  The idea is to combine both data streams and physical measurements data as one.  Questions:  Shall we add another type rather than combining them with physicalMeasurements type? Shall we add another flag to distinguish between data streams and physical measurements?    For example:    `type: 'physical' | data-stream`  So this way, the metrics-card can distinguish between them. "
"2022-11-02 17:01:31.710496+00","💌 "
"2022-11-02 17:18:18.321439+00","I would suggest we stick with the current names for these in order to eliminate the need for migration. the labels match what Ops is expecting, so having the underlying values differ doesn't seem to be an issue to me: ```suggestion     Aligner = 'Aligner',     HighComplexityCrownOrBridge = 'HighComplexityCrownOrBridge',     Denture = 'Denture',     Implant = 'Implant',     Other = 'Other',     PartialDenture = 'PartialDenture',     Removable = 'Removable',     SimpleCrownOrBridge = 'SimpleCrownOrBridge',     Sleep = 'Sleep',     ImplantSurgery = 'ImplantSurgery' ```"
"2022-11-02 17:19:29.235076+00","Yeah, according to the espec it is."
"2022-11-02 17:27:53.26637+00","Yes, definitely all network requests can be slow or fail sometimes. In this case, the wait is to prevent taking a screenshot when not all icons have been fully loaded."
"2022-11-02 17:28:11.801127+00","I have not looked as to why we would need another method to wrap these two calls, so there may be a need for it. However, the idea I had in mind for this comment was more along the lines of something like this:  ```ts const [ metricsData, physicalMeasurements ] = await Promise.all([     this.loadMetricsData(),     this.loadPhysicalMeasurements(), ]);  const { dataTypeStats, metrics, stationStats, topIssues, totalMetrics } = metricsData; ```"
"2022-11-02 17:29:45.583882+00","This parse int could result in NaN, should we handle this?"
"2022-11-02 17:31:55.256447+00","The measurement name can be an empty string (though I do have a thought that maybe we shouldn't show those on the Metrics page), but an Automeasure monitor cannot (and should not) be created for a measurement with an empty name string. Therefore, it should never be the case that an Automeasure monitor should come back with an empty string for a name."
"2022-11-02 17:38:23.964797+00","Yeah this is definitely noise. I don't have an opinion about how to handle this."
"2022-11-02 17:39:54.638901+00","Yes, only necessary to run on the client."
"2022-11-03 11:59:18.7783+00","Good callout! For this PR I think it's fine to be dynamic (check if we need to do any work within `cleanup`). Once we have https://github.com/sourcegraph/customer/issues/1427 implemented, then the presence of the env var can be used as an indicator/toggle. WDYT?"
"2022-11-02 17:37:26.654803+00","I think you're right that checking the URL here isn't necessary if Abort Errors are handled earlier up the stack. "
"2022-11-02 17:45:52.324048+00","@jonathan-yee  I combined the calls to apply the logic to filter out the measurements with the same name. This is not what we are looking for? "
"2022-11-02 17:47:03.950944+00","Sounds good. I change it to return a string."
"2022-11-02 17:47:12.624275+00","Good catch. Thanks."
"2022-11-02 17:48:22.923227+00","This wrapping method is to get this logic. ""if physical measurements and Data streams metrics have the same name, pick the one with more measurements "" Perhaps, we were looking for more simplified ways to apply this?"
"2022-11-02 17:49:51.71658+00","🤔 , I don't believe this can add any value to the test, because the user is created every time and the default value for `totalPaidReports` is `0`. If for some reason the initial `totalPaidReports` is not `0` then the rest of the tests would fail because we are checking whitehat level in an incremental fashion."
"2022-11-02 21:22:00.671896+00","Just a heads up that this endpoint could fail since the `createExchangeRate` function could throw an error.  The database operations will be reverted since they are running inside an interactive transaction, and the API will respond with a 500 error."
"2022-11-02 17:53:30.400325+00","I want this function `buildImplantPartsCaseNotes()` to be be called by `buildImplantProduct()`, so that it preserves the hierarchical flow: build order => build details based on sku => build details based on item unit."
"2022-11-02 18:01:21.511374+00","`NaN` is a falsey value, so it would fall back to the default value."
"2022-11-02 18:11:50.077225+00","Nice catch."
"2022-11-02 18:12:37.244617+00","Any thoughts on the new implementation @trevorImmunefi?  ``` Number.parseInt(process.env.WHITEHAT_LEADERBOARD_RESULTS_PER_PAGE ?? """", 10) || 20; ```"
"2022-11-02 18:13:07.171149+00","e20636e"
"2022-11-02 19:18:42.573398+00","I see. Since we want to get the last index of something, and `findLast` doesn't seem to be available in the version of Node that we're using, I went with `reverse()` followed by `find` to get the last, presumably most recently selected material thickness value."
"2022-11-02 19:21:20.195551+00","what does 2618 means? "
"2022-11-02 18:14:12.636132+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion             TIMESTAMPDIFF(SECONDS, created_at, last_done_at) >= 10             AND message_count__in > 0             AND message_count__out = 0             AND first_message__channel = 'chat'             AND NOT participants__is_bpo ``` "
"2022-11-02 18:18:12.474097+00","12c764e"
"2022-11-02 18:20:45.336565+00","Ok got it, I will take a look at the logic when I review it again. I'm not sure if it makes sense to add a new type yet or not without looking in detail, but if it is going to be used in multiple places (i.e. the controller and the model), it probably makes sense to do so for better maintainability. As for adding a flag to determine the difference it possible makes sense.  Also, in the meantime, I still see a number of code formatting issues while quickly skimming through the code. Keep in mind, it is better to break lines of codes at opening/closing brackets so it makes more sense. For example:  The tabbing and line break make it potentially difficult to quickly understand that the method return type is defined as the Promise object and the opening bracket below is opening the method definition. ```ts loadAllMeasurementsData(): Promise<{     allMeasurements: MetricsModel.PhysicalMeasurements,     dataTypeStats: Array<APIListMetricsDataTypeStats>,     metrics: Array<APIMetricsListMetricData>,     stationStats: Array<APIListMetricsStationStats>,     totalMetrics: number,     topIssues: Array<APIMetricsListTopIssue>, }> { ```  Simply by moving the `Promise` to the same line, it is much easier to quickly understand, I have a method that returns a Promise. The Promise-ed return consists of an object of some fields, and here is the method definition. ```ts loadAllMeasurementsData(): Promise<{     allMeasurements: MetricsModel.PhysicalMeasurements,     dataTypeStats: Array<APIListMetricsDataTypeStats>,     metrics: Array<APIMetricsListMetricData>,     stationStats: Array<APIListMetricsStationStats>,     totalMetrics: number,     topIssues: Array<APIMetricsListTopIssue>, }> { ``` "
"2022-11-02 22:05:05.525057+00","Yeah, I was skeptical of that so I'm going to just change it [here](https://github.com/sourcegraph/sourcegraph/pull/43816/commits/35886151abd447c1b21181b0da45e782f7c92c58)"
"2022-11-02 18:26:40.201956+00","```suggestion 			// Rewrite error if it was a local git error (non-fatal) ```"
"2022-11-02 18:29:02.862674+00","I believe you are checking on a specific commit, sorry about that but we kind of messed up with the commit history, the latest version of this function looks like this:  ![image](https://user-images.githubusercontent.com/104782144/199572300-a4f6968d-eecb-4d4a-ba04-57a46b0b7b2d.png) "
"2022-11-02 18:34:17.207331+00","deps sir"
"2022-11-02 18:35:08.563284+00","F"
"2022-11-02 18:36:41.429653+00","fixed"
"2022-11-02 18:39:38.000081+00","we had bug that in order to submit you had to press the button twice. this was due the fact that when an input from orthly/QuickForm was focused, onBlur it was preventing other events to trigger. onMouseUp got triggered before onBlur from input and fixes the issue"
"2022-11-02 18:43:04.130223+00","so any empty string observed in some measurements is potentially a bug then. Here is a screenshot of an example from a manual measurements data. ![35F33E23-C55A-465A-A7C8-7EB5CE2725E0_4_5005_c](https://user-images.githubusercontent.com/8023972/199552004-7c5e34d2-09e7-45f7-a95e-33e6e4ce1b46.jpeg) "
"2022-11-02 22:23:16.589159+00","@coury-clark is there any reason why we mark this as a Maybe type?   I mean why is this not like  ```graphql incompleteDatapoints: [IncompleteDatapointAlert!]! ```"
"2022-11-02 18:51:37.37528+00","It was a bit hard for me to read the inline parametrized type. To improve readability, I suggest extracting into a named type the parametrized type on `axios.get<T>()`.  ```ts type TokenMarketChartRange = {     prices: [number, number][];     market_caps: [number, number][];     total_volumes: [number, number][]; };  // ...  const response = await client.get<TokenMarketChartRange>(`/coins/${coingeckoId}/market_chart/range`, {     params: {         vs_currency: ""USD"",         from: fromUnixTimestamp,         to: toUnixTimestamp,     }, });  ```"
"2022-11-02 18:51:47.85157+00","Sorry, I mean specifically changing the `updatedField as MomentInput` to `updatedField!`  I know the lint rules don't block the type cast, but the level of risk of a type cast is greater than of a non-null assertion, and I think it better communicates your intent here. You're really trying to go from `MomentInput | null` to `MomentInput`."
"2022-11-02 18:52:40.328046+00","🤦🏻‍♀️  Good catch, thanks! Fixed it [d9d2c33](https://github.com/sourcegraph/sourcegraph/pull/43766/commits/d9d2c33f5911fbc8a5c29837882db4ca99d09ad6)"
"2022-11-02 18:55:51.579788+00","0298cf9 makes it so that `getOptionsFor` is still a function, instead of a map, but it does use `AllItemMetafields.find(f => f.id === field_id)`, now, as you suggested."
"2022-11-02 18:56:24.870859+00","There might be a chance that `await getCoinPrice({ coingeckoId, from, to });` raises an error. i.e. a network error.  If that happens, it seems that we are prepared to handle errors raised from the `getCoinPriceAt`, since we are explicitly throwing an error when the attempts are exhausted.  This is not a change request, but I just wanted to point out that additional errors might be thrown on this function.  "
"2022-11-02 19:01:48.766257+00","why are these so indented 💀 "
"2022-11-02 22:29:24.530742+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     FROM is_refab_flag WHERE is_refab = FALSE ``` "
"2022-11-02 19:06:13.931939+00","I believe 94c62ec does this."
"2022-11-02 19:06:22.27883+00","rage"
"2022-11-02 19:06:57.147552+00","wait thought you were talking about sqlfluff"
"2022-11-02 19:07:11.336998+00","they're indented bc it looks better that way :("
"2022-11-02 23:12:44.907447+00","Just adding `lang:go` explicitly to these existing test so we can isolate the diagnostics being tested."
"2022-11-02 19:08:52.865973+00","I suggest not making this error name dynamic, because Sentry won't be able to stack them. This might cause them to pass unnoticed.  My suggestion would be to pick a fixed error name:  ```ts throw new Error(""Unable to get coin price from CoinGecko""); ```  Or even better, create a custom error  ```ts class CoinGeckoUnableToGetCoinPriceError extends Error {     readonly coingeckoId: string;     readonly at: Date;      constructor({ coingeckoId, at }: { coingeckoId: string; at: Date }) {         super(""Unable to get coin price from CoinGecko"");          this.coingeckoId = coingeckoId;         this.at = at;     } } ```  We could send the custom error properties to Sentry as metadata with [`errorLogger`](https://github.com/immunefi-team/bugs/blob/WHL-limit-results/lib/errorLogger.ts)."
"2022-11-02 19:09:48.997739+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion         , BOOLOR_AGG(COALESCE(message_details__is_dialpad_missed_call, FALSE)) AS has_dialpad_missed_call         , ARRAY_AGG(             message_details__dialpad_time_to_connect_in_seconds         ) WITHIN GROUP (ORDER BY message_created_at ASC, message_details__direction = 'in' DESC)[0]::numeric         AS dialpad_time_to_connect_in_seconds         , ARRAY_AGG(             message_details__call_duration_minutes         ) WITHIN GROUP (ORDER BY message_created_at ASC, message_details__direction = 'out' DESC)[0]::numeric         AS call_duration_minutes ``` "
"2022-11-02 19:39:41.982864+00","`--` wouldn't be special cased if there were no allowed arguments for a command."
"2022-11-02 19:09:51.865494+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion         , is_conversation_created_during_biz_hrs AND (             (has_dialpad_missed_call AND COALESCE(call_duration_minutes, 0)) <= 0.1667 OR (                 TIMESTAMPDIFF(SECONDS, created_at, last_done_at) >= 10                 AND message_count__in > 0                 AND message_count__out = 0                 AND NOT participants__is_bpo                 AND first_message__channel = 'chat'             ) ``` "
"2022-11-02 19:11:25.390535+00","."
"2022-11-02 19:11:29.158238+00","."
"2022-11-02 19:18:46.122844+00","74b8b7e"
"2022-11-02 19:24:54.484125+00","Nitpick: Extra line?"
"2022-11-02 19:28:28.010044+00","This is a fixed amount of gas that is required so that multisig+native currency transfer can work. See https://help.gnosis-safe.io/en/articles/5249851-why-can-t-i-transfer-eth-from-a-contract-into-a-safe"
"2022-11-02 19:28:36.723214+00","**Are we planning to store different types of exchange rates?** I'm asking this because the `Simple` prefix on this table took my attention.  If not, maybe it's worth renaming the table name to `ExchangeRate` or `TokenExchangeRate`?"
"2022-11-02 19:36:15.374283+00","- Is a `PaymentReceiptToken` instance valid without a `SimpleExchangeRate`? - Do we have plans to associate the `SimpleExchangeRate` to other tables?  If both answers are no, maybe we would like to reconsider the schema, storing the `SimpleExchangeRate` data in the `SimpleExchangeRate` table.  "
"2022-11-02 19:38:29.644232+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion         , is_conversation_created_during_biz_hrs AND (             (has_dialpad_missed_call AND COALESCE(call_duration_minutes, 0) <= 0.1667) OR (                 TIMESTAMPDIFF(SECONDS, created_at, last_done_at) >= 10                 AND message_count__in > 0                 AND message_count__out = 0                 AND NOT participants__is_bpo                 AND first_message__channel = 'chat'             ) ``` "
"2022-11-02 19:40:47.126516+00","Just a heads up that this migration will fail if the `PaymentReceiptToken` table is not empty."
"2022-11-03 12:01:27.067201+00","It's unused?"
"2022-11-02 20:01:42.130762+00","I suggest not making this error name dynamic, because Sentry won't be able to stack them. This might cause them to pass unnoticed.  My suggestion would be to pick a fixed error name or even better, create a custom error.  If you choose to create a custom error, it makes it easier to send metadata to Sentry with [`errorLogger`](https://github.com/immunefi-team/bugs/blob/WHL-limit-results/lib/errorLogger.ts).  "
"2022-11-02 20:06:56.622488+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion         , IFF(             account_history_account_id IS NULL , 1 , ROW_NUMBER() OVER ( PARTITION BY account_history_account_id ORDER BY account_history.created_at)         ) AS assignment_number         , LEAD(             account_history.created_at, 1         ) OVER ( PARTITION BY account_history_account_id ORDER BY account_history.created_at) AS next_pod_change_date ``` "
"2022-11-02 20:07:56.108175+00","```suggestion 		if (this.focusListener !== undefined) { ```"
"2022-11-02 20:15:38.877384+00","changed it :)"
"2022-11-02 20:15:43.326789+00","yes"
"2022-11-02 20:40:37.555483+00","eek. can we use `manufacturer_sla.manufacturer_committed_ship_date` instead? ""ship by date"" is a poorly named field that really means ""estimated ship date"".  mfg committed ship date, on the other hand, is what we hold labs to.  at the point of integration, they should be the same (unless the lab has requested delay prior to integration, if that's even possible), but I think it would be best for the sake of future developers to be distinctly clear here on what date we're using.  just a recommendation."
"2022-11-02 20:49:43.030128+00","Ok"
"2022-11-02 21:08:16.799286+00","I don't _think_ we'll use this anywhere else. The point of this dim_cx_user table is to take the place of any base user tables."
"2022-11-02 21:08:53.881985+00","Yes"
"2022-11-02 21:22:47.892928+00","If it's not in the design let's skip it for now. "
"2022-11-02 21:24:32.34875+00","done"
"2022-11-02 21:24:54.980629+00","Added some comments"
"2022-11-02 21:24:58.145288+00","Shouldn't this condition be the other way around? Show title on sourcegraph.com and show interactive tips on enterprise instances?"
"2022-11-02 21:29:48.840091+00","Yes! My bad, left over from dev-ing. Fixed now :)"
"2022-11-02 21:40:08.442492+00","```suggestion 		for { ```"
"2022-11-02 21:40:08.595391+00","this is a float I can never remember if this is going to be an issue or not."
"2022-11-02 22:05:37.98911+00","Linter yelled at me too, should be fixed "
"2022-11-02 22:13:53.386756+00","after talking to stakeholder, I linked as of date to training completed date (which is what they need to track conversion)"
"2022-11-02 22:20:22.305416+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     SELECT * FROM {{ ref('lead_source_mapping') }} ``` "
"2022-11-02 22:20:22.328003+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion ) ``` "
"2022-11-02 22:20:22.461697+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion LEFT OUTER JOIN lead_mapping                 ON opportunity.lead_source = lead_mapping.lead_source ``` "
"2022-11-02 22:20:22.509314+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion UNION ``` "
"2022-11-02 22:20:23.281274+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion LEFT OUTER JOIN opportunity_stages                 ON opportunity.opportunity_id = opportunity_stages.opportunity_id ``` "
"2022-11-02 22:20:23.391281+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     SELECT * FROM {{ ref('stg_salesforce__opportunity_history_xf') }} ``` "
"2022-11-02 22:20:25.289587+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion (SELECT DISTINCT     o.stage_name , os.sort_order     FROM {{ source('salesforce', 'opportunity') }} AS o     INNER JOIN {{ source('salesforce', 'opportunity_stage') }} AS os ON os.api_name = o.stage_name     WHERE         coalesce(os.is_active, false) != false         AND coalesce(o.is_deleted, false) = false AND         coalesce(os._fivetran_deleted, false) != true     ORDER BY os.sort_order ASC) ``` "
"2022-11-02 22:35:09.932477+00","This munging also has the side effect of setting milliseconds to zero like the previous code did."
"2022-11-02 22:36:45.087764+00","Correct. This is not hit an API endpoint from automated tests, but better than nothing.  I would like to explore soon a library called [**nock**](https://github.com/nock/nock) that allows mocking HTTP interactions."
"2022-11-02 22:42:18.280747+00","I'm following the single expectation per test style, where each test should make only one assertion.  Maintaining one expectation per test helps you on finding possible errors, allowing you to go directly to the failing test, and make the code more readable.  Multiple expectations in the same test are a signal that you may be specifying multiple behaviors.  Source: https://www.betterspecs.org/#single"
"2022-11-02 22:45:53.744367+00","Each `describe` statement is isolating a precondition:  - A report with a null PoC - A report with a blank PoC - A report with a PoC  So, each describe section can be extended with more expectations if needed."
"2022-11-02 22:47:32.776116+00","Could you provide an example of how to achieve your suggestion?"
"2022-11-03 12:02:06.557233+00","It's duplicated in line 23"
"2022-11-02 22:55:28.911769+00","is this the amount in cents? could add a comment to clarify if so"
"2022-11-03 00:11:04.450385+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion         , COALESCE( COUNT( DISTINCT IFF(status = 'added', filename, NULL) ), 0 ) AS count_distinct_files_added ``` "
"2022-11-03 02:33:32.637315+00","see if you can replace all the string formatting/parsing objects with [object parsing](https://momentjs.com/docs/#/parsing/object/) and [dumping](https://momentjs.com/docs/#/displaying/as-object/).  this code is run on every single event reduction of every single lab order on every single new lab order event dispatch.  it's in a very very hot path of code, and the additional string parsing/exporting is likely eerily expensive (I once profiled a reduction and was disturbed by how much time was spent in moment.js).  this hopefully won't be an issue once we can use snapshot-as-the-source-of-truth, but we're not there yet and I suspect the object method is both easy and more efficient."
"2022-11-03 02:46:43.852469+00","ty!!"
"2022-11-03 02:54:43.652087+00","Engineering-wise... are we going to do feature branches for each project from now on? And in the feature step, all PRs would be merged to the feature branch, and in the release step that feature branch gets merged into staging and then production?"
"2022-11-03 02:54:43.719249+00","Is there going to be a different way, or are we abolishing the practice completely when it comes to sprint planning?"
"2022-11-03 03:21:17.447726+00","To make it clear from the variable name, the difference from `isOpen`.  ```suggestion     const isOpenDebounced = useDebounce(isOpen, 100) ```"
"2022-11-03 03:21:17.697743+00","At first glance, this name might be confusing. I assumed this enum includes potential reasons for opening a tooltip, but it has also reasons for closing it. Maybe `TooltipVisibilityChangeReason` or `TooltipOpenChangeReason` would be more aligned with the implementation."
"2022-11-03 03:21:17.986901+00","```suggestion ```"
"2022-11-03 03:54:59.015103+00","from what I can tell, attributes get truncated quite short in Chronosphere. I wouldn't even bother with this."
"2022-11-03 03:59:42.195678+00","I'm kinda reaching the point where I'd rather see the trace context injected in the proxy to info/debug/error, etc, rather than in the constructor.  having to `new OrthlyLogger` all over the place is not ideal to look at, to share as best practice, etc."
"2022-11-03 04:01:34.389793+00","We actually control the truncation behavior using this [environment variable](https://github.com/orthly/flux/blob/88d34f64506845e6edf1e03f0702f7c540a29377/apps/staging/web-general/patch-env-labs-server.yaml#L26-L27) (currently limited to 200 chars). I like to include span attributes wherever practical because it allows us to perform structured searches against traces (e.g. in Chronosphere Trace Explorer we can search for `event.data.is_training_order = false AND span.duration > 1 sec`).  "
"2022-11-03 04:09:27.096644+00","I completely agree, I wrote up that work in a new ticket: [EPDPLT-845](https://meetdandy.atlassian.net/browse/EPDPLT-845)."
"2022-11-03 04:22:13.388499+00","nit: this should probably be top-level, before the switch"
"2022-11-03 04:29:00.572482+00","last thing: can we get some whitespace up in this function? 😂  it has become unreadable. blank lines between each ""intent"" would make for massively improved readability."
"2022-11-03 04:38:32.66055+00","ahhh ok, I see what's going on.  we flatten anything past the first layer of variables in GQL request logs, that's why I was seeing so much truncation:  <img width=""336"" alt=""image"" src=""https://user-images.githubusercontent.com/88063894/199648584-8c8066cc-d809-470b-b402-49e19124c89a.png""> "
"2022-11-03 04:55:25.776332+00","@sheldon-welinga I`m not sure why it gets changed I believe I don't remove this part. "
"2022-11-03 04:55:46.113414+00","@sheldon-welinga same here I`m not sure why it gets changed I believe I don't remove this part. "
"2022-11-03 08:06:35.677414+00","`type` here is an atom, (avoid using `any` type) with the following possible values `[:spec, :code, :review, :qa, :learning, :challenge, :admin, :retool, :external]` You can create a type spec in the Task mode as follows: `@type task_type ::  :spec, | :code, | :review| :qa |  :learning |  :challenge |  :admin | :retool | :external` then reference it here as `Task.task_type()`"
"2022-11-03 04:56:18.876041+00","@sheldon-welinga same here I`m not sure why it gets changed I believe I don't remove this part. "
"2022-11-02 05:10:21.83457+00","."
"2022-11-03 05:31:58.560742+00","I would prefer if we write the list typespecs like this: ```suggestion   @spec list_blockers :: [Blocker.t()] ```"
"2022-11-03 05:32:00.444014+00","We should also add that the function can't return: ```suggestion   @spec get_blocker!(pos_integer()) :: Blocker.t() | no_return() ```"
"2022-11-03 05:37:37.587126+00","According to the rest of the doc, **the growth team** handovers the responsibility to derive lessons from users and find out how they perform. It adds a lot more responsibility to the growth team rather than just spreading the word and marketing.   Any idea how it would be to iterate on projects depending on the insights from the growth team? Another project?"
"2022-11-03 08:06:35.761516+00","Why explicitly define their path here? Import the if required and use something like `Task.t() or User.t()` here"
"2022-11-03 12:02:26.409078+00","Sounds good, can you leave a TODO referencing that issue here?"
"2022-11-03 06:00:54.653454+00","I know but we need this coz in the aggregate query if we mention to limitation we have call it with some number value. here I have this query in controller. ``` const uniqueNameKyc = await KycIdentity.aggregate([         {           $match: conditions,         },         {           $group: {             _id: uniqueNames ? { userId: '$userId', principalName: '$principalName' } : '$_id',             userId: { $first: '$userId' },             status: { $first: '$status' },             group: { $first: '$group' },             docType: { $first: '$docType' },             kycStatus: { $first: '$kycStatus' },             expiryDate: { $first: '$expiryDate' },             submittedAt: { $first: '$submittedAt' },           },         },         {           $skip: skipPage,         },         {           $limit: limit,         },         {           $sort: sorted,         },       ]); ```"
"2022-11-03 06:39:40.708149+00","```suggestion   const eventTypesWithoutHiddenProperty = eventTypes?.filter((evt) => !evt.hidden); ```"
"2022-11-03 06:39:40.595055+00","Any reason for naming this array variable `eventTypesWithoutHidden`?"
"2022-11-03 06:45:45.60046+00","@gGh00sTt I suggested `publicEventTypes` because events that are not hidden are public events. Please rename the variable name to `publicEventTypes` cc: @anjola-adeuyi "
"2022-11-03 07:22:00.502509+00","@frankMagoba I think doing `return response.data || null` will be better."
"2022-11-03 07:22:00.710283+00","Same here also, `response.data || null`"
"2022-11-03 07:22:40.369623+00","Please let’s do the same for the remaining other file changes also."
"2022-11-03 07:27:59.59822+00","uh"
"2022-11-03 07:27:59.630717+00","I think some of this can be done more simply  I was planning on doing some refactoring to this function anyways so I may handle this"
"2022-11-03 07:27:59.683424+00","can we use `undefined` instead of unset to not set any property?"
"2022-11-03 07:35:43.246472+00","your postgres skills are unmatched. Casually thinking to add this clause in is very nice."
"2022-11-03 07:41:54.242525+00","This was the initial approach but @ishmam-mahmud suggested against it. Moreover we use `list(type)` across the code base for type spec. For consistency I suggest we keep with it. "
"2022-11-03 07:45:53.069856+00","For consistency ```suggestion   @spec list_clients :: list(Client.t()) ```"
"2022-11-03 07:56:40.810879+00","```suggestion 	return sqlf.Sprintf(""(%s)"", sqlf.Join(conditions, ""\nOR\n"")) ```  nit"
"2022-11-03 08:06:32.949777+00","Let's use this for consistency ```suggestion   @spec list_tasks :: list(Task.t()) ```"
"2022-11-03 08:06:33.213841+00","```suggestion   @spec get_task(pos_integer()) :: Task.t() | nil ```"
"2022-11-03 08:06:33.35914+00","Same here"
"2022-11-03 08:06:33.682273+00","```suggestion   @spec filter_tasks_list(map()) :: list(Task.t()) ```"
"2022-11-03 08:06:33.953083+00","Same here"
"2022-11-03 08:06:33.965408+00","```suggestion   @spec update_statuses_many(Ecto.Multi.t(), list({Task.t(), map()})) :: Ecto.Multi.t() ```"
"2022-11-03 08:06:34.710132+00","Can we restrict `status` to the following atom type following the earlier example `available, backlog, parked, in_progress, client_review, internal_review, needs_changes, finished, cancelled, errored`"
"2022-11-03 08:08:09.838312+00","we probably will have a ""strongly suggested"" to rescope and reevaluate whenever possible. but no strict sprint planning meetings "
"2022-11-03 08:16:53.600583+00","I like this nit 😁 addressed in https://github.com/sourcegraph/sourcegraph/pull/43645/commits/158dd474600dc99e2aecc9a92b3a2c454b1126b2"
"2022-11-03 08:18:37.709503+00","That's one for @macocha and for the engineering team to figure out. It's not something we would prescribe at product framework level. "
"2022-11-03 08:24:36.923997+00","""Step owner"" means the owner for this step, the owner of marketing? Perhaps define step owner earlier in the doc, along with other roles expected to have in a typical project (e.g. a project for delivering a feature). "
"2022-11-03 08:35:18.746269+00","Use same message as enum ```suggestion         throw new NotFoundError(ErrorEnums.ENVELOPE_DOCUMENT_NOT_FOUND, 'Envelope document not found');       } ```"
"2022-11-03 08:35:18.88302+00","Revert this file as we don;t have any changes"
"2022-11-03 08:35:19.002472+00","We should only check if no permission as manage access means you can also read"
"2022-11-03 08:35:19.641082+00","Should be  ```suggestion static async getEnvelopeDocumentVersionsByDocumentId(documentId) { ```"
"2022-11-03 08:35:20.002493+00","Avoid keyword successfully ```suggestion it('should return envelope document versions', async () => { ```"
"2022-11-03 08:35:20.100177+00","Add envelopeId as well in find query"
"2022-11-03 08:35:20.937321+00","check the sorting, should be A-Z"
"2022-11-03 08:35:21.832505+00","Revert"
"2022-11-03 08:35:21.427118+00","use `envelopeDocumentVersions`"
"2022-11-03 08:35:21.855205+00","```suggestion const {  ObjectId  } = require('mongoose').Types; ```"
"2022-11-03 08:35:22.64787+00","Check the message, should match enum"
"2022-11-03 08:35:22.751798+00","You should use the path ```suggestion describe('GET /envelopes/:envelopeId/documents/:documentId/versions', () => { ```"
"2022-11-03 08:35:23.010093+00","Any reason for change in this file?, we can revert it"
"2022-11-03 08:35:23.634345+00","use async operations, we don't need `done` in the tests. Check previous tests in this file"
"2022-11-03 08:35:25.430733+00","Revert this file"
"2022-11-03 08:36:28.539928+00","This table explains each step very well, I would say including this in the slides might have helped yesterday's presentation a lot.   In terms of organizing this doc, putting this table after the diagram might be better, especially for others who did not join the presentation. "
"2022-11-03 08:41:13.517459+00","@Mjanuary  same here use import order"
"2022-11-03 08:41:12.868546+00","@Mjanuary what if there is no envelopeActivities returned? can you please return something"
"2022-11-03 08:41:13.035712+00","@Mjanuary can we use it here instead in controller  ```suggestion     check('withProfile').optional().isBoolean().default(false), ```"
"2022-11-03 08:41:13.232872+00","@Mjanuary  once you finish your changes plz remember to change this line ```suggestion const Database = require('@bluemeg/database').default; ```"
"2022-11-03 08:41:13.738052+00","@Mjanuary order imports by Ascending order as client suggested"
"2022-11-03 08:41:13.913268+00","@Mjanuary same here order import"
"2022-11-03 08:41:14.00495+00","@Mjanuary same here"
"2022-11-03 08:41:14.758324+00","@Mjanuary same here"
"2022-11-03 08:41:16.97247+00","@Mjanuary  follow the order ASC"
"2022-11-03 09:00:14.257151+00","Move this functionality to envelopeController  If you need to know which controller to use check the route i.e. `/envelopes/***`"
"2022-11-03 09:01:23.422927+00","error: `spec for undefined function update_ticket/1` the function spec should accept 2 parameters, not 1  `@spec update_ticket(Ticket.t(), map()) :: {:ok, Ticket.t()} | {:error, Ecto.Changeset.t()}` is more correct"
"2022-11-03 09:06:29.096825+00","It was inside EnvelopeController but @Chiazokam suggested to move it into a separate controller file"
"2022-11-03 12:05:51.392098+00","Why not run this in `worker` like a job? That way you can allowlist/denylist it via env vars."
"2022-11-03 09:15:01.233037+00","I _think_ you could just use `_tokens` to find the first pattern, i.e. you don't necessarily have to add `patterns` below, but I don't have strong feelings about this."
"2022-11-03 09:54:07.281993+00","Realised what's going on - it _does_ log if the insert fails, but that type of logging isn't printed to screen during unit test runs (at least in the context I was running the tests).  https://github.com/sourcegraph/sourcegraph/blob/will/auditlog/security-events/access-token-deleted/internal/database/security_event_logs.go#L144"
"2022-11-03 09:55:07.462553+00","Not sure if there's another approach here rather than typecasting to the same type as the one in the function definition"
"2022-11-03 10:26:35.23551+00","Why are we deleting this?"
"2022-11-03 10:28:20.372677+00","As you can see it's duplicated from line 23"
"2022-11-03 10:28:48.915257+00","I chose to add it to this PR for simplicity, rather than create a new PR"
"2022-11-03 10:36:23.962192+00","@sheldon-welinga Done!"
"2022-11-03 10:40:41.239501+00","```suggestion     viewerSubject: SettingsSubject ``` Let's import `SettingsSubject` from `@sourcegraph/shared/src/settings/settings` WDYT?"
"2022-11-03 10:49:18.198167+00","Same here"
"2022-11-03 10:49:18.469847+00","Is this supposed to be a string?"
"2022-11-03 12:06:08.203553+00","But If i change it now, I won't be able to test because this [PR](https://github.com/GitStartHQ/client-bluemeg-console-api/pull/14#:~:text=PR%20for%20Database%20Service) is not yet merged"
"2022-11-03 12:06:37.416953+00","You could add it to these jobs and get all the goodies that come with it: https://github.com/sourcegraph/sourcegraph/blob/29e831e7c6220c46e42afb60ca014f20e7688bca/enterprise/cmd/worker/main.go#L43-L71  And we're also thinking about building a dashboard for these kind of workers"
"2022-11-03 10:57:54.513007+00","If any SQL guru has a better query, please suggest it!"
"2022-11-03 11:07:55.355238+00","Okay"
"2022-11-03 11:12:32.106651+00","It's really nice that all of this is properly typed now!"
"2022-11-03 11:12:32.252069+00","What does `EDT` refer to?"
"2022-11-03 11:12:32.828718+00","Why is this necessary now? Maybe add a comment?"
"2022-11-03 11:12:33.351267+00","How does this work if the git integration is uninstalled (as mentioned in your PR description)?  Would this file throw when it tires to load? 🤔 "
"2022-11-03 11:32:38.233588+00","Is not this should be like this `this.props.navigation.removeListener(""focus"", this.focusListener);`  to remove listener?  <img width=""999"" alt=""Screenshot 2022-11-03 at 4 29 07 PM"" src=""https://user-images.githubusercontent.com/69838896/199709766-2ecea261-fe54-4d46-b4c5-4a10b2545052.png""> "
"2022-11-03 12:09:46.112486+00","@anjola-adeuyi , I renamed the variable as `publicEventTypes` as suggested by Nitesh. I thought it made more sense since the variable includes the list of all the events which are public"
"2022-11-03 12:11:38.763806+00","You can keep it just `onNewBlock`. The `: onNewBlock` part is not needed if you're not renaming it."
"2022-11-03 12:11:38.778891+00","You can just do `return this.blockOrder.indexOf(id)` to get the index."
"2022-11-03 12:11:38.835341+00","I'd still put a small bottom margin on the header. Otherwise, the header and the file content look squished together. Something like `0.25rem`. Same for the symbol block header."
"2022-11-03 12:13:27.170987+00","Why `array_agg`? You can just `SELECT id` and then `basestore.ScanInts`, right?"
"2022-11-03 12:13:29.066981+00","I think this query can be heavily simplified, no? Instead of having 2 subselects, you can just join the tables?  Example:  ```sql SELECT users.id FROM users JOIN user_external_accounts ON user_external_accounts.user_id = users.id WHERE user_external_accounts.service_type = 'foobar' AND users.created_at <= (now() - '15 days ago'::interval) GROUP BY users.id HAVING COUNT(*) = 1; ```"
"2022-11-03 12:25:16.669046+00","Would you prefer we use a table element and refactor the function to maintain the proper interaction? @jonboiser "
"2022-11-03 12:33:07.383504+00","Ignore"
"2022-11-03 12:34:41.588949+00","Trials by fire 🔥 "
"2022-11-03 13:37:04.864557+00","Thanks for the review "
"2022-11-03 13:39:43.549419+00",">You can just `SELECT id` and then `basestore.ScanInts`, right?  I can, but why is it better? 🤔 "
"2022-11-03 13:41:19.122501+00","will send it now and let you refine in your follow-up"
"2022-11-03 14:10:28.962495+00","We also need a `max` agg on `inspections.timestamp` to populate `lastSeen`.  Also, I added a note to WEB-2210 that we will have to add the `isWithinLimits` property to `bodyAsImageFeature` like we have for external measurements. Once we have that, we can add an agg to count `failingMeasurements` like `failing: { term: { 'inspections.measurements.bodyAsImageFeature.isWithinLimits': false } }`"
"2022-11-03 13:47:41.469033+00","I think the semantics changed with your example, it gives false positives when the user has one external account with `'foobar'` but also has external accounts other than `'foobar'`. 🤔   We want to only list users IFF the user has a single external account with the `service_type = ""sourcegraph-operator""` currently with these subselects."
"2022-11-03 14:00:33.104914+00","@bobheadxi I know this was solved before in https://github.com/sourcegraph/sourcegraph/pull/41957/files, but I dont know how to make it work here"
"2022-11-03 14:10:25.985443+00","```suggestion                                                                     exclude: ['Measurement Sandbox', ''],                                                                     size: 10_000, ```"
"2022-11-03 14:10:26.735497+00","1. Use `filter` instead of `must`. (I added a slide to the training deck about this.) 2. Not all ImageFeatureMeasurements are physical measurements that can be displayed on the Metrics page, so we need to add a `terms` filter on `inspections.measurements.bodyAsImageFeature.featureType`. (This can replace the `exists` filter since `inspections.measurements.bodyAsImageFeature` must exist in order for its `featureType` to match.)     - The supported types are currently: `DISTANCE`, `ANGLE`, `DIAMETER`, `PERPENDICULAR`. (Only `PERPENDICULAR` currently supports Auto Measure, but we can still display metric cards for the other types.)     - `POLYGON` and `CONCENTRICITY` are both physical measurement types we will probably support one day, but we don't have a UI for drawing/displaying them yet.     - `RECTANGLE`, `CIRCLE`, and `SCRIBBLE` are drawings on top of photos, not physical measurements, like the red & blue drawings that make up this lil guy someone drew in the Rylo Playground project. ![image](https://user-images.githubusercontent.com/203177/199716430-82d394ef-b210-4afa-a5d9-9f3740ba9b3e.png)"
"2022-11-03 14:10:28.992191+00","```suggestion             const hasLimit = manualMeasurements.find((manual) => {                 // TODO: Change data type to physical measurement once the backend supports that                 return manual.measurementName === limit.measurementName && getLimitsMeasurementType(limit) === APIListMetricsDataType.NUMBER;             });              if (hasLimit) {                 hasLimit.limits = limit;             } ```"
"2022-11-03 14:10:26.767008+00","```suggestion             const hasAuto = manualMeasurements.find((manual) => {                 return manual.measurementName === monitor.name && manual.measurementType === monitor.measurementType;             });              if (hasAuto) {                 hasAuto.monitor = monitor;             } ```  In addition to these changes, this requirement in the story description seems to be missed:  > Auto measure monitors with no measurements should still be displayed  or at least, AMMs with no measurements are not currently returned from this function."
"2022-11-03 14:10:27.325332+00","Should we just pass `metricFilters` directly to make things easier if/when we add more filters in the future?"
"2022-11-03 14:10:28.037534+00","You can save a whole level of indentation throughout this function if you write this as:  ```suggestion         const response = await Promise.all([             this.loadMetricsData(),             this.loadPhysicalMeasurements(),         ]); ```"
"2022-11-03 14:10:28.232477+00","`allMeasurements` has the type `PhysicalMeasurements` but it does not contain just physical measurements. It seems like the `metrics` property should have the value `allMeasurements` and the `physicalMeasurements` (or some mapping of them) should be added to the return object in place of `allMeasurements`."
"2022-11-03 14:10:28.802696+00","Everything else in this query is also required to get the histogram. Instead of duplicating it all below in a separate query, potentially missing some of the filters etc. and requiring a second ElasticSearch request to be made, we can just add an aggregation here. Also, we need this to be an `extended_stats` agg instead of just `stats` in order to get the standard deviation:  ```suggestion                                                                     meas_stats: {                                                                         extended_stats: {                                                                             field: 'inspections.measurements.bodyAsImageFeature.realValue',                                                                         },                                                                     },                                                                     histogram: {                                                                         histogram: {                                                                             field: 'inspections.measurements.bodyAsImageFeature.realValue',                                                                             interval: bucketSize,                                                                             min_doc_count: 0,                                                                         },                                                                     }, ```"
"2022-11-03 14:10:30.474331+00","This should be the same:  ```suggestion                 else { ```"
"2022-11-03 14:10:30.639738+00","`measurementsMap` is not a map so `measurementsMap[nameKey]` will always be `undefined` unless `nameKey` is the name of an array property."
"2022-11-03 14:10:31.954831+00","Shouldn't this be the type?  ```suggestion     export type PhysicalMeasurementData = APIMetricsListMetricData & {         stationNames: Array<string>,         measurementType: SearchMeasurementImageFeatureType,         monitor?: APIAutomeasureMonitor,         stats: RelationshipsModel.MeasurementStats,     }; ```  Also, I don't think it applies here, but if you need all properties in a type to be optional, just wrap it in `Partial<>` e.g. `Partial<{ a: 'type' }>` is the same as `{ a?: 'type' }`."
"2022-11-03 14:10:31.967995+00","For future reference, if you are constructing an object and giving it a value whose variable name is the same as the property name, you can simplify:  ```suggestion                 allMeasurements,                 dataTypeStats,                 metrics,                 stationStats,                 totalMetrics,                 topIssues, ```  But in this case you could instead do something like this:  ```suggestion                 ...response[0],                 allMeasurements, ```"
"2022-11-03 14:10:31.997608+00","Although we have this pattern in older code, it's preferable to write it like this:  ```suggestion                 error: Utils.errorAnalyticsPayload(error), ```  This helps make it more clear in Amplitude that e.g. the `name` property is in fact the `error.name` and not, say, the name of the current user."
"2022-11-03 14:10:32.755696+00","Why add a separate level of filtering here instead of combining this with the previous measurement-level filters?"
"2022-11-03 14:10:32.950903+00","Why bother declaring this here when it's just going to be overwritten below?"
"2022-11-03 14:10:33.886591+00","```suggestion     physicalMeasurements: Array<MetricsModel.PhysicalMeasurementData> = []; ```"
"2022-11-03 14:10:34.958351+00","Isn't `measurementsMap` a `MetricsModel.PhysicalMeasurements`? So, not a Map? Also some awkward indentation going on here. Suggestion:  ```suggestion             .reduce((                 measurementMetrics: MetricsModel.PhysicalMeasurements,                 { key: typeKey, filtered: { by_measurement_name } }: any             ) => {                 by_measurement_name.buckets.forEach((                     { doc_count, key: nameKey, meas_stats, station_names }: any                 ) => { ```"
"2022-11-03 14:10:35.552079+00","I believe this requirement from the story is being overlooked:  > All manual measurements with > 1 measurement will be shown  In other words, a metric with no monitor and only one measurement should not be shown."
"2022-11-03 14:10:35.847269+00","```suggestion                                     failingMeasurements: 0, ```"
"2022-11-03 14:21:42.347086+00","@BikashSah999 have we explore the possibility of testing this?"
"2022-11-03 14:10:36.422343+00","```suggestion                                     monitor: undefined, ```  or just omit the property."
"2022-11-03 14:10:38.591847+00","""Measurement Sandbox"" is not a feature type. I think there are a few measurements from the earliest days of the measurement tool ~6 years ago that have it as an intent name. (In fact it's excluded as an intent name below.) So this line can be removed."
"2022-11-03 14:10:39.397013+00","The station name buckets are ordered by frequency so the most-used station name is just `station_names.by_station_name.buckets[0].key`."
"2022-11-03 14:10:39.543417+00","When you disable an eslint rule you also need to re-enable it. Generally it's easier to wrap the whole function body. You can search for `eslint-disable max-len` in the code to find other examples of its usage, but basically it'll look like this:  ```ts function buildSomeESQuery() {     /* eslint-disable max-len */     return {         size: 0,         aggs: {             ...         },     };     /* eslint-enable max-len */ } ```"
"2022-11-03 14:10:40.617982+00","Simpler?  ```suggestion     loadAllMeasurementsData(): Promise<APIListMetricsResponse & {         allMeasurements: MetricsModel.PhysicalMeasurements,     }> { ```"
"2022-11-03 14:12:37.341288+00","Event Dispatch Thread. I've added the resolution of this abbreviation everywhere."
"2022-11-03 14:13:25.058549+00","I've now added reasoning everywhere (about 10 locations) where we do thread switches. Thanks!"
"2022-11-03 15:28:24.235375+00","Let's use `SettingsSubjectCommonFields` here, it's an alias of `Pick<GQL.ISettingsSubject, 'id' | 'viewerCanAdminister'>`"
"2022-11-03 14:20:14.431782+00","Done... @jonboiser please jump in if needed, it's unlikely I will see updates quickly if clarification is needed."
"2022-11-03 14:29:45.834185+00","We need to check that the order has not already been designed or is in fabrication. order.design is not null order.status == 'New' (not in ('Delivered', 'Fabrication', 'NeedsRefabrication', 'Cancelled', 'NeedsReview', 'OnHold', 'Shipped', 'New')  And perhaps that the active task has not been started or assigned? ![image](https://user-images.githubusercontent.com/89355674/199746482-84f7ba6d-dec3-4db7-a3a6-9758b4fa7852.png) "
"2022-11-03 14:29:46.460611+00","I like that we assign control vs experiment after all other criteria have been checked.  For the most like vs like comparison. "
"2022-11-03 14:29:58.572501+00","![image](https://user-images.githubusercontent.com/89355674/199748694-f8ec73bc-d605-4a78-a7d9-8df2743afe39.png) "
"2022-11-03 14:36:36.009099+00","Great question! I've tested it, it works; I think the IDE loads optional dependencies dynamically under the hood. However, I was seeing some error messages in the console, so to make it slightly nicer for the user, I've added a proper check for the class existence, and in case of failure, I'm showing a helpful error message now."
"2022-11-03 14:37:41.799847+00","🏳️🏳️🏳️🏳️🏳️🏳️🏳️🏳️🏳️🏳️🏳️🏳️🏳️🏳️🏳️  It is done.  🏳️🏳️🏳️🏳️🏳️🏳️🏳️🏳️🏳️🏳️🏳️🏳️🏳️🏳️🏳️"
"2022-11-03 15:02:20.77395+00","new functionality here: we are iterating through the executions here and this list is going to grow so this could be very inefficient someday, do we care?   this could all be going away very soon "
"2022-11-03 15:03:52.626507+00","Because it's a database and a database client/driver that are built on the concept of returning rows 😄 Why aggregate the rows in a different data structure before returning and scanning them? If you return the rows instead of aggregating, then potentially they can be streamed."
"2022-11-03 15:06:04.492205+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion         , is_conversation_created_during_biz_hrs AND (             ( has_dialpad_missed_call AND COALESCE(call_duration_minutes, 0) <= 0.1667) OR (                 TIMESTAMPDIFF(SECONDS, created_at, last_done_at) >= 10                 AND message_count__in > 0                 AND message_count__out = 0                 AND NOT COALESCE(participants__is_bpo, FALSE)                 AND first_message__channel = 'chat'             ) ``` "
"2022-11-03 15:06:37.207326+00","Naive question, how will these flags propagate to background jobs?"
"2022-11-03 15:08:38.642672+00","Can you try changing this to use the `regex` processor thingamajig:  ```suggestion 			shared.CodeIntelligence.NewAutoindexingSummaryGroup(""${source:regex}""), ```  there's another query that does this so I think the dashboard should work, and I confirmed the replacement works correctly in this case"
"2022-11-03 15:11:06.699436+00","I think you need to give them an `id` so they're not treated as the same node by `useConnection`.  ```suggestion         id: `webhook-${urn}`, ```  That fixes the list for me."
"2022-11-03 15:12:32.386493+00","Agree that SQL should only be concerned with these things if no other way is available. This will also for example affect the query insights because the returned row count will always be 1 and not the actual count."
"2022-11-03 15:16:09.036063+00","that's absolutely it, thank you! will fix it and then merge the PR.  Thanks for your review!"
"2022-11-03 16:48:00.04657+00","I'm pretty sure objects don't ensure order of keys but practically that's usually how it works"
"2022-11-03 15:22:49.699972+00","Look good to you? [sourcegraph/sourcegraph@`be3d6e3` (#43865)](https://github.com/sourcegraph/sourcegraph/pull/43865/commits/be3d6e389fa862be769b43308c053a9422d8cfe5)"
"2022-11-03 15:24:11.08986+00","IMO we can go with `QueryFieldPolicy`   ```tsx import { QueryFieldPolicy } from '@sourcegraph/shared/src/graphql-operations'  export const QUERIES_TO_PERSIST: (keyof QueryFieldPolicy)[] = [     'viewerSettings',     'extensionRegistry',     'temporarySettings', ] ```"
"2022-11-03 15:24:11.197526+00","Let's use `SearchPatternType` from `@sourcegraph/search` and `Scalars` from `../graphql-operations` (prefer use types from internal `graphql-operations` of package"
"2022-11-03 15:25:18.656258+00","```suggestion 			// Target condition: repository is resolvable but the commit is not; was probably ```"
"2022-11-03 15:27:53.643657+00","Fair enough!"
"2022-11-03 15:36:50.418552+00","@AJAkimana please confirm that we still need these castings?"
"2022-11-03 15:31:14.912395+00","`_.omit` isn't type-safe, so if we change this property name in the future this will break. generally a good idea to avoid it ```ts             // this still type checks for some reason, no idea why             const updateUserCommand = _.omit(createUserCommand, ['whatever']); ``` I'd vote that it's safer to just strictly type the update command: ```suggestion             const updateUserCommand: UpdateUserCommand = {                          user_id,                         first_name: createUserCommand.first_name,                         // ... etc             } ```"
"2022-11-03 15:32:59.981761+00","has_dialpad_missed_call should stand alone- as long as it's a voice chat, the time does matter, as per jeremy's requested logic. ![image](https://user-images.githubusercontent.com/19789779/199764739-60025254-c7e2-421d-9cf7-cbe0e5b7f2e5.png) "
"2022-11-03 15:37:18.712472+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion         , is_conversation_created_during_biz_hrs AND ( has_dialpad_missed_call OR (             TIMESTAMPDIFF(SECONDS, created_at, last_done_at) >= 10             AND message_count__in > 0             AND message_count__out = 0             AND NOT COALESCE(participants__is_bpo, FALSE)             AND first_message__channel = 'chat' ``` "
"2022-11-03 15:39:10.21985+00","should we be returning the running total here and counting that in the caller?"
"2022-11-03 15:38:06.906171+00","Same here, please remove `eslint-disable-next-line @typescript-eslint/consistent-type-assertions` in case we don't need to cast"
"2022-11-03 15:39:36.058057+00","oops nvm, just discovered the transaction above"
"2022-11-03 15:52:00.022489+00","Done."
"2022-11-03 15:56:10.382485+00","is the `agg.state` updated from the dispatch?  the previous code looked at the result of `dispatchEvent`"
"2022-11-03 16:03:49.156878+00","it is - `applyEvent` updates `agg.state`"
"2022-11-03 16:29:19.786194+00","Same here"
"2022-11-03 16:29:56.295121+00","Use same standard as above fields"
"2022-11-03 16:30:56.702481+00","Nuke, applies to any field which is not required"
"2022-11-03 16:32:25.798129+00","@olafurpg Would appreciate your 👀  on this list.  This makes all `Identifier` occurrences interactive except for `IdentifierKeyword`, `IdentifierOperator`, `IdentifierNull`."
"2022-11-03 16:35:53.939884+00","why would we not want this to fail if the `gcloud` CLI fails (exits with code != 0)?"
"2022-11-03 16:39:20.641686+00","this `finally` doesn't appear to be doing anything  ```suggestion         InfraLogger.info(`Updating ${jobName} in ${project}.`);         await InfraTaskUtils.runCommand(command.join(' ')); ```"
"2022-11-03 16:39:27.454302+00","we don't want to just break -- the deployment would look like a success and we'd never see this error  ```suggestion                     throw new Error('Something went wrong.  Could not find the execution ID.'); ```"
"2022-11-03 16:40:57.378269+00","why not just do ```typescript const logger = new OrthlyLogger('eventsourced:dispatch-event'); ``` at file level (or have `this.logger` as an instance variable)"
"2022-11-03 16:42:11.765694+00","I am confused as to what's happening here.  You're setting a function to run every 60 seconds then immediately canceling it, effectively creating a no-op.  fyi the reason for the `.` every 60 seconds is to prevent CircleCI from timing out due to no output."
"2022-11-03 16:45:40.641961+00","@johnmastro because the trace & span IDs are injected from async context by the otel library in the `OrthlyLogger` constructor right now.  EPDPLT-845 will change that, fortunately."
"2022-11-03 16:45:44.38395+00","lol thank you"
"2022-11-03 16:47:02.331691+00","Did you mean to remove the property `required: false,`?"
"2022-11-03 16:48:20.618764+00","you can actually access private functions in tests if you use the following form: `OrderProductLineCalculator['getCrownItemProductLine'](...)`"
"2022-11-03 16:48:28.111052+00","i even googled it... losing my touch"
"2022-11-03 16:49:10.06593+00","oh no way... TIL"
"2022-11-03 16:50:07.899001+00","i have a test on it, based on [this](https://dev.to/frehner/the-order-of-js-object-keys-458d) it does. we do this in the task sequences code as well"
"2022-11-03 16:57:59.134965+00","Update docstring: `Alert Delay` -> `Bucket Count`"
"2022-11-03 16:58:01.3625+00","Update docstring: `Alert Delay` -> `Bucket Count`"
"2022-11-03 17:06:27.360608+00","considering this is an externally controlled entity, please only log the fields you care about -- this payload could be ridiculously large, or could leak data that shouldn't be in logs."
"2022-11-03 17:07:03.639305+00","Should we label doctorId so we know what the guid is? Like:  `Not sending sms to doctorid: ${doctor.id} ....`?"
"2022-11-03 17:06:27.366619+00","don't include unique IDs in the message itself - that's what the extra payload is for.  it's easier to locate & easier to aggregate log searches when the message is consistent."
"2022-11-03 17:08:14.482476+00","can we separate out logs for doctors that don't have configs set vs. where sms is false or something? "
"2022-11-03 16:57:59.227676+00","I don't think we check in changes to this file - looks like it gets handled by dependabot? (not 100% sure how it works :))"
"2022-11-03 18:05:49.376196+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion WHERE new_session = 1 ``` "
"2022-11-03 17:11:44.713818+00","@unknwon @bobheadxi @ryanslade Tagging y’all as you randomly appear in git blame for the file 😅 - do y’all think it is safe to construct the `actor.Actor` here?   Normally, OAuth code executes  _before_ the next middleware puts the actor into the context (in fact, it’ll overwrite this one). I needed it here so that actor information appears in the audit log, but if you think it’s too risky or messes up with something, we can drop it and infer the data from the `SecurityEvent` if needed."
"2022-11-03 17:12:16.602483+00","Note that we don't want the entire URL as it contains sensitive OAuth query parameters "
"2022-11-03 17:16:18.295845+00","Let's also make sure to add test cases in `project-settings.test.ts` that use these helpers! (see 'Update alert delay' and 'Update alert delay invalid' test cases)"
"2022-11-03 17:22:58.545446+00","I think we should call this `ProjectSettingsAlertBucketCountField` for consistency with other Alert-related fields."
"2022-11-03 17:30:20.801575+00","If you're worried about this influencing downstream code then you can create a temporary context, e.g.  ```suggestion 		logCtx := actor.WithActor(ctx, actr) ```  And use `logCtx` in the subsequent call"
"2022-11-03 17:31:08.642479+00","I think as-is this is fine however"
"2022-11-03 17:38:45.311041+00","This line is what's causing the failing unit tests. We now return a 500 if we don't find a handler for the code host kind/event type. I changed this for ease of testing/debugging since it made it easier to see which handlers were/were not initialized. I'd like some feedback on whether we should return a 200 (even if we don't find a handler and do nothing with the webhook) or return an error. If we decide this is the correct approach I'll fix the tests."
"2022-11-03 17:44:48.872992+00","To achieve the ""faded gray"" look on the icons, let's use a CSS filter instead. This gets something close to the result you want, but you might need to change the `opacity` to get it exact  ```suggestion         margin-right: 5px;         filter: grayscale(100%) opacity(0.7); ```"
"2022-11-03 17:56:14.733636+00","We shouldn't be hitting retainer at all here, since these are just the CloudRun job worker containers.   So the intended consequence is for it to fail if for whatever reason this container was exposed to the web."
"2022-11-03 17:44:48.954624+00","You can delete this as well as the new CSS classes `svg-fill-missing-value`, `svg-stroke-missing-value`, and the new `$color-missing-value` variable, if you use the CSS suggestion above.  ```suggestion ```"
"2022-11-03 17:44:49.005803+00","```suggestion             measurementUnit = featureType === APIImageFeatureMeasurementType.ANGLE ? '&deg;' : 'mm'; ```"
"2022-11-03 17:44:49.832671+00","Prefer use of the `APIImageFeatureMeasurementType` enum over the string literal ```suggestion         let measurementIcon = featureType === APIImageFeatureMeasurementType.RECTANGLE ```"
"2022-11-03 17:44:49.95413+00","I think this needs to be called again if the user provides a name to the measurement. Currently, the measurement's name remains ""Measurement Sandbox"" even after I save a name."
"2022-11-03 17:51:50.267583+00","are you sure this will work?  retainer uses private/public keys.  I feel like you're likely to have a key decoding error with this."
"2022-11-03 17:53:49.482334+00","Nitpick: Imho these comments (old and new) don't add a whole lot of value so we could simply drop them if you agree.  Applies to line 60 as well."
"2022-11-03 17:53:49.480591+00","Nitpick: I'd suggest just copying the same description we used on a Metric's search handler, i.e.  > Handler for updating the page when search (unit) filters have been updated."
"2022-11-03 17:53:51.136033+00","Nitpick: I'd suggest using the same handler name we used on Metric's, i.e. `searchUpdatedHandler`"
"2022-11-03 18:05:49.398171+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     AND bizible_session.ip_address = fcpid.context_ip     AND COALESCE(bizible_session.referrer_page, 'NA') = COALESCE(fcpid.context_page_referrer, 'NA')     AND COALESCE(bizible_session.landing_page_raw, 'NA') = COALESCE(fcpid.context_page_url, 'NA')     AND bizible_session.event_date BETWEEN DATEADD(         'second', -60, fcpid.timestamp     ) AND DATEADD('second', 60, fcpid.timestamp) ``` "
"2022-11-03 18:05:50.234144+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     SELECT         id         , fc_pid         , user_id         , anonymous_id         , timestamp         , context_library_name         , context_library_version         , context_locale         , context_ip         , context_page_title         , context_page_referrer         , context_page_search         , context_page_url         , context_page_path         , context_campaign_name         , context_campaign_source         , context_campaign_medium         , context_campaign_term         , context_campaign_content         /* session information */         , LAG(             timestamp         ) OVER (             PARTITION BY context_page_title, context_page_referrer, context_ip, context_page_url ORDER BY timestamp ASC         ) AS previous_fcpid         , DATEDIFF('ms', previous_fcpid, timestamp) / 1000 AS inactivity_sec         , IFF(inactivity_sec < 60, 0, 1) AS new_session     FROM source ``` "
"2022-11-03 18:38:44.552222+00","Isaac's suggestion to exclude empty string from Intent.raw.name should take care of this issue. "
"2022-11-03 18:56:49.516617+00","I thought when I merged in master it got the version from master's copy of package-lock.  I'll check on that"
"2022-11-03 19:02:17.205964+00","No, that is not necessary, and I will follow up on this later :+1:"
"2022-11-03 19:03:28.55113+00","This doesn't look right; if you read the comment on line 3727 it says:  >  If the perpendicular point sits in a place where a should be extended, extend a.  Which means in this line what we want to do is to re-define the point `a` to the value of `pp` but instead we're redefining the point `pp` to it's own value? 🤔 "
"2022-11-03 19:03:28.945465+00","This should set the attributes x1/y1 for the line elements at 2 and 3 based on the x/y values of c.  Similar to what we're currently doing in pointB."
"2022-11-03 19:03:29.578535+00","Please add the missing trailing comma and fix indentation below."
"2022-11-03 19:03:30.081413+00","This should be something like the following instead:  ```ts this.perpendicular.pointB = { xPx: mouseX, yPx: mouseY, zPx: 0 }; ```"
"2022-11-03 19:03:29.594336+00","Same thing as above, but with regards to re-defining the point `b`."
"2022-11-03 19:03:29.704844+00","As initially spec'ed I'd expect all four points (a, b, c, and pp) to have similar signatures; why is that not the case?  ```ts set pointA(a: Point); set pointB(b: Point); set pointC(c: Point); set pointPP(pp: Point); ```  This should  set the attributes x1/y1 for the line elements at 0 and 1 based on the x/y values of a.  Similar to what we're currently doing in `pointB`. "
"2022-11-03 19:03:30.950509+00","Based on one of the comments above this should not be needed."
"2022-11-03 19:03:31.062509+00","This should set the attributes x2/y2 for the line elements at 2 and 3 based on the x/y values of pp.  Similar to what we're currently doing in pointB."
"2022-11-03 19:04:25.262479+00","Per Nic's comment, revert this change, so the user's directions are more clear. ```suggestion                     <h4>Click the thumbnail to select a point</h4> ```"
"2022-11-03 19:05:08.749918+00","so all i did was refactor this out into a function since it was used in a few different scopes and i was going to use it again in a new one.   i can break it back out if you'd like "
"2022-11-03 19:11:36.262468+00","Thanks!"
"2022-11-03 19:30:35.343733+00","Yeah, noticed that, I just decided to follow previous conventions"
"2022-11-03 19:31:25.242517+00","We don't"
"2022-11-03 19:51:40.172495+00","👑 "
"2022-11-03 19:52:23.286616+00","I'd really prefer a separate PR for something like this which is completely unrelated"
"2022-11-03 19:58:57.683233+00","I will avoid throwing these in with it in future PRs, sorry bout that"
"2022-11-03 20:25:12.398133+00","considering removing this and just making `handleRepositoryMatcherBatch` a basic function @efritz thoughts"
"2022-11-03 20:25:57.762475+00","No issues on my end."
"2022-11-03 20:33:47.998318+00","I ran a benchmark on this just in case, since I've been surprised by what is / isn't faster on modern hardware before. Turns out you're right, though: the using object parsing & dumping is about twice as fast as the string implementation:  <img width=""702"" alt=""Screen Shot 2022-11-03 at 1 31 50 PM"" src=""https://user-images.githubusercontent.com/57967008/199828350-b231f0d0-927b-4e4e-a2a6-391b8013a13f.png"">  I'll swap it over to the faster one."
"2022-11-03 23:27:16.929965+00","changing these utility functions to accept `LabOrderDTO` rather than `LabOrderAggregateRoot` wasn't strictly necessary, but i think it makes more sense given that they all just want to look at the dto state"
"2022-11-03 20:34:29.07996+00","Logically, these feel like tabs to me. They should probably be implemented [using the `<Tabs>` component](https://storybook.sgdev.org/?path=/story/wildcard-tabs--tabs-story) so they are accessible. We can style them to not look like tabs if we want. The current implementation is not accessible to keyboard or screen reader users because it's not clear what these toggles, and we're not using interactive components (adding onclick to a `<p>`). Also, I don't think it's a good idea to change the order depending on which one is selected, as this can be confusing, especially to keyboard or screen reader users. cc @almeidapaulooliveira "
"2022-11-03 20:41:07.301331+00","@jonboiser this has been reverted"
"2022-11-03 20:51:28.526242+00","I'm mostly annoyed I have to do either-- iirc the target version of typescript doesn't need the typecast or assertion. Don't have a strong preference either way, so I'll make the swap over."
"2022-11-03 21:37:28.629225+00","Ahh, totally agree. Tabs makes more sense here. Thanks @limitedmage . Back to WIP for now"
"2022-11-03 21:47:55.608534+00","All of the information is dispatched synchronously to our store before actually using the UpdateFeedback mutation. Since we are reviewing one item at a time, we don't need more complex data structures for each piece of state, can just store the tags, notes, and chairside_adjustment_minutes in simple structures and update that specific item with the provided feedback "
"2022-11-03 22:08:30.566222+00","Use $color-light-table-row-hover for this use case instead of introducing $color-light-gray."
"2022-11-03 22:08:30.617727+00","This results in a double border between rows."
"2022-11-03 22:08:32.006898+00","We can use $border-container instead of introducing $bulk-measurement-table-border. It's fine that the color does not exactly match the mockup."
"2022-11-03 22:14:19.643048+00","lol nice cleanup"
"2022-11-03 22:24:01.240063+00","I feel like it's a bit of an anti-pattern to use icons instead of a real Radio button here. Is there a reason we can't use the Material Radio here? It's better semantically and is usually more accessible."
"2022-11-03 22:24:01.315143+00","I think we should use a selector here, it allows for guaranteed reactivity (re-rendering the component when state changes). In general I believe it's best to avoid using `store.getState()` directly in components. I see `useFeedbackSelector` in our code which maybe a good way to access this info?"
"2022-11-03 22:24:01.453821+00","Same comment on state access, I think it'd make sense to have a selector built to fetch items so you don't have to repeat the logic in multiple places, and if we ever changed the state shape it would be easier to update."
"2022-11-03 22:24:01.866049+00","This seems a bit odd to me, if we're using a variant I don't think we should be updating its font size as this eventually leads to inconsistencies in our designs. Was there a specific reason we needed this or can we use either a different variant, or stick to the current font size?"
"2022-11-03 22:27:19.134942+00","should instead `ErrorUtils.reportError()`, since worst case is that on error, we will allow fabrication of an order from ops  also please document here why we did this, so future devs know"
"2022-11-03 22:27:19.670191+00","nit: could also have elected to make it an externally designed order to skip this"
"2022-11-03 22:27:20.132478+00","not needed anymore"
"2022-11-03 22:27:22.212476+00","nit  ```suggestion                 e.response.errors.find((err: any) => String(err).toLowerCase().match(/not found/)) ```"
"2022-11-03 22:27:26.082968+00","nit: unnecessary"
"2022-11-03 22:38:32.241411+00","One more small thing I just thought of (sorry to keep tacking things on to the review) - does it make sense to put this setting above alert delay so it's grouped with Bucket Size?"
"2022-11-03 22:27:26.560606+00","nit: this can be avoided if we just return `false` from the `isManufacturerIntegrated` util"
"2022-11-03 22:27:26.812504+00","use `helpers.mockRDSOperation`"
"2022-11-03 22:27:28.932489+00","nit: the partner ID here is going to be totally different from the `helpers.getRetainerUser('practice').member.organization_id` and therefore it is just kinda working because none of the code bothers to verify that the `dr_preferences_id` and `partner_id` actually refer to the same partner"
"2022-11-03 22:34:49.449991+00","you're weird and feel like bad practice"
"2022-11-03 22:27:28.020214+00","```suggestion ```"
"2022-11-03 22:30:19.248397+00","Was my first option, the full discussion here: https://www.figma.com/file/qdUtoveMtn2wI8eaysE1De?node-id=51:4427#295819777"
"2022-11-03 22:35:01.249126+00","fact."
"2022-11-03 22:32:04.977573+00","Now it looks the same when it's disabled vs not selected so you can't easily tell whether the button is enabled or not. While we do want to move away from light gray, it's kinda difficult for this section without a larger revamp or changing some components out of our control (like the individual button component above). I actually poked around these components yesterday, and I couldn't find anything better than using light gray that properly handled the disabled state and played nicely with all of the buttons and stuff that we wrap around. I would look favorably on not changing this section and asking Edu/Jordy about the best path forwards because I do think the visual indicator that a given button is disabled is important. We can also call in @Joeb3219 here since he originally created the feature and probably has a better intuition as to what we should do here."
"2022-11-03 22:32:05.150186+00","```suggestion                                     border: `1px solid ${FlossPalette.STROKE_LIGHT}` ``` I think we should be using this for all borders now"
"2022-11-03 22:32:18.162488+00","In this situation I would be using a hook inside a hook (The feedback selector inside of useCallback). Do you think it'd be better to just pass the items in state to this function since I'll be using the selector in the component you made the other comment on? Or is it more acceptable to access the items through store.getState() here in this feedback mutation function?"
"2022-11-03 22:33:08.629885+00","Neither of these have a `src` folder"
"2022-11-04 11:26:30.719405+00","This is not formatted correctly, please update the quotation marks here."
"2022-11-04 11:35:26.791835+00","Run `mix format` to format code properly"
"2022-11-04 19:32:10.822475+00","does it make sense for this to live on the model or is this overkill right now?"
"2022-11-07 09:15:50.818802+00","@Mjanuary yes. That's why i said it should be mentioned in the PR description before testing. Pull the database repo branch and start then link this PR to the database repo.  This way i think so if you PR gets merged it this file change won't conflict with main codebase making use of this particular DB connection"
"2022-11-07 14:45:35.258576+00","Should be an object"
"2022-11-07 15:05:10.171292+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion         , base_date = month_start AS period_marker__month_start         , base_date = month_end AS period_marker__month_end ``` "
"2022-11-03 22:32:05.915317+00","IconButtons don't really work well in our new framework for some reason (likely because our custom button now has a bunch of styles not embedded into the mui framework properly, which we did do correctly originally)  Did you try converting this to a `Button` with a variant of `secondary` or `ghost`? You may have to reduce the `minWidth` to make it more square, but I think that's likely more along the lines of what we'd want here. This is a bit simpler than hand-rolling all of the styles ourselves"
"2022-11-03 22:32:11.374238+00","> We can style them to not look like tabs if we want.  Good call, @limitedmage."
"2022-11-03 22:33:54.759019+00","Slight wording tweak, because it took me a couple of reads to get it:  ```suggestion     as environment variables named using this key. ```"
"2022-11-03 22:33:54.839628+00","Beyond that, this _may_ be a little too restrictive — lower case letters are allowed in environment variables, and may even be useful in some cases such as `http_proxy` — but we could probably wait and see if we get any complaints before changing this."
"2022-11-03 22:33:54.899459+00","```suggestion 	// 🚨 SECURITY: Only allow access to secrets if the user has access to the namespace. ```"
"2022-11-03 22:33:54.938422+00","This is currently allowing `|` characters as well, so:  ```suggestion var executorSecretKeyPattern = regexp.MustCompile(""^[A-Z][A-Z0-9_]*$"") ```"
"2022-11-03 22:33:55.960954+00","Why not check the site admin flag directly in this case?"
"2022-11-03 22:34:25.465772+00","that's weird and feels like bad practice"
"2022-11-03 22:34:59.454598+00","I agree that it is a bit strange. I was following what we are currently using for all other PL feedback, so I was just copying the logic we already had. But using material radio is a lot simpler so I'll look into replacing it for this"
"2022-11-03 22:37:50.972774+00","Using 'h4' here essentially solves the same thing I was trying to achieve with the fontSize property, I was playing around with different approaches and this wasn't adjusted. Thanks for calling this out, I've switched it"
"2022-11-03 22:38:10.249602+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     QUALIFY ROW_NUMBER() OVER (PARTITION BY name ORDER BY is_active DESC) = 1 ``` "
"2022-11-03 22:38:10.422807+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     FROM sales_rep_history     LEFT OUTER JOIN sf_users ``` "
"2022-11-03 22:38:10.440103+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion      SELECT         * ``` "
"2022-11-03 22:45:53.028863+00","Removed"
"2022-11-03 22:46:01.842483+00","Removed"
"2022-11-03 23:27:10.182503+00","I did check with Edu on how they look disabled, there is a transparency level we're applying to disabled buttons, which we decided was a clear enough indicator. Will attach a picture of this below."
"2022-11-07 09:17:15.722532+00","I'd leave that to each project and how they want to approach the eventual release. My recommendation would be to ship as small and soon as possible, rather than bundle everything to one big release. We'd then just flip the flag that is needed."
"2022-11-03 22:46:18.142048+00","Now using ErrorUtils."
"2022-11-03 22:55:28.707603+00","I did not, but I will. I think that sounds great!"
"2022-11-03 23:00:23.65615+00","This will only go to sentry, you want this to be a bit louder:  ```suggestion             ErrorUtils.reportError({ cause: 'Failed to query manufacturer integrations', err: e, severity: ErrorSeverity.Critical, team: 'Supply' }); ```"
"2022-11-03 23:01:15.690781+00","Yeah, it would be better to pass the data to `update()` like before. Plucking data out of the aether like this is frowned upon – it obscures the method's data dependencies."
"2022-11-03 23:03:41.401987+00","tweaked these two entries to have codeowners on subfolders and root-level .ts files"
"2022-11-03 23:05:04.580629+00","Ok good to know, thank you both! This approach is used in the original useSubmitFeedback hook (not the useSubmitFeedbackShortcut hook here), so that can be something I can go and adjust at a future time as well"
"2022-11-03 23:26:04.29249+00","i factored this out because `cancelOrder` was calling the command handler directly - this way they can both call the util, passing it the agg obtained from `withAggregate`"
"2022-11-03 23:28:32.169164+00","this is a bit of a behavior change in that previously only the `dispatchEvent` calls were within the transaction, not `load`. but this is the natural way to model it with `withAggregate` and more correct anyway"
"2022-11-03 23:28:41.143793+00","Couple things here: * We're querying the same element multiple times where could query it just once and re-use a constant holding its value throughout  * I believe the comment on line 641 isn't accurate since we're not showing the actual chart but its wrapper, I'd suggest removing it since, imho, it doesn't add a whole lot of value * Functionality speaking the `toggle` on line 642 is correct but imho it's probably safer to make the action  explicit rather than implicit by using `remove` instead  Here's an example of what I'm suggesting above:  ```ts const chartWrapper = this.elem(`#${target.id} .metric-card-distribution-chart-wrapper`) as HTMLElement; if (chartWrapper?.classList.contains('hidden')) {     chartWrapper.classList.remove('hidden');     chartWrapper.dataset.chartContent = 'distribution';      this.elem(`#${target.id} [data-toggle-id=""distribution""]`)?.classList.add('active');     this.elem(`#${target.id} [data-toggle-id=""control-chart""]`)?.classList.remove('active'); } ```"
"2022-11-03 23:28:41.709597+00","Same as above with regards to comments; these two comments on lines 652 and 653 seem redundant since both lines are sort of (imho at least) self-explanatory so I'd suggest we remove them and update the comment on line 651 to something like:  ```ts Otherwise, remove its charts from the DOM. ```"
"2022-11-03 23:28:42.674191+00","I'd suggest something like the following to be a more descriptive about what the current plan is:  ```ts // If a metric card isn't visible and its distribution chart is hidden, make the latter visible again so // that once back into view the selected tab is up-to-date with the plotted chart. // // FIXME: WEB-1926 will make it so that whatever was the last active chart tab, that is the one that stays // selected as an invisible metric card goes back into view. ```"
"2022-11-03 23:28:47.700342+00","same here"
"2022-11-03 23:29:13.652471+00","and here"
"2022-11-03 23:35:44.916104+00","@aram-krakirian Gotcha, if we do this elsewhere please don't feel like you have to update everything in order to ship this!"
"2022-11-03 23:44:42.470855+00","I think if you use `cy.bigRadioSelectClickOption` it should properly get the option by value and you won't have to use the regex (although the regex is a clever solve)"
"2022-11-03 23:44:42.502801+00","since this page has two values that you can select (material + thickness), a more descriptive name here might make more sense"
"2022-11-03 23:57:57.873775+00","160783f"
"2022-11-04 00:05:05.5426+00","Ah, I forgot about that method.  I pushed a commit that uses it, and also checks all available options, instead of just the first one."
"2022-11-04 04:24:16.843989+00","I intentionally didn't, because the url and the name of the space might change!"
"2022-11-04 00:05:16.236167+00","88f70bc"
"2022-11-04 00:32:15.70494+00","I feel like we need a linter rule for this. 😂 🚨 🚨 🚨 "
"2022-11-04 00:43:53.222857+00","@hamirmahal Blame M$, if I have a choice, I'll set all my editors to put a newline at the end of a file: so much better when I use `cat`. I'm also not a fan of the random \CR\LFs I find, nor whatever zero-width whitespace bytemarker @Colton1skees's files seem to be prefixed with (pretty sure that's still M$)."
"2022-11-04 00:44:57.915038+00","@hamirmahal Blame M$, if I have a choice, I'll set all my editors to put a newline at the end of a file: so much better when I use `cat`. I'm also not a fan of the random \CR\LFs I find, nor whatever zero-width whitespace bytemarker @Colton1skees's files seem to be prefixed with (pretty sure that's also M$ somehow)."
"2022-11-04 01:58:54.522967+00","yes"
"2022-11-04 03:26:25.719653+00","```suggestion   @doc """"""   Returns a query searching for tasks assigned to a developer      If a nil username is passed, then a not nil check is performed to ensure all tasks are not returned by this query.   """""" ```"
"2022-11-04 03:45:42.222501+00","```suggestion ```"
"2022-11-04 04:09:07.512513+00","nit: might want to put https://docs.gitstart.com/gitstart-documentation/clients directly :)"
"2022-11-04 04:46:14.984524+00","```suggestion     where_not_assigned(query) ```"
"2022-11-04 04:55:07.738171+00","Would it be better to actually set up pull requests with and without an assignee? Since the setup is empty what is returned will be empty. "
"2022-11-04 05:08:52.543833+00","case id is sent automatically when a case is active for all events in fluoride (we don't need it here, and probably shouldn't declare it as it adds a redux selector when not needed)"
"2022-11-04 05:11:10.67249+00","that makes sense :see_no_evil: "
"2022-11-04 05:11:16.742479+00","I will do that"
"2022-11-04 05:12:28.767164+00","```suggestion 	SecurityEventGitHubAuthSucceeded SecurityEventName = ""GitHubAuthSucceeded"" 	SecurityEventGitHubAuthFailed    SecurityEventName = ""GitHubAuthFailed""  	SecurityEventGitLabAuthSucceeded SecurityEventName = ""GitLabAuthSucceeded"" 	SecurityEventGitLabAuthFailed    SecurityEventName = ""GitLabAuthFailed"" ```  Sorry this is what happens when you tag Joe in a review 😛 and these are not nits."
"2022-11-04 05:12:29.008086+00","nit  ```suggestion 		// Since we obtained a valid user from the OAuth token, we consider the GitHub login successful at this point ```"
"2022-11-04 05:54:59.102475+00","@usmailaabdoul Remove empty line here"
"2022-11-04 05:12:29.220881+00","Have lost context on how we define our source, but this one seems to be ""WEB""?"
"2022-11-04 05:12:29.726544+00","Could you put the above as a code comment, I can imagine someone unaware of this making a PR to ""fix missing full URL"" and approved by someone who is also unware of this 🤣 "
"2022-11-04 05:12:29.058216+00","LGTM as well. Also technically the ""successfully OAuth"" finishes before the line   ```go user, err := db.Users().GetByID(ctx, actr.UID) ```  But doesn't hurt to stay where it is now"
"2022-11-04 05:14:15.039023+00","I'm not sure to clearly understand what the fn does by just reading the name.  I would change the fn name to: `where_fields_are_not_nil/2`  WDYT?  ```suggestion   Returns a query for tasks that have certain fields set.    ## Examples        iex> Task.base_query()       iex> |> Task.where_id(^task_id)       iex> |> Task.where_fields_are_not_nil([:assigned_developer_id, :description])   """"""   def where_fields_are_not_nil(query, fields) do     Enum.reduce(fields, query, fn f, query ->       from [task: t] in query, where: not is_nil(field(t, ^f))     end)   end ```"
"2022-11-04 05:24:26.555564+00","```suggestion   - Add a `# REFACTOR` comment next to it, add documentation and overcommunication on what to refactor and why ```"
"2022-11-04 05:24:27.349754+00","This is not following your example about using `REFACTOR`"
"2022-11-04 05:24:27.375228+00","How do we add documentation? Would be great to have examples"
"2022-11-04 05:24:28.350948+00","Good decision :)"
"2022-11-04 05:24:27.481918+00","My thoughts is that some refactors have dependencies over other tickets. Wouldn't be nice to link the linear issue here?  Just opening the discussion about this"
"2022-11-04 05:31:19.038851+00","This is incorrect as examples are not written like this.  https://hexdocs.pm/elixir/1.12/writing-documentation.html#doctests  ```suggestion   @doc """"""   Returns a query for tasks that have certain fields set.    ## Examples        iex> Task.base_query()       iex> |> Task.where_id(^task_id)       iex> |> Task.where_fields_are_not_nil([:assigned_developer_id, :description])       %Ecto.Query{}   """""" ```"
"2022-11-04 05:32:08.572487+00","> this reducer  sir this is an action (technically actions can have multiple reducers)  At some point it's worth thinking about where these comments should go (here vs on reducer) but idk and don't wanna bikeshed"
"2022-11-04 05:32:10.322273+00","using the variable name `state` here is a bit confusing because we also have a `newState` and `oldState` and this one is of a different type"
"2022-11-04 05:32:10.673193+00","thanks for including the date, see you in 6 months"
"2022-11-04 05:36:54.103746+00","In this particular case I mainly meant just writing a multiline comment in the same place as the REFACTOR to document the refactor. I can explicitly say that and be more clearer, right?"
"2022-11-04 05:37:09.642493+00",":see_no_evil: I will fix it"
"2022-11-04 05:37:38.553509+00","Yes, it could be more explicit"
"2022-11-04 05:37:57.006068+00","We talked about this on https://github.com/Murcul/docs/pull/151. The problem with adding linear issues to the code is that they disappear after some time.  I think we should just add some context to the comment by saying: ""When doing so, we need to also check X, Y and Z"". wdyt?"
"2022-11-04 05:37:58.695469+00","I'm not sure how to play this together with the docs process update @iurimadeira pushed in docs, where we only create the Linear issue if we actively start working on a refactor, as opposed to right away. What do you think?"
"2022-11-04 05:48:13.762955+00","Actually... I do want to know if there is a smarter way to write this SQL... @efritz @eseliger CTA! <img src=""https://media2.giphy.com/media/3o84sIgvTmkC4W8MRa/giphy.gif""/>"
"2022-11-04 05:54:58.36382+00","@usmailaabdoul this is not sure if it's correct. client observed that It's not correct. he reviewed yesterday but forgot the submit the comments. Just did"
"2022-11-04 05:54:58.402502+00","@usmailaabdoul above syntax comment"
"2022-11-04 05:54:58.45908+00","@usmailaabdoul above syntax comment"
"2022-11-04 05:59:06.912476+00",":|"
"2022-11-07 19:27:09.722548+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     SELECT *     FROM {{ ref('ref_date_day') }}     WHERE base_date >= '2022-01-01'         AND base_date < CURRENT_DATE() ``` "
"2022-11-04 05:54:59.30262+00","@usmailaabdoul above syntax comment"
"2022-11-04 05:54:59.450211+00","@usmailaabdoul wrong synyax `logger.error([EnvelopeRecipientService.validateCreateEnvelopeRecipientFields] Error: ${e.message});`"
"2022-11-04 05:55:00.31732+00","@usmailaabdoul Please validate the `envelopeId` value first, or the aggregation will fail with an unfriendly message"
"2022-11-04 05:55:00.539608+00","@usmailaabdoul For all envelope endpoints, permission and access control are handled by the `checkAccessLevel ` method. You don't need to (and shouldn't) use the `checkPermission` method"
"2022-11-04 05:55:00.886232+00","@usmailaabdoul same as here"
"2022-11-04 06:09:05.652863+00","> I'll set all my editors to put a newline at the end of a file: so much better when I use `cat`.  I like to terminate all my source files with a newline, too, for exactly this reason."
"2022-11-04 05:55:00.93248+00","@usmailaabdoul above syntax comment"
"2022-11-04 05:55:01.079568+00","@usmailaabdoul same here not sure if this is doing correct"
"2022-11-04 05:55:01.587022+00","@usmailaabdoul Here you are only checking for `READ` permission, but in the spec it is clearly mentioned that `MANAGE` permission is required"
"2022-11-04 05:55:02.581773+00","@usmailaabdoul above syntax comment"
"2022-11-04 05:55:02.967482+00","@usmailaabdoul Requires `MANAGE` permission"
"2022-11-04 05:55:03.82249+00","@usmailaabdoul above syntax comment"
"2022-11-04 05:58:30.403869+00","por que no las dos"
"2022-11-04 06:37:41.151868+00","Addressed in https://github.com/sourcegraph/sourcegraph/pull/43853/commits/ff57b8b86b2f239f84cd95a6474795f3d2c2abef, PTAL!"
"2022-11-04 06:52:07.264314+00","@Chiazokam what if we don't have data for `envelopeDocumentVersions` can we return something?"
"2022-11-04 06:52:07.733793+00","@Chiazokam this was supposed to be on the top of try"
"2022-11-04 07:08:39.396157+00","@rwagatenga Clear"
"2022-11-04 05:35:52.798326+00","This is meant to replicate the IEx prompt, right? Wouldn't we then put the |> in the previous line like this ```elixir iex> Task.base_query() |> ...> Task.where_id(^task_id) |> ``` ?"
"2022-11-04 07:44:19.002091+00","For this one comment, I added a mention on checking if those columns are used anywhere, both in this codebase and in the old backend too. I think we can formalize that in the refactor comments process in the docs repo, that if the refactor talks about things being removed it should also try and list all the systems that need to be double checked."
"2022-11-04 07:52:47.961168+00","```suggestion     throw new JacksonError('Couldn't fetch XML data', 400); ```"
"2022-11-04 08:05:53.102433+00","Hi @rwagatenga , it's an asynchronous call, so it's good to be inside the try block"
"2022-11-04 08:08:11.157523+00","yes @Chiazokam  for the previous PR of BM-4904 client suggested to check if you've a right to access envelope before we move to the other part. you get what I mean."
"2022-11-04 08:09:53.12522+00","I mean before we check if envelopeDocument we could have checked if you've a right to access envelope"
"2022-11-04 08:18:17.132483+00","Hi @sheldon-welinga , I don't think this is the right way to approach this.  The envelopeDocument has `envelopeId` in its data. I think it's better to fetch a document by its id and envelopeId instead of first getting the document and then checking if the envelopeId returned matches the envelope Id in the params."
"2022-11-04 08:41:06.018881+00","```suggestion   @spec list_all_tickets_for_developer_query(pos_integer()) :: Ecto.Query.t() ```"
"2022-11-04 08:41:06.03153+00","This should be Ticket status, not activity status. `@possible_statuses [     :backlog,     :available,     :in_progress,     :paused,     :finished,     :canceled   ]`  Refer to my  comment here https://github.com/GitStartHQ/client-gitstart-backend/pull/34#discussion_r1012583800 ```suggestion   @spec update_status(Ticket.t(), Activity.status()) :: {:ok, Ticket.t()} | {:error, Ecto.Changeset.t()} ```"
"2022-11-04 08:41:06.081124+00","Supply type for defaullt param"
"2022-11-04 08:41:06.253766+00","```suggestion   @spec compute_pull_request_estimate_credit_cost(pos_integer()) :: map() ```"
"2022-11-04 08:41:06.900192+00","```suggestion   @spec list_actionable_tickets_for_developer_query(pos_integer(), pos_integer()) :: Ecto.Query.t() ```"
"2022-11-04 08:47:01.773605+00","shouldn't this heading also be out of the loop?"
"2022-11-04 08:47:20.433739+00","Can we just define `map()` as the return type?"
"2022-11-04 08:47:21.13674+00","```suggestion   @spec create_invoice_in_stripe(pos_integer(), Date.t()) :: :ok ```"
"2022-11-04 08:47:21.475944+00","Same with this"
"2022-11-04 09:05:24.972796+00","```suggestion   @spec team_lead_query(pos_integer()) :: Ecto.Query.t()   defp team_lead_query(user_id) do ``` nit: Can you take this opportunity to add this renaming?"
"2022-11-04 09:00:34.023491+00","Things to think about:  I think we need to think of a better way to test our permissions. Some of the tests for leads/project managers/repo managers permission, these tests are repeatedly tested at the top-level. But these permissions are not tied to these top-level resolvers, these permissions are defined by the tickets permission.   We can improve this if we can test the canada function independently and rely on the canada function as much as possible. For permission with subquery, they are still separated but I tried to abstract them to go through ticket -> instance -> all the permission checks, so it might be okay if we just test all the permission functions in the Instance context. "
"2022-11-04 09:02:35.766058+00","Looks good, just remove these unused alias, I will let @rlopzc review the multi changeset part and approve this"
"2022-11-04 09:05:24.045857+00","```suggestion   @spec get_developer_tasks_updated_after_query(           developer :: Developer.t(),           datetime :: DateTime.t()         ) :: Ecto.Queryable.t()   def get_developer_tasks_updated_after_query(%Developer{} = developer, datetime) do ``` nit: Can you take this opportunity to rename this function with a `_query` suffix everywhere?"
"2022-11-04 09:05:24.109782+00","```suggestion   @spec get_total_time_spent_in_minutes(Task.t(), User.t()) :: non_neg_integer() ```"
"2022-11-04 09:05:24.30049+00","```suggestion   @spec possible_assignees(pos_integer()) :: list(User.t()) ``` Let's keep it consistent"
"2022-11-04 09:05:24.917938+00","```suggestion   @spec mark_pull_request_for_internal_review(PullRequest.t(), list(Task.t())) ::           {:ok, PullRequest.t()} | {:error, Ecto.Changeset.t()} ```"
"2022-11-04 09:05:24.926451+00","```suggestion   @spec get_total_time_spent_in_minutes(Task.t(), User.t(), nil) :: non_neg_integer() ```"
"2022-11-04 09:05:24.938979+00","```suggestion   @spec maybe_mark_pull_request_for_internal_review(Ecto.Multi.t(), PullRequest.t()) ::           Ecto.Multi.t() ```"
"2022-11-04 09:05:25.059421+00","```suggestion   @spec maybe_update_pull_request_status(PullRequest.t(), PullRequest.Status.status()) :: ```"
"2022-11-04 09:05:25.702501+00","This can be 0, which is not a positive integer, if the developer never submitted a worklog for this task."
"2022-11-04 09:05:26.225241+00","```suggestion   @spec get_total_time_spent_in_minutes(Task.t(), User.t(), DateTime.t()) :: non_neg_integer() ```"
"2022-11-04 09:05:25.80181+00","```suggestion   @spec team_member_query(pos_integer()) :: Ecto.Query.t()   defp team_member_query(user_id) do ```"
"2022-11-04 09:05:25.947357+00","```suggestion   @spec instance_manager_query(pos_integer()) :: Ecto.Query.t()   defp instance_manager(user_id) do ```"
"2022-11-04 09:12:03.452486+00","There are more types of workers. You don't need to have a database table. Examples:  - https://github.com/sourcegraph/sourcegraph/blob/6b6f03d614bbb4038a8eedd90c1dd6c0d04e06df/cmd/worker/internal/repostatistics/compactor.go - https://github.com/sourcegraph/sourcegraph/blob/mrn/zoekt-repos/cmd/worker/internal/zoektrepos/zoektrepos.go  These are simple periodic goroutines. It would be trivial to convert your cleanup job into one of these workers.  I think you can just look at these two or other jobs and copy them, but in case that's not enough, here's more info: https://docs.sourcegraph.com/dev/background-information/backgroundroutine"
"2022-11-04 09:05:26.164094+00","```suggestion   @spec get_total_time_spent_in_minutes_query(Task.t(), User.t()) :: Ecto.Queryable.t() ```"
"2022-11-04 09:05:26.672706+00","```suggestion   @spec task_developer_assignee_query(pos_integer()) :: Ecto.Query.t()   defp task_developer_assignee_query(user_id) do     Task.base_query() ```"
"2022-11-04 09:05:26.963781+00","```suggestion   @spec repository_owner_query(pos_integer()) :: Ecto.Query.t()   defp repository_owner_query(user_id) do ```"
"2022-11-04 09:05:26.971434+00","This function is not used anywhere. Can we delete this?"
"2022-11-04 09:05:27.868177+00","```suggestion   @type type ::           :spec | :code | :review | :qa | :learning | :challenge | :admin | :retool | :external ``` We already know it's a Task as it's in this file."
"2022-11-04 10:12:09.635956+00","> Hmm not sure if it's any smarter, some maybe slightly more readable form might be >  > ```sql > SELECT u.id FROM users u > JOIN user_external_accounts uea ON uea.user_id = u.id > WHERE > 	u.id IN ( > 		SELECT user_id FROM user_external_accounts GROUP BY user_id HAVING COUNT(*) = 1 > 	) > 	AND > 	uea.service_type = 'sg' > 	AND > 	u.created_at <= NOW() - interval '10 day'; > ```  Thanks @eseliger! Pushed in https://github.com/sourcegraph/sourcegraph/pull/43853/commits/8fc02941e499d6c8c91b910a29ebf9207d216518.  I put the `SELECT user_id FROM user_external_accounts WHERE service_type = %s` as the  subselect because in 99.9% of runtime, it should return nothing."
"2022-11-04 09:05:28.458231+00","```suggestion   @spec filter_active_tasks_query(Ecto.Query.t(), boolean()) :: Ecto.Query.t()   defp filter_active_tasks_query(query, true) do     Task.where_status_not_in(query, @terminal_statuses) ``` nit: Can you take this opportunity to rename this function and add a `_query` suffix everywhere?"
"2022-11-04 09:06:19.279213+00","From **_BartoszJarocki_**: -2 there's no need for `useEffect` here. what's more, when on android you're adding `touchend` event listener which isn't cleared and will cause a memory leak. In that kind of situation, it's worth asking why is this button disabled, when the text is already there?   The root cause seems to be the function, that checks if the editor has text. On android we use fallback editor, and this function doesn't take that into account. see the diff below:  <img width=""1124"" alt=""Screenshot 2022-11-04 at 07 29 30"" src=""https://user-images.githubusercontent.com/1017620/199906563-cb24e32a-33d6-4a45-9692-243c6369fe7d.png"">  changing the way we get the current text, fixes the issue with only a few lines of code without a need for that kind of `useEffects`. "
"2022-11-04 09:07:41.732488+00","Can you delete this function if it's only called in the tests?"
"2022-11-04 09:07:41.815842+00","Can you check if onboard_client and churn_client are used anywhere? If they are only called in the tests but nowhere else, can you delete them and their tests?"
"2022-11-04 09:14:35.136671+00","Makes sense to return an error I think.  nit: Maybe 404 is a better code?"
"2022-11-04 09:16:29.832489+00","Resolving this for now. I will create a Linear issue for documenting on how to write better comments and the similar"
"2022-11-04 09:20:07.679321+00","Looks like this was copied from batches init? Might want to reword it a little"
"2022-11-04 09:23:44.254377+00","I agree, I wouldn't add `@spec` to test / setup functions"
"2022-11-04 10:22:15.767625+00","All feedback is Addressed. I just have one inquiry.  Doesn't the idea of limiting possibilities being talked of in the case of the `atom()` work here? `Let's limit the possible atom that can be passed here...`"
"2022-11-04 09:26:04.050945+00","I would think about permissions all together. We can use query functions to limit the access of what they can see.  Example, instead of checking if a developer has access to each ticket, it's better to just limit the tickets to his `developer_id`.  I feel that we duplicated both permissions and queries"
"2022-11-04 09:26:46.911429+00","Could we add a link here? We have the section now 🙂 "
"2022-11-04 09:29:08.552479+00","When we lose the ctx it is gone. So this is great for just enabling in a request. If we find we need this to propogate over RPC then I think we just need to implement that like we do for propogating actor."
"2022-11-04 09:31:18.095669+00","If we remove the `:` here, this solves [PD-42](https://linear.app/gitstart/issue/PD-42/developers-remove-the-in-the-short-answer-is-near-the-top)"
"2022-11-04 09:36:07.622587+00","Thanks for the examples! I'll take another look."
"2022-11-04 09:42:09.83262+00","@rwagatenga the `envelopeId` is already being validated on the `getEnvelopeRecipients` controller before the services is called i don't know if we need to another validation in the service it self"
"2022-11-04 09:49:05.577493+00","```suggestion     ticket_changeset = Ticket.update_status_changeset(ticket, :canceled)      pull_requests_to_cancel_query =       PullRequest.where_ticket_id(PullRequest.base_query(), ticket.id)      Ecto.Multi.new()     |> Ecto.Multi.update(:ticket, ticket_changeset)     |> Ecto.Multi.all(:pull_requests, pull_requests_to_cancel_query)     |> Ecto.Multi.merge(fn %{pull_requests: pull_request} ->       Enum.reduce(pull_requests, Ecto.Multi.new(), fn %PullRequest{} = pull_request,                                                       %Ecto.Multi{} = multi ->         Ecto.Multi.run(multi, {:pull_request, pull_request.id}, fn _repo, _changes ->           PullRequests.update_status(pull_request, :canceled)         end)       end)     end)     |> Repo.transaction()     |> case do       {:ok, %{ticket: %Ticket{} = ticket}} -> {:ok, ticket}       {:error, _name, changeset_or_error, _changes} -> {:error, changeset_or_error}     end ```"
"2022-11-04 09:49:05.645111+00","I would verify that the ticket indeed has an initial status and our fn changed it ```suggestion assert ticket.status == :in_progress ```"
"2022-11-04 09:55:04.357144+00","Hmm not sure if it's any smarter, some maybe slightly more readable form might be  ```sql SELECT u.id FROM users u JOIN user_external_accounts uea ON uea.user_id = u.id WHERE 	u.id IN ( 		SELECT user_id FROM user_external_accounts GROUP BY user_id HAVING COUNT(*) = 1 	) 	AND 	uea.service_type = 'sg' 	AND 	u.created_at <= NOW() - interval '10 day'; ```"
"2022-11-04 09:58:19.619961+00","Possibly set different initial statuses for the pull requests as well (e.g. one is in progress, one is finished, one is cancelled already)"
"2022-11-04 09:59:05.45996+00","I think even with the changed semantics, the query will work as you want it to work.  I do not expect a situation, where our SG operator has a user account, that is also linked to other provider than the `sourcegraph-operator` one. So it should be safe to delete all the user accounts, that have that service_type attached, regardless of if it's the only one or if there are more (which should never happen in my book)."
"2022-11-04 09:59:33.018113+00","I suggested using workers even on the initial RFC, so +1 on this idea 👍 "
"2022-11-04 11:26:18.040573+00","highlight.Code handles binary and returns an ErrBinary error, this can e checked on further down. I don't think we should just return an empty result and no error though, as highlighting a binary file _is_ indeed not correct. "
"2022-11-04 10:01:13.55247+00",">I do not expect a situation, where our SG operator has a user account, that is also linked to other provider than the sourcegraph-operator one.  S2 😛 "
"2022-11-04 10:05:37.044642+00","PR desciption says that's expected though:  > It skips users that have external accounts connected other than service type ""sourcegraph-operator"" because we need to handle the special case of S2 (where Sourcegraph operators have both regular Okta and SOAP external accounts connected)."
"2022-11-04 10:06:41.34285+00","@usmailaabdoul client said that The reason why we separate the logic into services and controllers is that the services might be reused somewhere else. An inexperienced developer might be using the service in the future and forget to perform validation. So we always perform validation in the router using express validator and also in services and controllers. This is true for all services across all repos we maintain. In this particular case you use need to make sure that envelopeId is defined and is a valid mongo ID."
"2022-11-04 10:07:02.162495+00","no error handling or loading state?"
"2022-11-04 10:08:05.36917+00","ok thanks @rwagatenga  this makes sense"
"2022-11-04 10:19:03.59258+00","@rwagatenga, I guess the client meant the validation, but its already done :smile:  cc: @usmailaabdoul "
"2022-11-04 10:20:06.216668+00","yeah @sheldon-welinga i just added extra checks on the services"
"2022-11-04 10:23:30.302234+00","@FaridGitStart order of import by ASC just move it to top of `EnvelopeService`"
"2022-11-04 10:24:29.805682+00","you can use the git ref name instead of the commit hash for GitHub blob links. ```suggestion - Upstream repository (or Client repository): refer to [this section](https://github.com/Murcul/docs/blob/main/wiki/hq/glossary.md#client-repository) of the glossary ```"
"2022-11-04 10:25:21.420545+00","Synonyms/semantics nit: ```suggestion - Pull job: pulling the *default branch* (e.g.: `main`, `master`, `next`) of the Upstream repository into the *default branch* of the Sliced repository; for additional information see [the second GitSlice invariant](#invariants) ```"
"2022-11-04 10:26:19.732492+00","```suggestion - Slice(d) repository (or Repository slice): refer to [this section](https://github.com/Murcul/docs/blob/main/wiki/hq/glossary.md#repository-slice) of the glossary ```"
"2022-11-04 10:34:23.36917+00","It seems that this test is made redundant by this [one](https://github.com/Murcul/equanimity/blob/b75ab4d9edfd08c79e8950d6cc32e64ff8eb96cc/test/gitstart_engine/tickets_test.exs#L631)"
"2022-11-04 10:36:08.81255+00","```suggestion ```"
"2022-11-04 10:53:13.547553+00","Alright, the worker version pushed!"
"2022-11-04 11:00:39.112491+00","rouge log :]"
"2022-11-04 11:19:48.952481+00","@rwagatenga ok. to consider the order the EnvelopeService should be after EnvelopeDocument... as well. right?"
"2022-11-04 11:26:17.73649+00","graphql-go needs these helper methods to determine the right __typename of the interface implementation that is returned here. It does that by putting all the ToXX methods in a map. From that map, it asks every ToXX method if it is of that type. Since maps are not deterministic in ordering, this can cause a file to be either a batch changes file or a virtual file, at random. So we cannot ever return true here. If you need to map this to a virtual file for the other methods in here, you have to create a new virtual file resolver in the actual field getter methods."
"2022-11-04 11:26:17.817751+00","You can define a fragment in the GQL query with the name `BatchSpecFileFields` or so, the codegen will then generate this interface for you and make sure that everything is properly typed."
"2022-11-04 11:26:17.890658+00","I think we should only fetch the `highlight` field when the file is actually viewed. (and maybe even the whole ""files"" field) - The highlighting code path can be slow, so if there are 10s of files, the response will likely be very slow - Highlighting produces very verbose data, which means this query has to transmit a ton of bytes over the network"
"2022-11-04 11:26:18.238454+00","```suggestion 		// and it's not a valid graphql.ID. ```"
"2022-11-04 11:26:18.663443+00","Do we ever issue URLs with the rand ID in plain text anywhere?"
"2022-11-04 11:26:18.679648+00","is there no library function for this available?  Also I think it should be `MB`."
"2022-11-04 11:26:18.70248+00","how come we need to overwrite button styles? are the global ones not sufficient?"
"2022-11-04 11:26:21.058856+00","size: 0 seems like a lie 😛  Maybe: ```suggestion         size: spec.OriginalInput.length, ``` (although it's not always a 1-1 mapping.. sigh)"
"2022-11-04 11:26:30.442478+00","""Fully replaces the current one"" gives the assumption that there's a current URL. Is this the case?"
"2022-11-04 11:26:30.784847+00","```suggestion       throw new JacksonError('Please provide rawMetadata or encodedRawMetadata or metadataUrl', 400); ```"
"2022-11-04 11:26:31.582471+00","Is it possible to have a better error(message)?"
"2022-11-04 11:29:29.523939+00","This works for most cases, except when special characters that are allowed in HTML `input` element such as `e`, in which it would not be ideal to set `null` value here.  IMO we should add a new assertion before this one, to check if `event.target.value` is an empty string instead.  https://user-images.githubusercontent.com/45232708/199962242-6f6aafa2-6523-4a92-97ae-0405c886de33.mov  "
"2022-11-04 11:32:20.347905+00","Duh, thanks for catching that!   Yeah I am not sure about this either.   > Environment variable names used by the utilities in the Shell and Utilities volume of IEEE Std 1003.1-2001 consist solely of uppercase letters, digits, and the '_' (underscore) from the characters defined in Portable Character Set and do not begin with a digit. Other characters may be permitted by an implementation; applications shall tolerate the presence of such names.  I kinda followed this guide, but it might be too restrictive in the end. Since we pass the env vars to the shell, it might be that some exotic ones wouldn't work though.  Happy to make it more lax, if you have any suggestion what would be good to cover as well, for now I was mostly scared that people put in invalid values and that breaks execution 😬 "
"2022-11-04 11:32:49.544444+00","Let's take out these excess spaces here please @hmncube  add next line, instead of tab/spaces."
"2022-11-04 11:33:04.884974+00","It felt the most consistent. It checks if the user has access to the global namespace, so I don't think the naming is off. I can switch if it bothers you"
"2022-11-04 11:35:25.539393+00","`Unknown type: GitstartEngine.Tickets.Ticket.possible_statuses` This type does not exist yet. Please create it following my previous comment"
"2022-11-04 11:35:25.698491+00","```suggestion   @spec update_status(Ticket.t(), Ticket.possible_statuses()) :: {:ok, Ticket.t()} | {:error, Ecto.Changeset.t()} ```"
"2022-11-04 11:35:25.693983+00","This custom type not created yet"
"2022-11-04 11:36:27.776016+00","No there is no need for that here"
"2022-11-04 11:39:22.552779+00","Can we have this return a `map()`"
"2022-11-04 12:38:58.497194+00","That was a bug! "
"2022-11-04 12:44:01.812478+00","Can you add a quick entry to `doc/admin/workers.md` to explain what this one does?"
"2022-11-04 12:58:25.56763+00","didn't we talk about exposing the transaction from `withAggregate` instead of explicitly requiring callers to create one and trusting them to correctly pass it in?"
"2022-11-04 13:00:20.19249+00","we did, and i agree, but i can only do that once the transactional behavior is enabled globally.  these callers are explicitly opting into transactions regardless of whether automatic transactions are enabled"
"2022-11-04 13:02:07.966752+00","aha! touché sir"
"2022-11-04 13:02:34.274774+00","> Suggestion   link the GitHub issue"
"2022-11-04 14:45:15.42989+00","🤦‍♀️ "
"2022-11-04 13:03:36.223512+00","it looks like you can just dispatch relay requested, then conditionally dispatch slaDelayEvent, and skip the early bailout ```suggestion                     await agg.dispatchEvent(delayRequestedEvent);                                          if (auto_approved) {                         await agg.dispatchEvent(slaDelayEvent);                     } ```"
"2022-11-04 13:56:28.932487+00","TIL this lib is intended for Node Backend apps and not for browser apps and we should use axios. I'll see if I can update it"
"2022-11-04 14:01:46.781331+00","not really sure we need two feature flags - we can just segment on org id in LD, but I'm ok with this for now since it's easy to change later if needed."
"2022-11-04 14:16:54.097916+00","```suggestion             headers.append('X-Sourcegraph-Override-Feature', feature) ```"
"2022-11-04 14:17:32.995243+00","Oh nvm ... I see the previous one is lowercase too 😵 "
"2022-11-04 14:20:44.192498+00","Isn't there a `Date` type? Why are these numbers instead?"
"2022-11-04 14:22:27.545879+00","Given recent timezone issues and issues with the hour of the appointment - did you test that here?   More broadly, what other testing did you do for this change? Is there a quick unit test we can write too? "
"2022-11-04 14:39:31.984443+00","My guess would be that this is a UNIX timestamp."
"2022-11-04 14:42:04.900154+00","It would be easier to test if we exported the method from this file, instead of assigning the output of a closure to a variable."
"2022-11-04 14:52:25.627117+00","I'll move out and write unit tests for it"
"2022-11-04 14:52:35.725362+00","@FaridGitStart check if this would be helpful ```suggestion       return await EnvelopeAccess.findOne({ _id: Types.ObjectId(envelopeAccessId), envelopeId }).lean(); ```"
"2022-11-04 14:52:35.68722+00","@FaridGitStart not really just move it to the top it won't change any of your implementation"
"2022-11-04 14:54:49.382518+00","Why did we home-roll a phone number formatter? There are packages that do this.  Are you sure all phone numbers will have exactly the above prefix? In other words, there won't be any spacing or gaps, or perhaps a missing plus sign? How do you know that we always have to strip 2 characters without trimming whitespace?"
"2022-11-04 14:54:49.727624+00","The cast here is a little weird. What are we casting from? What's the compiler error if we eliminate the middle cast?"
"2022-11-04 14:54:50.733995+00","Is the issue here that birthdate was a naive datetime that's actually in UTC?  Not blocking, but we should be trying to do data coercion on the models and not in the UI."
"2022-11-04 14:54:51.380126+00","It would be helpful if we also had property level docs on the model in the service file."
"2022-11-04 14:58:46.914316+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion , all_dates AS (     (         SELECT             prospect_id AS identifiers__prospect_id             , timestamp::DATE AS event_date             , event         FROM event_log         WHERE event IN ('AQL', 'MQL', 'Engaged', 'Demo Request', 'Bizible Touchpoint')             AND prospect_id IS NOT NULL     )     UNION     (         SELECT             prospects.identifiers__prospect_id             , event_log.timestamp::DATE AS event_date             , event_log.event         FROM prospects         LEFT OUTER JOIN event_log             ON prospects.identifiers__account_id = event_log.account_id         WHERE             event_log.event IN (                 'Opportunity Created' , 'Intro Meeting Set' , 'Sale Complete' , 'Opportunity Closed Won' , 'Opportunity Closed Lost'             )     )     UNION     (         SELECT             prospects.identifiers__prospect_id             , pursuits.first_open_event_at::DATE AS event_date             , pursuits.pursuit_attribution || ' Sales Pursuit Started' AS event         FROM pursuits         LEFT OUTER JOIN prospects             ON pursuits.account_id = prospects.identifiers__account_id     )     UNION     (         SELECT             prospects.identifiers__prospect_id             , prospects.sales_accepted_date::DATE AS event_date             , 'Sales Accepted'         FROM prospects         WHERE prospects.sales_accepted_date IS NOT NULL     ) ``` "
"2022-11-04 15:03:26.572485+00","@keegancsmith I made this optional, otherwise the amount of places you have to update explodes"
"2022-11-04 15:06:09.062503+00","I'm trying to find a solution for this error to  replace this any ![iterator error](https://user-images.githubusercontent.com/87545086/200008173-56d14627-9a4a-49ad-9cb7-b777ab9d0af6.png) "
"2022-11-04 15:13:51.762587+00","`const continuousOutputInterval` was prior to a bunch of awaited calls, and `clearInterval` was after all the awaited calls."
"2022-11-04 15:14:20.565178+00","```suggestion 		opts := github.RepositoryListOptions{ ``` Minor but for consistency"
"2022-11-04 15:14:41.130576+00","```suggestion 			rs, resp, err := g.c.Repositories.List(ctx, strings.Replace(g.def.Path, ""@"", """", 1), &opts) ``` If the previous change is accepted 👯 "
"2022-11-04 15:17:10.402962+00","Question: Should this menu item be hidden when executors are not configured?  That could leave a weird state where they were enabled in the past and now you cannot access and delete your existing secrets anymore. Hence, I'm leaning towards always showing it. What do people think? "
"2022-11-04 15:19:29.93248+00","yeah i just saw it in two places and made it one :D   i'm pretty sure the functionality is the same... should I put it back the way it was? "
"2022-11-04 16:42:12.378091+00","The type of `patientFormData.birthDate` is `PartialObjectDeep<Date>`. There is no compiler error as far as I can tell, but I'll need to test the flow to make sure it works."
"2022-11-04 15:19:40.53133+00","@rwagatenga this casting is not necessary as it is done by mongoose itself. "
"2022-11-04 15:24:56.077662+00","i guess i'm just confused because the output still scrolls...    are you saying what I have shouldn't work?   "
"2022-11-04 15:50:07.332133+00","jk one bad ref ```suggestion ```"
"2022-11-04 16:05:59.712496+00","In this file I only added the ""cityArray"" to be able to use it as a prop"
"2022-11-04 15:45:05.02065+00","Yes, when you change the xml it fully replaces the previous one regardless if you used a url or not @v1b3m "
"2022-11-04 16:07:17.212512+00","unit tests added"
"2022-11-04 16:07:27.232698+00","To install the city-timezones dependency I needed to disable this lint check, I saw that it had in other files too"
"2022-11-04 16:18:18.252477+00","> @hamirmahal Blame M$, if I have a choice, I'll set all my editors to put a newline at the end of a file: so much better when I use `cat`. I'm also not a fan of the random \CR\LFs I find, nor whatever zero-width whitespace bytemarker @Colton1skees's files seem to be prefixed with (pretty sure that's also M$ somehow).  maybe it's a [BOM](https://en.wikipedia.org/wiki/Byte_order_mark)?"
"2022-11-04 16:29:43.697421+00","@georgekronberg yup, that's the one"
"2022-11-04 16:42:39.821854+00","adding a new column with a default value is an expensive operation in our version of postgres, because it will lock the whole table in order to re-write every row with said default. (thankfully this has been improved in newer versions, which we'll be upgrading to in the foreseeable future).  what do you think of instead making this nullable, without a default, and implicitly treat null as false?  since the creation event reducer does `invite_sent: event.data.invite_sent ?? false`, in practice you'll still end up with a value in every field within an hour or so of the deploy.  (at that point you could optionally do a followup pr / migration to mark the field non-nullable if you want)"
"2022-11-04 16:45:29.712385+00","I think this was done to prevent automatically converting the UTC date to a local date. Birthdate selected by the patient is saved as 00:00:00.000Z, so when being displayed there was an issue where the date was changed to a day before. @ionutmiftode can say more."
"2022-11-04 16:49:56.122421+00","Right now on the UI the input only accepts US numbers, and the +1 was automatically added by the component. However, we have issues on the backend because the numbers are saved without the prefix both on NexHealth, and then in our database. When querying database / NexHealth by the patient's phone number, no results were being returned because of the prefix.   Before this function is called, phone number goes through a different function within the component that removes all the special characters, whitespace etc. "
"2022-11-04 16:52:27.337368+00","Yes of course!"
"2022-11-04 16:54:53.163747+00","@pdamir again, why didn't we use a phone number package? There are many."
"2022-11-04 17:05:31.742581+00","```suggestion   const [cityArray, setCityArray] = useState<CityData[]>([]); ``` Let's use a better type here"
"2022-11-04 17:05:31.555278+00","We should use an import statement at the top of the file instead of this require  `import cityTimezones, { CityData } from ""city-timezones"";`  The CityData is for a better type definition for the cityArray state (line 15)"
"2022-11-04 17:10:47.612477+00","@IceCreamYou  Please correct me if I am wrong. I understood it as the distribution chart gets rendered in a lazy loading method and that is when we pull in the histogram data. Moreover, we need the bucket size for the interval from the stats prior to computing the histogram and thus, the query for histogram needs to be separate. What I did in my incoming update for this PR is to compute the bucket size for each measurements so @jonboiser can use it for [WEB-2095](https://instrumental-inc.atlassian.net/browse/WEB-2095). 🤓"
"2022-11-04 17:31:54.54772+00","The bug is here. ```suggestion     if(step.id === Number(stepId)) return true ```"
"2022-11-04 17:55:20.795011+00","Can we bypass the call to `findMatchingItemsForDesignRule` if `this.getInFlightOrdersWithItems()` returns nothing?"
"2022-11-04 17:57:14.741659+00","__Just a thought__. We don't need to encapsulate functions inside of a class unless we are working with dependency injection. You can just export the individual functions and then where you import them, alias the import. `import * as RoutingDataUtils`"
"2022-11-04 18:10:40.482499+00","No. However, from my conversation with Randell, the executors might need to access some of these files and it'll do that via this handler here."
"2022-11-04 18:16:29.082497+00","and the executor is using numeric IDs?"
"2022-11-04 18:21:23.582478+00","I will address this in a separate ticket [WEB-2093](https://instrumental-inc.atlassian.net/browse/WEB-2093). "
"2022-11-04 18:29:26.297861+00","yes. Overlooked this one when I changed it from Keyed object to Array.😕"
"2022-11-04 18:33:26.152493+00","I made the changes now, thanks 👍 "
"2022-11-04 18:35:38.744307+00","Trying to get some context on why this was added, could you help clarify?"
"2022-11-04 18:36:43.402482+00","` return response?.data;` <- we should null check the response dict"
"2022-11-04 18:37:59.212482+00"," `new OrthlyLogger('dialpad-sms', {status_code: response?.status_code, response: response} );`"
"2022-11-04 18:41:25.515557+00","- [x] Rename to `IncludeNeverActive`"
"2022-11-04 18:48:40.586151+00","This is off by 1px. You can use `calc` to get the box width equal to the `<li>` width  ``` width: calc(100% - 47px - 30px) ```  <img width=""222"" alt=""CleanShot 2022-11-04 at 11 46 00@2x"" src=""https://user-images.githubusercontent.com/10248067/200052549-125f9bf9-2fc9-4a6e-9a93-8d2706e3c145.png"">"
"2022-11-04 18:51:44.402798+00","```suggestion Add prefix to control authoritative GCS paths as we might set upload_id to NULL now ```"
"2022-11-04 18:57:26.800938+00","TODO here"
"2022-11-04 18:57:26.867901+00","I haven't seen `%q` before, and I don't see any hits in the sqlf repo, so make sure that's what you intended.  <img width=""737"" alt=""CleanShot 2022-11-04 at 12 04 16@2x"" src=""https://user-images.githubusercontent.com/1387653/200045240-97ddc25a-b3ce-4a04-a90e-693053001db6.png"">  "
"2022-11-04 18:57:56.972467+00","Updated :)"
"2022-11-04 18:58:06.290169+00","IT IS NOT"
"2022-11-04 19:00:06.68124+00","for the record i don't like this, quick and dirty here"
"2022-11-04 18:41:25.652112+00","- [x] Rename to `includeNeverActive` - [x] Re-document and make it explicit that this parameter is only effective when `inactiveSince` is also provided"
"2022-11-04 19:03:19.761774+00","ALTHOUGH it seems to work 🤷 "
"2022-11-04 19:25:32.717838+00","I ended up changing this to be using MUI radio. It was really simple and is much easier to follow what's happening"
"2022-11-04 21:30:31.362819+00","Yeah much cleaner/easier to read. That was a hefty parameter list to repeat in multiple places"
"2022-11-04 19:29:30.412483+00","There's been some conversation around whether this is Output or Throughput. Mocks show ""Total Throughput"" but [PRD conversation](https://docs.google.com/document/d/177fWGcnmHvhvaT8VpokTZ2G7n5dx-tELxZ83pamGQYc/edit?disco=AAAAhzjaI88) was leaning towards using ""Output"", so that's what I've used here cc @nweidinger "
"2022-11-04 19:29:38.48221+00","This function is quite repetitive, could you handle all these using `useDropdown.tsx`.  You'll just expose the right function."
"2022-11-04 19:29:38.668065+00","Repetitive"
"2022-11-04 19:29:39.626257+00","Same thing here"
"2022-11-04 19:29:38.812557+00","Repetitive"
"2022-11-04 19:30:15.892511+00","I hate that we can only set a transparency level on Typography components by setting it through the `style` props, but making changes to that component seems like it would be a hairy approval and confirmation process"
"2022-11-04 19:35:22.202596+00","Just realized it has to include the time as well. WIP. I will push another update for this. "
"2022-11-04 19:36:33.532489+00","There might be, but I didn't think it was necessary to introduce an additional dependency for something this simple."
"2022-11-04 19:36:48.092491+00","I think it would be better to put this array of measurement types in a variable above so it'll be cleaner."
"2022-11-04 19:38:58.187024+00","```suggestion ```"
"2022-11-04 19:39:27.659083+00","Ok this is moved over to Tabs. See screenshots in description above ^"
"2022-11-04 19:41:03.932483+00","I don't think this much information is necessary for a private function. Really just the top part and the description are all someone would need."
"2022-11-04 21:31:55.669966+00","Is having both `Night Guard` and `Nightguard` intentional?"
"2022-11-04 19:47:08.38832+00","yes, i made it explicit"
"2022-11-04 19:56:08.847917+00","eek. what's going on here?  `isActiveTaskOfType` was previously a type guard, and now you've changed it to return a true/false then cast the return type"
"2022-11-04 20:03:54.493402+00","You know what, I think the path of least resistance here is `excludeNeverActive` with `inactiveSince` including never active users by default  I think thats the direction Thorston had been going anyway and it prevents having to go back and make a more complicated implementation of `inactiveSince` 🤔 "
"2022-11-04 20:03:54.614714+00","Its odd to me that this isn't explicit in the formatting of the code 🤔 -- since this is sort of a sub filter of `inactiveSince` -- but its nested at the same level.   For things to work as intended here it seems like I'd need to change the default behavior of `inactiveSince` as well."
"2022-11-04 20:11:13.722491+00","pulling this type out into an interface will make it easier to read.  ```typescript interface UpdateFeedbackRawData {     order_notes?: string,     raw_saved_items?: Record<         string,         {             notes: string;             tags: Record<string, string>;             chairside_adjustment_minutes: number | null;         }     >,     id?: string,     comment?: string,     chairside_minutes?: number | null,     tags?: Record<string, string> } ```  and then using named arguments for the function here will make it easier to refactor if needed, and easier to not commit a typo in the places it's called.  ```suggestion         ({ order_notes, raw_saved_items, id, comment, chairside_minutes, tags }: UpdateFeedbackRawData) => { ```"
"2022-11-04 20:24:56.82577+00","Is this method thematically the same as the other ""loadX"" functions in the controller? If so, I think it makes sense to rename this (and `listAutomeasureSubscriptions`) to `load...`  ```suggestion     private async loadManualMeasurements(): Promise<MetricsModel.PhysicalMeasurements> { ```"
"2022-11-04 20:24:29.902646+00","the first part is captured with the join with stg_stripe_card_payment_method_combined there are the mappings that we know  for everything that we cannot get from that mapping ... hence the coalesce first from stripe charge and then from stg_stripe_card_payment_method_combined  in the end there were still a few instances left where there was no mapping, these i accounted for in line 93. -96 with a manual mapping"
"2022-11-04 20:24:55.807334+00","I was mixing up ""Accumulator"" and ""Aggregator. The former is the more conventional name for the second argument of `reduce` ```suggestion                     // if this bucket has a totally new measurement, then add it to the accumulator. ```"
"2022-11-04 20:24:55.907747+00","Ah, ESLint indents these ones a little weird because of the opening `{` on line 765. If the `{` were on line 766, it would have fixed it closer to what you had before  ``` defectEsQuery = buildQueryForMeasurementDefectCount(     {         measName: metricName,     },     ... ) ```"
"2022-11-04 20:24:57.668545+00","```suggestion ```"
"2022-11-04 20:24:59.898343+00","```suggestion  * @param query Filters to apply to the query. ```"
"2022-11-04 20:26:36.392479+00","good point"
"2022-11-04 20:24:07.698883+00","`isActiveTaskOfType` previously also returned true/false, so runtime hasn't changed.  The `T` here is always a `T extends TaskType` and `TaskType` is set to be a `SequenceTaskType<SequenceType>>` above. In TS 4.2 you're able to assign `ActiveWorkflowTask<T> = ActiveWorkflowTask<SequenceTaskType<SequenceType>`, which is what makes the type guard work. However, in TS 4.8 the compiler is a bit more strict about things-- it believes that `T extends TaskType` is too narrow to accept an assignment from `SequenceType<SequenceTaskType>` In typescript's words:  > 'SequenceTaskType<SequenceType>' is assignable to the constraint of type 'T', but 'T' could be instantiated with a different subtype of constraint '""CreateTreatmentPlanRequest"" | ""SetTreatmentPlanRequestUrl"" | ""ConvertTreatmentPlanRequest"" | ""FinalizeTreatmentPlanRequest"" | ""ApproveAlignerFabrication"" | ""CreateExternalAlignerFulfillment"" | ... 17 more ... | ""AcknowledgeDelivery""'.   This file is pretty problematic, but it's fortunately the only/most problematic one. Maybe I need to sit down with it for a bit longer to puzzle out how to convince typescript it's okay. "
"2022-11-04 20:27:50.910653+00","added it"
"2022-11-04 20:28:02.2125+00","added it"
"2022-11-04 20:30:36.722857+00","hmm also not if you go to ""files changed"" and refesh? "
"2022-11-04 20:00:14.831161+00","."
"2022-11-04 20:44:47.64596+00","I wanted to separate out by list and load theme so that any list calls just returns datas whereas load calls also request those list calls and sets data to the models. "
"2022-11-04 21:27:57.433828+00","Awesome. It could also be useful to add a test for the opposite condition. (When you expect there to be no notes, check that no notes actually exist)."
"2022-11-07 06:42:51.359177+00","The short answer is that we don't have metrics today, but they are coming.   This is only the beginning of what we have planned since we started the product team approximately one week ago.  There are two urgent things we want to do from a product standpoint:  1. Sunset the old dashboard + Hasura 2. Enable product-led growth, meaning 3 things: clients can use GitStart by themselves (self-serve), automate the processes in the Delivery team, and move towards a community accelerator model.  "
"2022-11-04 20:46:31.36249+00","Having said that, actually, it might make better sense if I convert loadPhysicalMeasurements to 'list' and remove the caching to the model. So the model gets set only in the loadAllMeasurements. What do you think?"
"2022-11-04 20:55:57.942622+00","I agree it is a bit verbose. I added it here because I've had past comments about this info missing in the TSDoc comment block. @aaron-dandy what are your thoughts?"
"2022-11-04 20:55:59.412485+00","this type is used 3 times in the pull request here. pulling it out will simplify this code and reduce the future chance of typos.  ```typescript interface RawSavedItem {     notes: string;     tags: Record<string, string>;     chairside_adjustment_minutes: number | null; } ```"
"2022-11-04 21:03:11.323486+00","Adding this to allow practice users to edit other practice users, @johnmastro. Kinda weird, but we have a fast follow to only allow practice admins to do so (I don't believe we have practice admins today, only internal)."
"2022-11-04 21:20:13.034834+00","🥇 "
"2022-11-04 21:22:19.40246+00","What is the reason for having an empty string at the beginning of this array? ```suggestion                 ...(caseNotes.length > 0 ? [``, `## Additional Notes:`, ...caseNotes] : []) ```"
"2022-11-04 21:27:57.202545+00","What is the reason for having an empty string at the beginning of this array?"
"2022-11-04 21:32:19.403057+00","Is the dark mode review substantially different from the light mode view so that we need both snapshots? We tend to only snapshot light mode unless there are reasons to do dark mode."
"2022-11-04 21:44:24.48306+00","per office hours learning today, we probably won't need `loadId` checks for this page. we can use cancelable apis to cancel search calls when navigating away from the page instead."
"2022-11-04 21:44:24.492303+00","If we only use `role=""list""` instead of `<ol>`, then we can't use `<li>` elements. `<li>` *must* be contained within an `<ol>`, `<ul>` or `<menu>` in HTML. We should use `role=""listitem""` in that case."
"2022-11-04 22:06:06.87648+00","This will return undefined to the event handlers which are specting an array, i think you should validate this before calling the function on the hook"
"2022-11-04 22:09:10.164741+00","I don't think the extra padding is needed, makes the tab look off-center.  ```suggestion                             <Tab key=""Code search basics"">Code search basics</Tab> ```"
"2022-11-04 22:09:10.164609+00","Can we use `column.title` as the key to avoid the eslint override?"
"2022-11-04 22:09:10.291628+00","This doesn't look aligned to me, might need some extra CSS magic here:  ```suggestion                     <div className=""d-flex align-items-baseline justify-content-lg-center my-5"">                         <H4 className={classNames('mr-2 mb-0 pr-2', styles.proTipTitle)}>Pro Tip</H4>                         <Link to=""https://signup.sourcegraph.com/"" onClick={() => eventLogger.log('ClickedOnCloudCTA')}>                             Use Sourcegraph to search across your team's code.                         </Link>                     </div> ```"
"2022-11-04 22:09:11.099072+00","This usage of `!!` doesn't feel intuitive to me. I'd rather change it into something a bit longer but more readable: (and also future-proof if we ever add more columns):  ```suggestion                                             {/* Put reference link at the end of the last column */}                                             {index === exampleSyntaxColumns.length - 1 && ( ```"
"2022-11-04 22:09:11.11526+00","This looks almost the same as the previous part, as well as below. Can we extract to a `QueryExamplesColumn` component?"
"2022-11-04 22:22:24.411591+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion         id ``` "
"2022-11-04 22:22:24.61418+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion         id ``` "
"2022-11-04 22:22:24.62396+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion         id ``` "
"2022-11-04 22:22:24.790893+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion         , bill_lines.account_expense_account_id AS payed_to_acct_id         , payable_account_id AS ap_account_id         , bill_lines.account_expense_class_id::INTEGER AS class_id         , bills.private_note || '; ' || bill_lines.description AS memo         , bills.vendor_id AS vendor_id  ``` "
"2022-11-04 22:22:29.12505+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion         purchases.id ``` "
"2022-11-04 22:22:25.267035+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion         , deposit_from_acct_id AS account_id         , 'credit' AS transaction_type         , 'deposit' AS source ``` "
"2022-11-04 22:22:25.422379+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion         , ap_id AS account_id         , 'debit' AS transaction_type         , 'bill payment' AS source         , null::BIGINT AS class_id ``` "
"2022-11-04 22:22:25.495675+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion         , deposits.account_id AS deposit_to_acct_id         , lines.deposit_account_id AS deposit_from_acct_id         , lines.deposit_class_id AS class_id ``` "
"2022-11-04 22:22:25.57+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion         bill_payments.id         , bill_payments.transaction_date AS txn_date         , CASE WHEN bpl.bill_id IS NOT NULL THEN bpl.amount ELSE -1 * bpl.amount END AS amount         , COALESCE(check_bank_account_id, credit_card_account_id) AS payment_account_id         , COALESCE(payable_account_id, ap.id) AS ap_id  ``` "
"2022-11-04 22:22:26.7181+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion         , payment_account_id AS account_id         , 'credit' AS transaction_type         , 'bill payment' AS source         , null::BIGINT AS class_id ``` "
"2022-11-07 07:39:07.879494+00","It is weird to have the same type (`GitSlicePullJob`) in the input and output level  I think up-sert should be optional, but fully typed. So this API would force you to upsert (which may not be a good idea in the long term). so better create an optional input that allow up-sert to happen, but totally okay if the GitSlice worker does not support up-serting"
"2022-11-04 22:22:27.256984+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion         , ap_account_id AS account_id         , 'credit' AS transaction_type         , 'bill' AS source         , class_id AS class_id         , memo || ' (Credit)' AS memo         , vendor_id AS vendor_id ``` "
"2022-11-04 22:22:33.48487+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion         id ``` "
"2022-11-04 22:22:27.283798+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion ``` "
"2022-11-04 22:22:27.308372+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion         bills.id         , bills.transaction_date AS txn_date ``` "
"2022-11-04 22:22:27.493187+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion         entries.id         , entries.transaction_date AS txn_date ``` "
"2022-11-04 22:22:28.202308+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion         , purchases.transaction_date AS txn_date         , purchase_lines.account_expense_account_id AS payed_to_acct_id         , purchases.account_id AS payed_from_acct_id         , IFF( COALESCE(purchases.credit, false), 'debit', 'credit') AS payed_from_transaction_type         , IFF( COALESCE(purchases.credit, false), 'credit', 'debit') AS payed_to_transaction_type         , purchase_lines.account_expense_class_id AS class_id         , description AS memo         , purchases.vendor_id AS vendor_id ``` "
"2022-11-04 22:22:28.306837+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion         id ``` "
"2022-11-04 22:22:32.460874+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion         , '' AS memo         , lines.vendor_id AS vendor_id ``` "
"2022-11-04 22:22:28.459652+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion         , deposit_to_acct_id AS account_id         , 'debit' AS transaction_type         , 'deposit' AS source ``` "
"2022-11-04 22:22:30.407879+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     INNER JOIN (SELECT id FROM {{ ref('stg_quickbooks__accounts') }} WHERE type = 'Accounts Payable') AS ap ``` "
"2022-11-04 22:22:30.481366+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion ``` "
"2022-11-04 22:22:30.523536+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion         , payed_to_acct_id AS account_id         , 'debit' AS transaction_type         , 'bill' AS source         , class_id AS class_id         , memo || ' (Debit)' AS memo         , vendor_id AS vendor_id ``` "
"2022-11-04 22:22:30.545848+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion         , memo AS memo         , vendor_id AS vendor_id ``` "
"2022-11-07 19:27:16.844282+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     LEFT OUTER JOIN sf_users AS rep ``` "
"2022-11-04 22:22:31.439894+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     , balance AS current_balance     , NULLIF(parent_account_id, '')::INTEGER AS parent_account_id     , account_type AS type     , account_sub_type AS subtype ``` "
"2022-11-04 22:24:38.607796+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion         id ``` "
"2022-11-04 22:24:40.803884+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     id::INTEGER AS id ``` "
"2022-11-04 22:24:40.807356+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion         deposits.id ``` "
"2022-11-04 22:24:42.472535+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion         , LOWER(posting_type) AS transaction_type         , 'journal' AS source ``` "
"2022-11-04 22:24:41.52988+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion         , payed_from_acct_id AS account_id         , payed_from_transaction_type AS transaction_type         , 'purchase' AS source ``` "
"2022-11-04 23:53:32.006162+00","Oh always forget about HTML validation. You're 100% right, I will use role listitem instead of rendering li elements. "
"2022-11-05 00:13:54.335168+00","Nope, it's just for running test but forgot to remove :D"
"2022-11-05 23:13:02.287588+00","The default button doesn't have a border and the font size is different for those. So this just adds that."
"2022-11-05 23:13:38.317899+00","Lol. Fair."
"2022-11-06 00:09:04.812466+00","That's my understanding. @Piszmog Can you clarify?  I tried to check myself but couldn't figure it out exactly."
"2022-11-06 05:41:21.560893+00","Oh, absolutely... thanks for the reminder! I did notice some writings in `doc/admin/workers.md` but forgot to ask what's the process to add/keep-up-to-date 😅 (was kinda expecting a linter in CI)"
"2022-11-06 06:25:35.2884+00","Added in https://github.com/sourcegraph/sourcegraph/pull/43853/commits/fc1638242b4f2ed7ab3f4dd9031b69df628d9db1!"
"2022-11-07 08:03:43.351186+00","```suggestion ``` @Mjanuary Let's nuke comments"
"2022-11-06 08:18:49.608365+00","Let's put the `listMetrics` response into a property on `AppContext` similar to `subscriptionList.value` a few lines up. This will allow us to avoid having to make this potentially slow call more often than needed. Other pages that call listMetrics can use the cached version too if present.  The situations I can think of that invalidate parts of the cache include: 1. Deleting all Data Streams data in the project. Requires full cache clear 2. Changing limits. Easiest to deal with via full cache clear 3. Adding/updating/deleting alert rules. Can update the relevant metric in cache 4. Data being uploaded from outside of the app. Can expire cache after some short time e.g. 1 minute 5. Possible future features for deleting or uploading Data Streams data. Need to keep this in mind  If you make this change, this PR could benefit from another review, but I would be comfortable merging and deploying it without waiting for the precompute backend to get deployed. (We did come up with an approach that should let us roll it out on all projects.) If you do not make this change, please file a story for it, and let's wait to merge/deploy this PR until the precompute backend is available."
"2022-11-06 14:34:23.655594+00","Just found it, the executor doesn't use numeric IDs, however, it sends the [unmarshalled rand IDs here](https://sourcegraph.sourcegraph.com/github.com/sourcegraph/sourcegraph/-/blob/enterprise/cmd/frontend/internal/executorqueue/queues/batches/transform.go?L128)."
"2022-11-06 14:35:56.881718+00","Refactoring to get the highlighted file from the REST API as originally planned. That'll remove the need for this check here and we'll only fetch `non-binary` files from the UI."
"2022-11-06 14:36:37.242472+00","Moving the logic for fetching the highlighted files into the REST API as originally planned."
"2022-11-06 14:47:47.202489+00","Got it. I'll make the required changes."
"2022-11-06 15:58:51.470076+00","REST doesn’t support highlighted files today. I am not sure there is a lot of value in adding that to REST when it already exists in GQL, it’s already formatted so that we can safely send it over the JSON flavored wire. "
"2022-11-06 17:25:57.341263+00","Gotcha!"
"2022-11-06 23:13:09.343351+00","Gotcha. "
"2022-11-07 04:43:23.081536+00","@usmailaabdoul Always use `Object.values`. The same applies to other routes as well ```suggestion     .isIn(Object.values(EnvelopeRecipientTypeEnum)), ```"
"2022-11-07 01:11:22.413244+00","That makes sense."
"2022-11-07 03:25:09.027136+00","What does this refer to? Isn't the current pricing done at PR level?"
"2022-11-07 03:39:57.006999+00","The error types from the results are what end up in the body of the `OrderEntryJobFailedEvent` - previously, we were inserting the entire AxiosError object into this event, which caused class-transformer to explode (and even if it had been successful, we would've generated massive event objects).  For the sentry-reported error, see: https://teamorthly.slack.com/archives/C041H0K5L67/p1667496558204159"
"2022-11-07 03:59:16.82332+00","Yes, credit pricing happens at PR level, but when we convert credits to usd we still do calculation depending on which instance is being addressed. WE want to remove this. I updated the comment again"
"2022-11-07 04:43:22.187615+00","@usmailaabdoul This is not needed. Just use the group value from headers. The same applies to other endpoints as well"
"2022-11-07 04:43:22.358051+00","@usmailaabdoul Just use `getEnvelopeByIdAndGroup`. Don't need to have another method ```suggestion       const envelope = await EnvelopeService.getEnvelopeByIdAndGroup(envelopeId, group); ```"
"2022-11-07 08:07:15.732002+00","> (was kinda expecting a linter in CI)  Feel free to add one 😬   There's also the `Description() string` methods on each `job.Job` that are essentially unused. We could probably move the description from the Markdown file over to those methods and then ✨ _somehow_ ✨ auto-generate the Markdown file."
"2022-11-07 05:24:42.854593+00","I deleted this pattern as it was unused after my changes"
"2022-11-07 05:28:42.472487+00","```suggestion 			if (file.title_link == null || file.title_link == undefined) { 			    return; 			} ```  I think a check above is required, if in worst case the link won't break the app if it is null. @m-ubaid-77   cc: @hakeem-gitstart @hmncube "
"2022-11-07 05:36:06.000174+00","@debojyoti452 `file.title_link?` optional chaining is used so there would be no issue. we can not place return because if in case title_link is null it will show a default reply card which was happening before."
"2022-11-07 05:40:52.783354+00","Already added comment so that others can understand why this check is placed. Is there any instruction available to adding link of GitHub issue?"
"2022-11-07 05:48:05.874609+00","Okay gotcha.. approving the PR"
"2022-11-07 06:15:33.238213+00","I gave feedback to Corentin about the hand-off to the growth team.  I think the growth team should be involved in the metrics that indicate if the feature was a success (achieved the metrics).  How do we define these ""success metrics""?  There is a framework that I used before in order to align the product with company's goals. We should strive to do things that move the metrics of the company. [This video](https://www.youtube.com/watch?v=kJIBAp48Pv8) explains it well.  - What is our primary metric? - What are our secondary metrics?  Are the things that we are going to develop (roadmap) aligned with the key metrics that we track?"
"2022-11-07 06:28:38.827618+00","I assume `{:ok, :something}` can return any type as the `:something`, but for `{:error, :reason}`, the `:reason` must be an atom? I think it's better to specify that so everyone uses an atom for the reason. "
"2022-11-07 06:31:18.635901+00","```suggestion   # This is the default middleware ``` nit"
"2022-11-07 06:46:44.495023+00","In short, yes. Most likely another project if the scope of changes is big enough, and it's decided at the product team level that improving or changing an already-launched item is a priority.   "
"2022-11-07 06:48:47.509234+00","Added this to the FAQ!"
"2022-11-07 06:55:11.394008+00","Correct, there will be no sprint planning meetings the way they used to be done in engineering.   With the product release framework, in a nutshell: - The project you are in is of strategic importance to GitStart, and the main thing we want to ensure gets done. The project team must determine how to best assign and prioritize work within that small team.  - The ""horizontal"" teams  (i.e., Product, Delivery, Community, Product Engineering, Platform Engineering) are still very much present and vital and will still have their duties and projects. If it makes sense for your team to meet, plan and coordinate things that only concern your team (let's say Product Engineering), then you should have them."
"2022-11-07 07:11:35.98593+00","Does it make sense to always have an atom as the reason in case the opearation errors? Maybe sometimes it would be more useful to have something like a string such that we can offer  a more detailed message."
"2022-11-07 07:11:59.910655+00","```suggestion   @spec maybe_mark_pull_request_for_internal_review(Ecto.Multi.t(), PullRequest.t()) :: Ecto.Multi.t() ```"
"2022-11-07 14:45:39.621947+00","Use values other than the defaults, that would be better for testing, Defaults should covered in the second test"
"2022-11-07 20:15:00.932235+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion WHERE _fivetran_deleted = false ``` "
"2022-11-07 07:15:16.948049+00","Would it be possible to have something like this:  ```suggestion with {:ok, %Ticket{} = ticket} <- Tickets.get_ticket(ticket_internal_id),      {:ok, %PullRequest{} = pr} <- PullRequests.get_pull_request(pull_request_id)      {:ok, %PullRequest{} = updated_pr} <- do_something_with_pull_request(ticket, pr) do   {:ok, %PullRequest{} = updated_pr} ```  in order to check the type as well? 🤔 "
"2022-11-07 07:17:37.528576+00","```suggestion collective knowledge that was acquired so far. Following these conventions makes the code easier to ```"
"2022-11-07 07:17:39.5314+00","It works as a code that other parts of the system can parse faster than a string. The conversion to a string with a detailed message can also be handled by other parts too, such as the resolvers."
"2022-11-07 07:18:22.642579+00","@ishmam-mahmud, is there a reason why this function should raise instead of returning `nil`?  cc @tristantreb "
"2022-11-07 07:20:28.722512+00","```suggestion   @spec list_client_monthly_invoices_with_items(String.t()) :: list(ClientMonthlyInvoice.t()) ```"
"2022-11-07 07:20:28.758321+00","```suggestion   @spec create_invoice_in_stripe(String.t(), Date.t()) :: :ok ```"
"2022-11-07 07:20:28.819706+00","```suggestion   @spec get_client_monthly_invoice_with_items!(String.t(), Date.t()) ::           ClientMonthlyInvoice.t() ```"
"2022-11-07 07:20:29.528822+00","```suggestion   @type status :: :draft | :open | :paid | :void | :uncollectible | :deleted ```"
"2022-11-07 07:20:29.682292+00","```suggestion   @spec create_invoice_for_client(String.t()) :: ```"
"2022-11-07 07:21:52.093493+00","I'm assuming there's an expectation that it will always exist... Tho I can see it not existing if say the start_date is in the future. So I'm not sure if we should let that just cause a raise like this"
"2022-11-07 07:23:35.214+00","```suggestion   def set_status_to_paid(id) when is_binary(id) do ```  Due to the fact that it returns an error instead of raising if the operation fails."
"2022-11-07 07:51:50.454109+00","@Mjanuary I think we should also add `default: Date.now` for this"
"2022-11-07 07:53:16.195374+00","```suggestion     createdAt: {     type: Date,     default: Date.now,   }, ``` @Mjanuary I think we need to add the default for Date types."
"2022-11-07 07:54:15.03294+00","```suggestion }  ``` @Mjanuary Can you add a line space at the end of the code"
"2022-11-07 07:53:59.735519+00","Here we check if the parent span is outdated."
"2022-11-07 08:12:06.970563+00","```suggestion # Install Microsoft's git fork, see: https://github.com/microsoft/git#other-distributions ```"
"2022-11-07 08:12:07.494676+00","Nit: I think this file would be better named `Dockerfile.microsoft.git`. We use `.` instead of `_` in Dockerfile names (see [this query, for example](https://sourcegraph.sourcegraph.com/search?q=context%3Aglobal+repo%3Asourcegraph+file%3ADockerfile+and+%28not+file%3ADockerfile%24%29&patternType=standard&groupBy=repo)) and let's avoid acronyms :)"
"2022-11-07 08:12:07.987381+00","```suggestion     '--microsoft-git')  DOCKERFILE=""cmd/gitserver/Dockerfile_ms_git"";; ```  Think of all the future code search users 😄  "
"2022-11-07 08:13:53.570024+00","```suggestion ``` @Mjanuary Let's nuke comments"
"2022-11-07 08:17:39.914413+00","```suggestion const Database = require('@bluemeg/database').default; ``` @Mjanuary Please let's revert this code. You can include the dependency in the PR description. Also, changes can be done on your local instance to test but don't push file change."
"2022-11-07 08:20:28.193647+00","@Mjanuary revert this line change"
"2022-11-07 08:22:19.888965+00","@Mjanuary Let's revert comments"
"2022-11-07 08:24:09.860898+00","Yes, definitely possible. I currently do not have a preference.  I think there are some benefits to have the struct in the pattern match like language server autocompletion"
"2022-11-07 09:22:50.623997+00","This code does not look OK to me.   `window` should always be defined in a browser context. Do we ever run this code outside of browser, e.g. E2E tests?   I also think the code would be more readable if we provide a default here, e.g.: ```suggestion         ...window?.context?.xhrHeaders || {}, ```"
"2022-11-07 09:22:50.685489+00","Why do we want to limit ourselves to just the value `1` here? Wouldn't it be more beneficial to accept `true` as well for example?"
"2022-11-07 09:32:26.674077+00","We don't need that check anymore, I assume?"
"2022-11-07 09:38:56.66558+00","@FaridGitStart Please let's revert this to where it was."
"2022-11-07 09:43:02.242492+00","```suggestion   it(""1. onBlur and onFocus should be triggered from the input widget"", () => { ```"
"2022-11-07 09:43:03.132485+00","```suggestion   it(""3. onBlur and onFocus should be triggered from the currency input widget"", () => { ```"
"2022-11-07 09:43:35.189792+00","This is more conventional:  ```suggestion         webhook: ID ```  See [the other references](https://sourcegraph.sourcegraph.com/search?q=context%3Aglobal+%3A+ID+file%3Aschema%5C.graphql%24+repo%3Asourcegraph%24&patternType=standard&groupBy=repo) in our schema."
"2022-11-07 09:53:16.319011+00","Was getting `data` doesn't exist on `event.nativeEvent` so  removed `ChangeEvent<HTMLInputElement`. WDYT would be good type ?"
"2022-11-07 14:45:40.350439+00","Wrap in a try-catch block"
"2022-11-07 09:59:58.807255+00","Same as above"
"2022-11-07 09:59:59.329942+00","I think we talked on our zoom call, that this metric is basically defined per user/repo. So adding the id here similar to above would be IMO beneficial for analysis on which users/repos have the oldest perms."
"2022-11-07 09:59:59.912118+00","I think we can define this metric per user, repo (or add additional metric), similar to the metrics above for `src_repoupdater_perms_syncer_perms_found`. That way we can track if a specific repo/user gets scheduled for a sync.  I would also add the same type of metric (per repo, per user) for the following events: - sync failure - sync success  That way, we would be able to track the whole lifecycle of specific user or repo based on just metric data, without looking into the logs."
"2022-11-07 10:02:04.593949+00","yep, I forgot about this type, will change it, thanks!"
"2022-11-07 10:14:45.539687+00","Sorry you have a good point and this wasn't preserving behaviour my bad. FYI I was copying how we did it somewhere else. I'll update so it is equivalent, except I'll leave off the header if the param is unset (this feels more correct knowing how the backend works)"
"2022-11-07 10:14:45.967783+00","Look at the old code, I'm just copying what was done before. I have no idea if it is ok :) I was just confused why switching from the `{ [header: string]: string }` type to `Headers` caused the breakage. (I see your explanation of node v16 vs v18, and that makes sense I suppose. I don't know enough about our frontend stack to comment otherwise)"
"2022-11-07 20:26:46.573072+00","jsdoc format: ```suggestion      * The card type of the active unit. ```"
"2022-11-07 10:53:14.15095+00","same here?"
"2022-11-07 10:53:14.392937+00","I am not sure what this code does? why are we comparing index?"
"2022-11-07 10:57:38.036179+00","I think this could be generalized to something like ""where_field_is_nil"". Same idea as [here](https://github.com/Murcul/equanimity/blob/dev/lib/gitstart_engine/instances/instance.ex#L145)"
"2022-11-07 10:59:19.125584+00","Nope, removing that is part of the user-added code/org-code removal"
"2022-11-07 11:03:26.148142+00","Amazing cleanup!"
"2022-11-07 11:17:42.78941+00","```suggestion 		filteredWebhookLogs = append(filteredWebhookLogs, webhookLogs...) ```  Or:  ```go 		filteredWebhookLogs := make([]*types.WebhookLog, len(webhookLogs)) 		copy(filteredWebhookLogs, webhookLogs) ```  I'd also rename `filteredWebhookLogs` to `logs`, because they're not filtered there"
"2022-11-07 19:27:27.172632+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion  ) ``` "
"2022-11-07 11:03:27.93059+00","👀 "
"2022-11-07 11:04:07.641258+00","According to [here](https://github.com/Murcul/docs/blob/main/wiki/engineering/tech-specs/pr-level-usage.md#discovery): > A PR is considered completed when one of the following events happen: the PR is merged or the PR is approved.  Therefore, I think we should also consider the PRs that have the status set to `:approved`."
"2022-11-07 11:06:05.980201+00","What's the difference between merged and approved? Why do we have two termination statuses?"
"2022-11-07 11:09:16.821368+00","`:approved` means that the code is _mergeable_. This means that the PR is completed (since the client approved), but the code was not merged. After the code is approved, the PR can change its status to `:merged`. "
"2022-11-07 11:12:50.592857+00","Why are the relationships deleted?"
"2022-11-07 11:17:11.575426+00","As per our [testing guides on factories](https://linear.app/gitstart/issue/ENG-1416/resolve-pr-estimates-under-blockers-in-client-graphql-schema), we actually do not want to instantiate these in the factory function, and instead pass them to the setup function. So here I remove them from the `github_app_installation_factory` function and rely on the pattern matching on the setup function for the same factory instead"
"2022-11-07 11:17:42.562857+00","Why test for `-1` specifically? (Why not test for `-2`?) If I put in `0` the test breaks, because `0` is set, even though that's an invalid ID. "
"2022-11-07 11:17:42.596624+00","See below. I'd change this to `if id <= 0`"
"2022-11-07 11:17:42.896993+00","Nitpick, but: I'd save some precious bytes here 😛  ```suggestion 		{ID: 1, WebhookID: int32Ptr(1), StatusCode: 200}, 		{ID: 2, WebhookID: int32Ptr(1), StatusCode: 500}, 		{ID: 3, WebhookID: int32Ptr(1), StatusCode: 200}, 		{ID: 4, WebhookID: int32Ptr(2), StatusCode: 200}, 		{ID: 5, WebhookID: int32Ptr(2), StatusCode: 200}, 		{ID: 6, WebhookID: int32Ptr(2), StatusCode: 200}, 		{ID: 7, WebhookID: int32Ptr(3), StatusCode: 500}, 		{ID: 8, WebhookID: int32Ptr(3), StatusCode: 500}, ```  (Also makes it more readable, IMHO)"
"2022-11-07 11:17:44.064196+00","`items` is unused. This function doesn't do what you think it does, I think :)"
"2022-11-07 11:23:58.366084+00","Well spotted!"
"2022-11-07 11:23:58.440241+00","True, thank you, I remember now. Although there're no PRs with status approved... I'll still add it for consistency"
"2022-11-07 11:27:13.580511+00","Here I wouldn't recommend it as default because this pattern matches everything else.  I would definitely recommend just pattern matching all of the expected cases. What do you think?  Otherwise we need to ""guess"" or look for the functions to know the result"
"2022-11-07 11:27:13.87108+00","👍 +1"
"2022-11-07 11:27:14.000659+00","```suggestion However, for the cases where we expect success/error tuples, we should use `with` statements. ```  We can add the link for the `with` docs here"
"2022-11-07 11:44:09.673484+00","hehe"
"2022-11-07 11:44:09.74122+00","Nice!"
"2022-11-07 11:47:58.444805+00","You can return line 125 directly as `return await EnvelopeDocument.aggregate(pipeline);`"
"2022-11-07 11:47:58.715943+00","I think you missed including a `throw e;` after this line.  Check other methods in the file"
"2022-11-07 11:47:58.725576+00","Why not use the `EnvelopeDocumentStatusEnums.DELETED` value  in `imports/api/enums/EnvelopeDocumentStatusEnums.js`?"
"2022-11-07 11:47:59.632051+00","The error title here should match the method name as in `EnvelopeController.getEnvelopeDocuments`"
"2022-11-07 11:48:01.694118+00","Remove `an` as in `should get envelope document versions`"
"2022-11-07 11:47:58.487031+00","Hi @hashimaziz46 , instead of checking if the `envelopeId` is in the params here, why not check for it in the router?  The error message `Envelope not found` makes it seem as if you searched the db for it, but could not find it.  What d'you think @sheldon-welinga ?"
"2022-11-07 12:00:10.030011+00","This is to support the [behaviour](https://sourcegraph.com/github.com/sourcegraph/sourcegraph/-/blob/internal/database/webhook_logs.go?L112&subtree=true) of how logs filtering by webhook ID and external service ID is done. `-1` is treated as not providing an ID at all -- no filtering.  But now I think that any ""negative ID"" should be treated that way, not only `-1`.  `0` is another special case which means ""find all webhooks logs which doesn't have an assigned webhook"", that's why the test ""breaks"""
"2022-11-07 12:05:13.111168+00","it's a typo, I wanted to use `items`, thanks!"
"2022-11-07 12:07:38.30133+00","![image](https://user-images.githubusercontent.com/70234898/200306160-c7ae5011-a87c-495b-95ae-02f85f5ef454.png)  This error appears in my vscode, could it be something just on my side?"
"2022-11-07 12:08:15.596631+00","About naming: In such cases I usually use `filtered...` name right away even before being filtered, because this variable is reassigned after each filtering stage (and becomes filtered eventually).  But when would you add `filtered` prefix to show that the slice contains filtered elements?"
"2022-11-07 12:18:54.198415+00","```suggestion           <>{t(""need_to_make_a_change"")}</>           &nbsp; ``` I haven't been able to test it, but I think using this is more appropriate"
"2022-11-07 12:17:26.411437+00","This hook is identical to `useUpdateBatchRun`. Any reason for not using `useUpdateBatchRun`?. If it is about the run id we can pass it directly when calling `updateBatchRun` instead of providing it when calling `useUpdateBatchRun`.  Similar to the way you called it here <img width=""164"" alt=""Screenshot 2022-11-07 at 15 20 15"" src=""https://user-images.githubusercontent.com/21334508/200308980-93fb78e5-2d5c-46bd-91ca-9132b36e9c29.png""> "
"2022-11-08 08:49:14.399783+00","Is the export statement redundant here?"
"2022-11-07 12:24:40.188371+00","Is any change introduced here? Formatting is good but it makes a PR review hard. We can revert any other changes not related to the task. Updates will be coming in to improve the format of the codebase."
"2022-11-07 12:30:27.405629+00","Should we add a scope ""RunScheduler"" instead of prefixing the log messages?"
"2022-11-08 16:03:23.60102+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion                     has_tag__it_gen = TRUE OR                     has_tag__chairside_it = TRUE), 1, 0)) AS it_conversation          , SUM(IFF((has_tag__happy_dr = TRUE                     OR has_tag__positive_story = TRUE), 1, 0)) AS positive_sentiment_conversation           , SUM(IFF((has_tag__labs_order_issues = TRUE                     OR has_tag__practice_issues = TRUE OR ``` "
"2022-11-09 13:54:57.20364+00","These where the obvious candidates... are the any other types we don't want to request information for?"
"2022-11-10 14:46:53.250631+00","shouldn't this be `metadataUrlParamPatch` instead?"
"2022-11-10 16:20:40.932567+00","are you sure this is the right tier? T4 should be only for ""unsupported"" models"
"2022-11-07 12:26:21.258383+00","agree, maybe also for the bang functions and tailing question mark"
"2022-11-07 12:30:27.462487+00","It seems to produce as much log lines as there are repos fetched from GitHub, which is pretty much(?)  Did you think about adding a metric instead of logging, or adding an aggregated log with a number of repos?  Or do you need all repo names instead?"
"2022-11-07 12:30:27.579447+00","Not sure about necessity of adding this log as well, tbh"
"2022-11-07 12:30:27.823955+00","```suggestion 				s.Logger.Debug(""external service repo deleted"", log.Int32(""deleted.ID"", int32(stored.ID))) ```"
"2022-11-07 12:30:28.158192+00","```suggestion 		logger.Debug(""repo not found in DB, skipping"") ```"
"2022-11-07 12:30:28.402492+00","should the message be different?"
"2022-11-07 12:30:28.754303+00","I think you forgot to add a parameter which will be used in a string template"
"2022-11-07 12:30:29.189001+00","And regarding this exact log line: I'm curious why is it so important?"
"2022-11-07 12:30:29.690318+00","probably worth creating a new logger instance with ""syncer"" scope"
"2022-11-07 12:31:03.75571+00","It is wrapping  both`search` and `remove-all`.  Another name like `search-remove-all`, `search-remove-all-wrapper`, etc might be better"
"2022-11-07 12:31:42.277221+00","@collinewait  sure i'll revert the formatting changes "
"2022-11-07 12:31:57.30497+00","Yes, that's the intention since I'm missing some repos in the customer issue. I want to verify the repo is being passed from one abstraction to another. Since it's a debug log, I'm not too worried about it (customer has repos in the order of 100s, not thousands) and can remove it once we find the bug."
"2022-11-07 12:34:07.824337+00","```suggestion ```"
"2022-11-07 12:34:47.649669+00","I think this check should remain here, but the message can be changed as im not using any service to check for it. Would be a little inconsistent tho."
"2022-11-07 14:45:45.011088+00","All tests not fully covered"
"2022-11-07 16:22:52.162494+00","@sheldon-welinga  this changes not related on my PR"
"2022-11-07 19:23:24.38829+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     SELECT *     FROM {{ ref('fact_pursuit') }}     WHERE milestone_meeting_set_at IS NOT NULL OR milestone_prospected_at IS NOT NULL ``` "
"2022-11-07 19:23:24.440723+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     SELECT *     FROM {{ ref('ref_date_day') }}     WHERE base_date >= '2022-01-01'         AND base_date < CURRENT_DATE() ``` "
"2022-11-07 12:36:37.234683+00","This is from the main branch, not part of my PR."
"2022-11-07 13:06:39.680598+00","Comment necessary here"
"2022-11-07 13:18:28.445043+00","Hi @rwagatenga , are we still moving access level checks to the top of the try block?"
"2022-11-07 13:30:14.48305+00","@hashimaziz46 , Please use @Chiazokam 's suggestion here, you should first check if the envelope exists before permissions check"
"2022-11-07 15:05:10.085458+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     SELECT         salesforce_account_id         , as_of_date         , is_current_date         , frequency_bucket         , risk_level_current         , risk_level_changed         , risk_level_session_num ``` "
"2022-11-07 13:32:27.743051+00","Also, your check here doesn't make sense. You should get the envelope from the database"
"2022-11-07 13:32:27.651987+00","So should I move this check before the permission one or place it in Router file?"
"2022-11-07 13:38:14.632414+00","You want this to be `parameters.append(key, value)`. But that also means we could end up with multiple values for other parameters. I don't know if that's going to be an issue or not.  From [MDN](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams/set):  > The set() method of the [URLSearchParams](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams) interface sets the value associated with a given search parameter to the given value. If there were several matching values, this method deletes the others. If the search parameter doesn't exist, this method creates it."
"2022-11-07 13:33:47.373841+00","Maybe I'm overlooking something obvious but I think this will only preserve the last (preset) parameter in `PRESERVED_QUERY_PARAMETERS` because `searchQueryParameter` is assigned to inside the loop. Looks like the code has been wrong before?  **edit:** I did overloook: we initialize `parameters` with the current value of  `searchQueryParameter`... still a strange way to do this IMO."
"2022-11-07 13:38:43.763119+00","This is wrong, lets stick to the ticket steps to the latter"
"2022-11-07 14:17:16.384189+00","does the animation works if we conditionally put all the component behind the `showBanner` values  ````tsx return showBanner ? <AnimatePresence> ...</AnimatePresence> : null; ```` "
"2022-11-07 14:20:38.031801+00","Same here"
"2022-11-07 14:20:38.562813+00","Same here"
"2022-11-07 14:20:38.237005+00","I left this comments for you to resolve"
"2022-11-07 14:20:38.949264+00","Same here"
"2022-11-07 14:20:40.881773+00","You need to update this tests as well to target specific data"
"2022-11-07 14:20:41.473451+00","I added this, you need to update your service test suite to cover this validation as well"
"2022-11-07 14:21:04.030329+00","I fixed this"
"2022-11-07 14:21:15.462471+00","I fixed this"
"2022-11-07 14:37:39.115585+00","Agree it is strange, I was copying the previous implementation. Happy to change it?"
"2022-11-07 14:38:52.657057+00","Whoops, great catch."
"2022-11-07 14:45:32.25701+00","Revert this line, What you removed should be the correct sorting"
"2022-11-07 14:45:32.42501+00","All defaults should be done in the `router` file, not here"
"2022-11-07 14:45:32.497611+00","Wong error result, please refer to other methods"
"2022-11-07 14:45:33.269236+00","Should be done in the service side, not here"
"2022-11-07 14:45:35.213994+00","Before we check permission, get the envelope and ensure it exists, throw 404 error when envelope does not exist with the correct message"
"2022-11-07 14:45:35.22467+00","Nuke this empty space"
"2022-11-07 14:45:36.209757+00","Why this kind of destructuring, lets ensure the `getEnvelopeActivities` is working properly and remove the destructuring here, you should get the value directly  also instead of data use `envelopeActivities` as variable name"
"2022-11-07 14:45:36.363751+00","Data should contain rest of other information e.g. total, page and result e.t.c. No reason for this RES object"
"2022-11-07 14:45:37.252493+00","All tests not fully covered, lets remember we have different ways of returning the data, e.g. withProfile true or false e.t.c"
"2022-11-07 14:45:37.341425+00","provide defaults at this section"
"2022-11-07 14:45:38.00997+00","Avoid destructing here,  destructure the results inside the function  Also add validation to all these fields. You can refer to how enevelopDocumentService was done"
"2022-11-07 14:45:38.271306+00","Better use values different from the defaults"
"2022-11-07 14:45:39.939055+00","Avoid hardcoding values, use the correct total"
"2022-11-07 15:00:53.632505+00","Sort from A-Z"
"2022-11-07 14:45:41.328976+00","use await on async"
"2022-11-07 14:45:43.431811+00","Wrap in try catch, Also I don't see the reason why we have this function here. Lets move the code directly where its needed  This service seems odd "
"2022-11-07 14:45:43.843471+00","Wrap in a try-catch"
"2022-11-07 14:45:44.018572+00","Nuke ```suggestion ```"
"2022-11-07 15:00:53.350223+00","Add a space top-bottom"
"2022-11-07 15:00:56.018222+00","Add a space top-bottom"
"2022-11-07 15:00:53.65927+00","Nuke this"
"2022-11-07 15:00:54.038484+00","Nuke"
"2022-11-07 15:00:54.041927+00","Avoid hardcoding values, Lets nuke this"
"2022-11-07 15:00:54.159517+00","Since its not part of the ticket, lets nuke this, check is boolean should be enough ```suggestion ```"
"2022-11-07 15:00:55.103047+00","Nuke this, lets resolve eslint errors properly ```suggestion ```"
"2022-11-07 15:01:00.257671+00","Same here"
"2022-11-07 15:15:01.733876+00","Why 10 seconds? Wouldn't think ensure that if there were at least 1 other job that completing this one would never be the next selection?"
"2022-11-07 15:00:55.014573+00","Same here, applies to all booleans"
"2022-11-07 15:00:55.114289+00","Move line 22 and 25 outside the describe"
"2022-11-07 15:00:55.199766+00","```suggestion const StatusEnums = require('../../imports/api/enums/statusEnums'); ```"
"2022-11-07 15:00:56.069819+00","```suggestion const UserStatusEnums = require('../../imports/api/enums/userStatusEnums'); ``` "
"2022-11-07 15:20:08.777317+00","`shouldFetchPrecise` is the result of `useRef` which is _always_ an object so this is always `false`  Edit: This should _probably_ have been `shouldFetchPrecise.current` but that does not seem necessary?"
"2022-11-07 16:05:33.184192+00","nit, but this function should come after the calling function"
"2022-11-07 19:23:37.679197+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     LEFT OUTER JOIN sf_users AS rep ``` "
"2022-11-07 19:27:06.6783+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     SELECT         month_start ``` "
"2022-11-08 16:17:57.239649+00","No, I believe this should be a permanent change. (I've compared with/without locally and as far as I can tell the refinement is effective even without the recent searches item.)"
"2022-11-10 14:49:16.666281+00","```suggestion     LFS is set if the GitBlob is a pointer to a file stored in LFS. ```  `nil` is a goism where `null` is the representation of it in GraphQL"
"2022-11-10 16:24:29.47056+00","is this tier correct? T4 should only be for ""unsupported"" models"
"2022-11-07 15:00:58.076547+00","Nuke, by default body is available"
"2022-11-07 15:00:58.074474+00","Check the `code` as well, if it exists"
"2022-11-07 15:00:59.088857+00","Should come as second import,  actually your imports are not well  organized, check pinned posts on how the should be ordered"
"2022-11-07 15:00:59.117706+00","Resolve eslint errors"
"2022-11-07 15:00:58.382871+00","Data in query a params can't be sent the way you did, `Dummy test` must be one word, wrap it in a string"
"2022-11-07 15:13:40.402183+00","Also expect this to match specific value, I believe that will be `admin._id`"
"2022-11-07 15:00:59.082096+00","I guess we have a way to confirm the exact email as well from the created user, you need to target that as well, just to confirm if they match"
"2022-11-07 15:00:59.306962+00","Nuke"
"2022-11-07 15:00:56.215382+00","Update here to ```suggestion if (!Boolean(withProfile)) { ```"
"2022-11-07 15:00:57.985616+00","Since length is one target first value and also check if specific data values matches given variables"
"2022-11-07 15:05:10.010539+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     SELECT          revenue_risk_score.salesforce_account_id         , revenue_risk_score.as_of_date         , revenue_risk_score.is_current_date         , revenue_risk_score.frequency_bucket         , revenue_risk_score.risk_level_current         , revenue_risk_score.risk_level_changed         , date_spine.period_marker__month_start         , date_spine.period_marker__month_end          , COALESCE(             LAST_VALUE(                 IFF(date_spine.period_marker__month_start, revenue_risk_score.risk_level_current, NULL)             ) IGNORE NULLS             OVER (                 PARTITION BY                     revenue_risk_score.salesforce_account_id                 ORDER BY revenue_risk_score.as_of_date ASC ROWS BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING             )             , 'Pre-Orders') ``` "
"2022-11-08 16:19:30.786188+00","I don't personally think it's salesy; I would leave as-is given it sounds like a bold (and true) statement."
"2022-11-07 15:05:10.432717+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion          , COALESCE(             FIRST_VALUE(                 IFF(date_spine.period_marker__month_end, revenue_risk_score.risk_level_current, NULL)             ) IGNORE NULLS             OVER (                 PARTITION BY                     revenue_risk_score.salesforce_account_id                 ORDER BY revenue_risk_score.as_of_date ASC ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING             )             , 'Future Date') AS month_end_risk_score          , COALESCE(             FIRST_VALUE(                 IFF(date_spine.period_marker__month_end, revenue_risk_score.risk_level_current, NULL)             ) IGNORE NULLS             OVER (                 PARTITION BY                     revenue_risk_score.salesforce_account_id                 ORDER BY revenue_risk_score.as_of_date ASC ROWS BETWEEN 1 FOLLOWING AND UNBOUNDED FOLLOWING             )             , 'Future Date') ``` "
"2022-11-07 15:05:10.975789+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion         , COALESCE(             LAST_VALUE(                 IFF(date_spine.period_marker__month_start, revenue_risk_score.frequency_bucket, NULL)             ) IGNORE NULLS             OVER (                 PARTITION BY                     revenue_risk_score.salesforce_account_id                 ORDER BY revenue_risk_score.as_of_date ASC ROWS BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING             )             , 'Pre-Orders') ``` "
"2022-11-07 15:05:10.991549+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     FROM         {{ ref('ref_date_day') }} ``` "
"2022-11-07 15:05:11.2125+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion         , COALESCE(             LAST_VALUE(                 IFF(date_spine.period_marker__month_start, revenue_risk_score.risk_level_current, NULL)             ) IGNORE NULLS             OVER (                 PARTITION BY                     revenue_risk_score.salesforce_account_id                 ORDER BY revenue_risk_score.as_of_date ASC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING             ) ``` "
"2022-11-07 15:05:11.824776+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion )  , date_spine AS (     SELECT         base_date ``` "
"2022-11-07 15:05:12.009522+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion SELECT * FROM final ``` "
"2022-11-08 16:19:36.207442+00","FYI @lcolston08 "
"2022-11-07 15:05:12.496942+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion ``` "
"2022-11-07 15:05:12.594343+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion ``` "
"2022-11-07 15:05:13.254217+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion         , COALESCE(             FIRST_VALUE(                 IFF(date_spine.period_marker__month_end, revenue_risk_score.frequency_bucket, NULL)             ) IGNORE NULLS             OVER (                 PARTITION BY                     revenue_risk_score.salesforce_account_id                 ORDER BY revenue_risk_score.as_of_date ASC ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING             )             , 'Future Date') AS month_end_frequency_bucket          , COALESCE(             FIRST_VALUE(                 IFF(date_spine.period_marker__month_end, revenue_risk_score.frequency_bucket, NULL)             ) IGNORE NULLS             OVER (                 PARTITION BY                     revenue_risk_score.salesforce_account_id                 ORDER BY revenue_risk_score.as_of_date ASC ROWS BETWEEN 1 FOLLOWING AND UNBOUNDED FOLLOWING             )             , 'Future Date')         AS next_month_end_frequency_bucket          , IFF(month_start_risk_score = month_end_risk_score, FALSE, TRUE) AS changed_risk_score_during_month         , IFF(             month_start_frequency_bucket = month_end_frequency_bucket, FALSE, TRUE         ) AS changed_frequency_bucket_during_month      FROM revenue_risk_score      LEFT OUTER JOIN date_spine         ON revenue_risk_score.as_of_date = date_spine.base_date ``` "
"2022-11-07 15:08:18.422696+00","I think this should be `&&` so that it waits for the output (and not spawn it detached?)  ```suggestion     ""format:changed"": ""prettier $(git diff --diff-filter=d --name-only origin/main... && git ls-files --other --modified --exclude-standard | grep -E '\\.(js|json|ts|tsx|graphql|md|scss)$' | xargs) --write --list-different --config prettier.config.js"", ```  I tested the command locally with `--no-pager` and it seems to work (you need to remove the double escape: `\\.` => `\.` to repro)"
"2022-11-07 15:13:39.036446+00","Avoid keyword successfully  ```suggestion it('Should create an envelope access for the user', async () => { ```"
"2022-11-07 15:13:40.136154+00","Also expect specific values"
"2022-11-07 15:13:41.662404+00","Also check `result.body.code`"
"2022-11-07 15:13:42.054232+00","Same here, also expect to match specific value, in this case `envelope1._id`"
"2022-11-07 15:13:42.106556+00","Also check` result.body.code`"
"2022-11-07 15:13:43.027405+00","Target specific values as well"
"2022-11-07 15:13:43.02635+00","Same here"
"2022-11-07 15:15:01.808478+00","nothing wrong with this, but it is kind of setup nicely create an interrupt timer and use a select. ```golang     interrupt := time.After(h.config.interruptAfter * time.Second)       for { 			repoId, more, finish := nextFunc() 			if !more { 				break 			}             select {             case <- interrupt:                  return true, nil             default:               // rest of logic ```"
"2022-11-07 15:15:11.731071+00","this really isn't going to fail -- I've never seen an `enqueue` fail"
"2022-11-07 15:15:41.349831+00","if you're looking to track when if it actually sent, you need to put that at the end of the job handler"
"2022-11-07 15:17:28.353118+00","Don't feel obliged (I can also do this in a separate PR). I'd probably just set `const preservedParameters = new URLSearchParams(searchQueryParameter)` before the loop and then modify `preservedParameters`."
"2022-11-07 15:18:54.536853+00","oh I see you're doing that... checking with Erik on something... standby"
"2022-11-07 15:22:09.980121+00","fyi this line will never get hit.  axios automatically throws on non-success conditions lol.  also fyi jobs have [automatic retry options](https://github.com/orthly/orthlyweb/blob/master/packages/services/src/utils/job-utils.service.ts#L206-L210)  for [retryable conditions](https://github.com/orthly/orthlyweb/blob/master/packages/shared-types/src/utils/retryable-errors.ts) (for when this is invoked by a job)"
"2022-11-07 15:23:56.235916+00","The way `findMatchingItemsForDesignRule` is implemented means that passing in `[]` in the second argument won't take any time to run. There's really no benefit here, and I'm trying to cut down on lines in this file"
"2022-11-07 15:32:10.697023+00","```suggestion     default: Date.now(), ```"
"2022-11-07 15:44:14.289391+00","Axios only throws on 500s. We are getting a 403 which is actually failing silently. 400 errors are technically valid  https://github.com/axios/axios/issues/41#issuecomment-123657460"
"2022-11-07 15:51:28.22263+00","note to _not_ change this one to the automatic transactions when we get there -- that would be 1 per order, and labs accept like 100 orders at a time IIRC.  I actually don't think this should even be a `Promise.all` -- chunked, at the very least.  @karimsa can you get an issue for that created on your backlog plz?"
"2022-11-07 15:59:52.218111+00","Tested that it works without cast to unknown, updated."
"2022-11-07 16:03:51.257733+00","Axios will throw if there's a non-success response, so by the time this line is encountered, `status` and `data` are both guaranteed to be set, so there's no value in optional chaining here.  We can't guarantee the _contents_ of `data` and that should really be type-checked with Zod, but that's for another PR.  ```suggestion         this.dialpad_counter.increment(1, { status_code: response.status.toString() });         new OrthlyLogger('dialpad-sms-response', { response, status_code: response.status });          return response.data; ```"
"2022-11-07 16:05:08.22647+00","Since it's a 2d array it'd have to be `exampleSyntaxColumns[0][0].title` to get to that value. Is that too contrived? @limitedmage "
"2022-11-07 16:05:32.917571+00","Yes, it is just the randIDs that get used (unmarshalled). We went with unmarshaled because marshaling didn't buy anything at the time (we did think about supporting unmarshaled and marshaled, but kicked the can on that)."
"2022-11-07 16:05:33.064926+00","Should this be added to the [logger](https://sourcegraph.sourcegraph.com/github.com/sourcegraph/sourcegraph/-/blob/cmd/frontend/internal/highlight/highlight.go?L349)?"
"2022-11-07 16:06:03.0225+00","sure, https://github.com/sourcegraph/sourcegraph/pull/43962/commits/0680bd81fa93fe514def0e622e9ce85165f55c04"
"2022-11-07 16:10:17.608015+00","403 in axios view is a successful response (it reached the server and the server said go away). Originally the code looked like this (https://github.com/orthly/orthlyweb/blob/89294176a3fb6b2e5ed26ed90aa1030cb711bfaf/apps/labs-server/src/dialpad/services/dialpad.client.ts#L132) and when we got 403s no error would be thrown (@erik-measure-dandy )"
"2022-11-07 16:21:46.24251+00","that's not [the default](https://github.com/axios/axios/blob/v0.24.0/README.md?plain=1#L405-L411), and I don't see any overrides to it except:  * in [Kustomer createAttachment](https://github.com/orthly/orthlyweb/blob/master/packages/services/src/comms/kustomer.service.ts#L1133) (unclear why...) * in the [Kustomer generateAxiosConfig](https://github.com/orthly/orthlyweb/blob/master/packages/services/src/comms/kustomer.service.ts#L205) function, though I don't see any calls to it actually setting the flag that would disable validation  I just confirmed the expected behavior with a 403: ``` ➜  orthlyweb git:(bump-qa) oy repl Changing directory to: /Users/seanferguson/Code/orthlyweb/apps/labs-server Debugger listening on ws://127.0.0.1:9212/d4b66e14-c163-46a3-a3f7-7f9ab9d0206f For help, see: https://nodejs.org/en/docs/inspector   orthly:config OrthlyConfig Loader   orthly:config   Node Environment: development   orthly:config   App Environment: development   orthly:config   Load Root: /Users/seanferguson/Code/orthlyweb/.env   orthly:config   Load Sources:   orthly:config     env.shared   orthly:config     env.shared.nonproduction   orthly:config     env.development   orthly:config     env.overrides +0ms ScannerKafkaListener started with topics: [ 'telemetry.events', 'telemetry.errors' ] LabOrderKafkaListener starting info: [LaunchDarkly] Initializing stream processor to receive feature flag updates info: [LaunchDarkly] Opened LaunchDarkly stream connection > const axios = require('axios'); undefined > const response = await axios.post('http://httpstat.us/403'); Uncaught Error: Request failed with status code 403     at createError (/Users/seanferguson/Code/orthlyweb/node_modules/axios/lib/core/createError.js:16:15)     at settle (/Users/seanferguson/Code/orthlyweb/node_modules/axios/lib/core/settle.js:17:12)     at IncomingMessage.handleStreamEnd (/Users/seanferguson/Code/orthlyweb/node_modules/axios/lib/adapters/http.js:293:11)     at IncomingMessage.emit (events.js:412:35)     at IncomingMessage.emit (domain.js:537:15)     at endReadableNT (internal/streams/readable.js:1333:12)     at processTicksAndRejections (internal/process/task_queues.js:82:21) {   config: {     transitional: {       silentJSONParsing: true,       forcedJSONParsing: true,       clarifyTimeoutError: false     },     adapter: [Function: httpAdapter],     transformRequest: [ [Function: transformRequest] ],     transformResponse: [ [Function: transformResponse] ],     timeout: 0,     xsrfCookieName: 'XSRF-TOKEN',     xsrfHeaderName: 'X-XSRF-TOKEN',     maxContentLength: -1,     maxBodyLength: -1,     validateStatus: [Function: validateStatus],     headers: {       Accept: 'application/json, text/plain, */*',       'Content-Type': 'application/x-www-form-urlencoded',       'User-Agent': 'axios/0.24.0'     },     method: 'post',     url: 'http://httpstat.us/403',     data: undefined   },   request: <ref *1> ClientRequest {     _events: [Object: null prototype] {       abort: [Function (anonymous)],       aborted: [Function (anonymous)],       connect: [Function (anonymous)],       error: [Function (anonymous)],       socket: [Function (anonymous)],       timeout: [Function (anonymous)],       prefinish: [Function: requestOnPrefinish]     },     _eventsCount: 7,     _maxListeners: undefined,     outputData: [],     outputSize: 0,     writable: true,     destroyed: false,     _last: true,     chunkedEncoding: false,     shouldKeepAlive: false,     _defaultKeepAlive: true,     useChunkedEncodingByDefault: true,     sendDate: false,     _removedConnection: false,     _removedContLen: false,     _removedTE: false,     _contentLength: 0,     _hasBody: true,     _trailer: '',     finished: true,     _headerSent: true,     socket: Socket {       connecting: false,       _hadError: false,       _parent: null,       _host: 'httpstat.us',       _readableState: [ReadableState],       _events: [Object: null prototype],       _eventsCount: 7,       _maxListeners: undefined,       _writableState: [WritableState],       allowHalfOpen: false,       _sockname: null,       _pendingData: null,       _pendingEncoding: '',       server: null,       _server: null,       parser: null,       _httpMessage: [Circular *1],       [Symbol(async_id_symbol)]: 1641,       [Symbol(kHandle)]: [TCP],       [Symbol(kSetNoDelay)]: false,       [Symbol(lastWriteQueueSize)]: 0,       [Symbol(timeout)]: null,       [Symbol(kBuffer)]: null,       [Symbol(kBufferCb)]: null,       [Symbol(kBufferGen)]: null,       [Symbol(kCapture)]: false,       [Symbol(kBytesRead)]: 0,       [Symbol(kBytesWritten)]: 0,       [Symbol(RequestTimeout)]: undefined     },     _header: 'POST /403 HTTP/1.1\r\n' +       'Accept: application/json, text/plain, */*\r\n' +       'Content-Type: application/x-www-form-urlencoded\r\n' +       'User-Agent: axios/0.24.0\r\n' +       'Host: httpstat.us\r\n' +       'Connection: close\r\n' +       'Content-Length: 0\r\n' +       '\r\n',     _keepAliveTimeout: 0,     _onPendingData: [Function: noopPendingOutput],     agent: Agent {       _events: [Object: null prototype],       _eventsCount: 2,       _maxListeners: undefined,       defaultPort: 80,       protocol: 'http:',       options: [Object],       requests: {},       sockets: [Object],       freeSockets: {},       keepAliveMsecs: 1000,       keepAlive: false,       maxSockets: Infinity,       maxFreeSockets: 256,       scheduling: 'lifo',       maxTotalSockets: Infinity,       totalSocketCount: 1,       [Symbol(kCapture)]: false     },     socketPath: undefined,     method: 'POST',     maxHeaderSize: undefined,     insecureHTTPParser: undefined,     path: '/403',     _ended: true,     res: IncomingMessage {       _readableState: [ReadableState],       _events: [Object: null prototype],       _eventsCount: 3,       _maxListeners: undefined,       socket: [Socket],       httpVersionMajor: 1,       httpVersionMinor: 1,       httpVersion: '1.1',       complete: true,       headers: [Object],       rawHeaders: [Array],       trailers: {},       rawTrailers: [],       aborted: false,       upgrade: false,       url: '',       method: null,       statusCode: 403,       statusMessage: 'Forbidden',       client: [Socket],       _consuming: false,       _dumped: false,       req: [Circular *1],       responseUrl: 'http://httpstat.us/403',       redirects: [],       [Symbol(kCapture)]: false,       [Symbol(RequestTimeout)]: undefined     },     aborted: false,     timeoutCb: null,     upgradeOrConnect: false,     parser: null,     maxHeadersCount: null,     reusedSocket: false,     host: 'httpstat.us',     protocol: 'http:',     _redirectable: Writable {       _writableState: [WritableState],       _events: [Object: null prototype],       _eventsCount: 2,       _maxListeners: undefined,       _options: [Object],       _ended: true,       _ending: true,       _redirectCount: 0,       _redirects: [],       _requestBodyLength: 0,       _requestBodyBuffers: [],       _onNativeResponse: [Function (anonymous)],       _currentRequest: [Circular *1],       _currentUrl: 'http://httpstat.us/403',       [Symbol(kCapture)]: false     },     [Symbol(kCapture)]: false,     [Symbol(kNeedDrain)]: false,     [Symbol(corked)]: 0,     [Symbol(kOutHeaders)]: [Object: null prototype] {       accept: [Array],       'content-type': [Array],       'user-agent': [Array],       host: [Array]     }   },   response: {     status: 403,     statusText: 'Forbidden',     headers: {       'content-length': '0',       connection: 'close',       date: 'Mon, 07 Nov 2022 16:21:05 GMT',       server: 'Kestrel',       'set-cookie': [Array],       'request-context': 'appId=cid-v1:3548b0f5-7f75-492f-82bb-b6eb0e864e53'     },     config: {       transitional: [Object],       adapter: [Function: httpAdapter],       transformRequest: [Array],       transformResponse: [Array],       timeout: 0,       xsrfCookieName: 'XSRF-TOKEN',       xsrfHeaderName: 'X-XSRF-TOKEN',       maxContentLength: -1,       maxBodyLength: -1,       validateStatus: [Function: validateStatus],       headers: [Object],       method: 'post',       url: 'http://httpstat.us/403',       data: undefined     },     request: <ref *1> ClientRequest {       _events: [Object: null prototype],       _eventsCount: 7,       _maxListeners: undefined,       outputData: [],       outputSize: 0,       writable: true,       destroyed: false,       _last: true,       chunkedEncoding: false,       shouldKeepAlive: false,       _defaultKeepAlive: true,       useChunkedEncodingByDefault: true,       sendDate: false,       _removedConnection: false,       _removedContLen: false,       _removedTE: false,       _contentLength: 0,       _hasBody: true,       _trailer: '',       finished: true,       _headerSent: true,       socket: [Socket],       _header: 'POST /403 HTTP/1.1\r\n' +         'Accept: application/json, text/plain, */*\r\n' +         'Content-Type: application/x-www-form-urlencoded\r\n' +         'User-Agent: axios/0.24.0\r\n' +         'Host: httpstat.us\r\n' +         'Connection: close\r\n' +         'Content-Length: 0\r\n' +         '\r\n',       _keepAliveTimeout: 0,       _onPendingData: [Function: noopPendingOutput],       agent: [Agent],       socketPath: undefined,       method: 'POST',       maxHeaderSize: undefined,       insecureHTTPParser: undefined,       path: '/403',       _ended: true,       res: [IncomingMessage],       aborted: false,       timeoutCb: null,       upgradeOrConnect: false,       parser: null,       maxHeadersCount: null,       reusedSocket: false,       host: 'httpstat.us',       protocol: 'http:',       _redirectable: [Writable],       [Symbol(kCapture)]: false,       [Symbol(kNeedDrain)]: false,       [Symbol(corked)]: 0,       [Symbol(kOutHeaders)]: [Object: null prototype]     },     data: ''   },   isAxiosError: true,   toJSON: [Function: toJSON] } > response undefined ```"
"2022-11-07 16:23:02.705485+00","same here"
"2022-11-07 16:27:27.287005+00","Now this makes sense. We aren't using Kustomer we are using Dialpad (which uses kustomer under the hood long story). The dialpad axios api config doesn't explicit set validateStatus https://github.com/orthly/orthlyweb/blob/89294176a3fb6b2e5ed26ed90aa1030cb711bfaf/apps/labs-server/src/dialpad/services/dialpad.client.ts#L49"
"2022-11-07 16:43:00.492477+00","ugh, so the `validateStatus` being undefined on Kustomer's axios config overrides the default.  that should absolutely not exist.  here's a PR to fix Kustomer: https://github.com/orthly/orthlyweb/pull/5567"
"2022-11-07 16:44:03.020676+00","I'm somewhat concerned about potential race conditions in weird edge cases. 10 seconds might be too long, but we may need at least 1 polling interval. Consider:  * Worker A is processing a backfill and is interrupted * Worker B has no work and is polling in the background * Worker A calls requeue with no delay. This record will be immediately visible to worker B * Worker B picks up the backfill and sets it to in-processing * Worker A calls MarkComplete and errors, which sets the in-processing state to errored even though worker B is processing it * Worker A now picks up the record because it is in errored state, and we have concurrent processing"
"2022-11-07 16:44:38.623032+00","LOVE IT"
"2022-11-07 16:46:00.766573+00","See https://github.com/sourcegraph/sourcegraph/pull/43962/commits/ecc1034f73e8a62e4485726f12069e2ddec214c5"
"2022-11-07 16:50:29.952486+00","Hey, has Design had eyes on this?"
"2022-11-07 16:52:57.90122+00","ya @JordyDandy asked me to do this"
"2022-11-07 16:53:07.274129+00","Maybe this isn't true [though](https://sourcegraph.com/github.com/sourcegraph/sourcegraph@45ee617e4b5f6e801c191e5b492e8ac7a43767ba/-/blob/internal/workerutil/worker.go?L369) > Worker A calls MarkComplete and errors, which sets the in-processing state to errored even though worker B is processing it  "
"2022-11-07 16:56:36.995294+00","Ok I see there could be some issues with timing there.  Even without errors the MarkComplete could screw it up if it's already been picked up by another process.  I'm ok with this it just means that backfills that take over 1 min could be delayed by an extra min or two occassionaly."
"2022-11-07 19:27:02.989137+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion      FROM {{ ref('fact_sf_opportunity') }} ``` "
"2022-11-07 16:59:59.421453+00","> Maybe this isn't true [though](https://sourcegraph.com/github.com/sourcegraph/sourcegraph@45ee617e4b5f6e801c191e5b492e8ac7a43767ba/-/blob/internal/workerutil/worker.go?L369)  The one I saw was that `MarkComplete` is a noop unless it was already picked up by B and set to `processing` in which it would get set to `complete` which probably would get reset when B is done with it's 60 seconds but maybe not."
"2022-11-07 17:03:42.952506+00","I'm filing a story to handle that separately, see: [WEB-2233](https://instrumental-inc.atlassian.net/browse/WEB-2233)"
"2022-11-07 17:39:53.08582+00","This is working even in error situations 😑"
"2022-11-07 17:39:53.156229+00","This comment can be improved "
"2022-11-07 17:46:55.971935+00","Is this the line we need to trigger based on FF/etc? If so, I'm ok with making this a CLI argument and we can just let app restarts be how we trigger changes."
"2022-11-07 18:07:11.411574+00","is there a reason not to use `= true`? seems like a weird mix of false, true, = and != here especially given that they're all coalesced 🤔 "
"2022-11-07 18:07:16.866937+00","if you want these in a group in looker, consider double underscore after `stage_changed_to__`  not required"
"2022-11-07 18:07:37.956223+00","It turns out I did need to do some logic shifting on the default behavior of `sinceLastActive` filter -- see latest commit"
"2022-11-07 18:08:43.360036+00","I believe I've got this sorted out -- this was the tricky part to understand"
"2022-11-07 18:11:15.702478+00","Sorry, I did not realize that `manufacturer_integration` throws a 404 instead of returning `null`. This is going to blow up slack the second we launch, if the query is throwing 404s. Can we bring back the `if` around the `reportError`?"
"2022-11-07 18:43:26.285016+00","Updated the style of tabs so it's closer to style guide:    | Figma  | Before  | After  | |---|---|---| | ![image](https://user-images.githubusercontent.com/111591346/200388814-50fb553f-7084-4e98-9d13-af1c7130d198.png)  | ![image](https://user-images.githubusercontent.com/111591346/200389235-123d5793-8e82-40f3-b202-a272a84d51bf.png)  | ![image](https://user-images.githubusercontent.com/111591346/200388937-46d6ebb0-7ad8-42cf-83b4-e58f28d05d36.png)  | "
"2022-11-07 18:12:12.755666+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion ``` "
"2022-11-07 18:12:12.872275+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     SELECT         orders.order_id           , BOOLOR_AGG(refab_reason.refab_reason_category_cleaned = 'margin') AS has_reason__margin         , BOOLOR_AGG(refab_reason.refab_reason_category_cleaned = 'shade') AS has_reason__shade         , BOOLOR_AGG(             refab_reason.refab_reason_category_cleaned = 'interproximal_contact'         ) AS has_reason__interproximal_contact         , BOOLOR_AGG(refab_reason.refab_reason_category_cleaned = 'design_aesthetics') AS has_reason__design_aesthetics         , BOOLOR_AGG(refab_reason.refab_reason_category_cleaned = 'lost_order') AS has_reason__lost_order         , BOOLOR_AGG(refab_reason.refab_reason_category_cleaned = 'broken_appliance') AS has_reason__broken_appliance         , BOOLOR_AGG(refab_reason.refab_reason_category_cleaned = 'occlusal_contact') AS has_reason__occlusal_contact         , BOOLOR_AGG(refab_reason.refab_reason_category_cleaned = 'fit') AS has_reason__fit         , BOOLOR_AGG(             refab_reason.refab_reason_category_cleaned = 'wrong_missing_items'         ) AS has_reason__wrong_missing_items         , BOOLOR_AGG(refab_reason.refab_reason_category_cleaned = 'other') AS has_reason__other         , BOOLOR_AGG(refab_reason.refab_reason_category_cleaned = 'anatomy') AS has_reason__anatomy         --, BOOLOR_AGG(refab_reason.refab_reason_category_cleaned = 'intaglio_interior_of_crown_') AS has_reason__intaglio_interior_of_crown_         , BOOLOR_AGG(refab_reason.refab_reason_category_cleaned = 'partial_set_up') AS has_reason__partial_set_up         , BOOLOR_AGG(refab_reason.refab_reason_category_cleaned = 'crown_design') AS has_reason__crown_design         --, BOOLOR_AGG(refab_reason.refab_reason_category_cleaned = 'restoration_did_not_seat_intra_orally_') AS has_reason__restoration_did_not_seat_intra_orally_         , BOOLOR_AGG(refab_reason.refab_reason_category_cleaned = 'abutment_fit') AS has_reason__abutment_fit         , BOOLOR_AGG(             refab_reason.refab_reason_category_cleaned = 'change_order_set_up'         ) AS has_reason__change_order_set_up         , BOOLOR_AGG(refab_reason.refab_reason_category_cleaned = 'abutment_design') AS has_reason__abutment_design         , BOOLOR_AGG(refab_reason.refab_reason_category_cleaned = 'crown_fit') AS has_reason__crown_fit         --, BOOLOR_AGG(refab_reason.refab_reason_category_cleaned = 'abutment_fit_intra_oral_') AS has_reason__abutment_fit_intra_oral_         , BOOLOR_AGG(refab_reason.refab_reason_category_cleaned = 'screw_fit') AS has_reason__screw_fit         , BOOLOR_AGG(refab_reason.refab_reason_category_cleaned = 'model_fit') AS has_reason__model_fit         , BOOLOR_AGG(refab_reason.refab_reason_category_cleaned = 'None') AS has_reason__none         , BOOLOR_AGG(refab_reason.refab_reason_category_cleaned = 'product_defect') AS has_reason__product_defect         , BOOLOR_AGG(refab_reason.refab_reason_category_cleaned = 'fault') AS has_reason__fault         , BOOLOR_AGG(refab_reason.refab_reason_category_cleaned = 'retention') AS has_reason__retention         , BOOLOR_AGG(refab_reason.refab_reason_category_cleaned = 'implant_fit') AS has_reason__implant_fit ``` "
"2022-11-07 18:14:06.45582+00","no, this doesn't do anything by itself."
"2022-11-07 18:31:56.622478+00","`5Gi` should be fine. Especially with https://github.com/orthly/root-canal/pull/181 shipping."
"2022-11-07 18:39:09.06248+00","There's still [one more likely failure](https://sourcegraph.sourcegraph.com/-/editor?remote_url=https://github.com/sourcegraph/sourcegraph.git&branch=mv/auditlog/security-events/github-gitlub-login&file=enterprise/cmd/frontend/internal/auth/oauth/session.go&start_row=143&start_col=49&end_row=143&end_col=49&editor=JetBrains&version=v2.0.1) that I'd rather check before going for the success claim, so I'll leave this in tact for now."
"2022-11-07 18:40:36.812496+00","Yes good point! Take a look now, I added better logic with a comment for context"
"2022-11-07 18:41:06.576815+00","Good point, added more reuse in [4d02359](https://github.com/sourcegraph/sourcegraph/pull/43903/commits/4d02359369a128c32d576f07332d0fe20f1c0958)"
"2022-11-07 19:27:03.109584+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     SELECT *     FROM {{ ref('ref_date_day') }}     WHERE base_date >= '2022-01-01'         AND base_date < CURRENT_DATE() ``` "
"2022-11-07 18:43:26.019589+00","Most of the `GhostButton` don't use borders so I'm assuming it's the reason this wasn't caught before, but for the testimonials controls we use ghost buttons that have borders, and I noticed that the color of the borders didn't match the text when hovering or focusing (was gray when the text folor was green, which looked odd, as if it was disabled)   Before  https://user-images.githubusercontent.com/111591346/200376376-9b6b1591-9cbe-4ff7-8ed5-db4df4e3560a.mov  After  https://user-images.githubusercontent.com/111591346/200376500-405f907d-cc61-4177-b274-6bbd85b2307b.mov       "
"2022-11-07 18:44:15.894462+00","I actually tried to dig it up, and it all seems just ""BACKEND"". We only use ""WEB"" in the tests. I agree that ""WEB"" actually sounds reasonable, though 🤔 I'll leave it be but if you have any additional context I'm happy to follow up with additional PR."
"2022-11-07 18:44:48.745568+00","Nice, love it!"
"2022-11-07 18:44:59.532546+00","```suggestion This page was updated on 2022-11-07. We will continue to make updates as offerings from both GitHub and Sourcegraph evolve.  ```"
"2022-11-07 18:45:00.005496+00","```suggestion # GitHub code search vs. Sourcegraph ```"
"2022-11-07 18:45:00.383935+00","```suggestion GitHub does not offer comprehensive insights that account for the content of the code itself. Rather, GitHub’s insights are based primarily on GitHub’s product-level data. GitHub offers [dependency insights](https://docs.github.com/en/enterprise-cloud@latest/admin/policies/enforcing-policies-for-your-enterprise/enforcing-policies-for-dependency-insights-in-your-enterprise) that show all the packages your organization’s repositories depend on, e.g. aggregated information about security advisories and licenses.  ```"
"2022-11-07 18:45:00.898485+00","```suggestion **Code navigation** helps you explore code in depth. It includes features such as “Go to definition” and “Find references,” which let you quickly move between files to understand code. ```"
"2022-11-07 18:45:02.072572+00","```suggestion ####  App activity insights ```"
"2022-11-07 18:45:02.71344+00","```suggestion ```"
"2022-11-07 19:14:11.491733+00","Do you mean this logic? ```ts             if (                 Array.isArray(e.response?.errors) &&                 e.response.errors.find((err: any) => err.message.toLowerCase() === 'not found')             ) {                   ErrorUtils.reportError({                     cause: 'Failed to query manufacturer integrations',                     err: e,                     severity: ErrorSeverity.Critical,                     team: 'Supply'                 });             }             throw e; ```"
"2022-11-07 18:45:00.999034+00","```suggestion ## Searching code ```"
"2022-11-07 18:56:46.223785+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     SELECT         *         , LOWER(             REPLACE(                 REPLACE(REPLACE(REPLACE(REPLACE(refab_reason_category, ' ', '_'), '(', ''), ')', ''), '/', '_') , '-' , '_'             )         ) AS refab_reason_category_cleaned     FROM lab_order_reason_vm_enriched ``` "
"2022-11-07 18:56:46.296141+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     SELECT         orders.order_id           , BOOLOR_AGG(refab_reason.refab_reason_category_cleaned = 'margin') AS has_reason__margin         , BOOLOR_AGG(refab_reason.refab_reason_category_cleaned = 'shade') AS has_reason__shade         , BOOLOR_AGG(             refab_reason.refab_reason_category_cleaned = 'interproximal_contact'         ) AS has_reason__interproximal_contact         , BOOLOR_AGG(refab_reason.refab_reason_category_cleaned = 'design_aesthetics') AS has_reason__design_aesthetics         , BOOLOR_AGG(refab_reason.refab_reason_category_cleaned = 'lost_order') AS has_reason__lost_order         , BOOLOR_AGG(refab_reason.refab_reason_category_cleaned = 'broken_appliance') AS has_reason__broken_appliance         , BOOLOR_AGG(refab_reason.refab_reason_category_cleaned = 'occlusal_contact') AS has_reason__occlusal_contact         , BOOLOR_AGG(refab_reason.refab_reason_category_cleaned = 'fit') AS has_reason__fit         , BOOLOR_AGG(             refab_reason.refab_reason_category_cleaned = 'wrong_missing_items'         ) AS has_reason__wrong_missing_items         , BOOLOR_AGG(refab_reason.refab_reason_category_cleaned = 'other') AS has_reason__other         , BOOLOR_AGG(refab_reason.refab_reason_category_cleaned = 'anatomy') AS has_reason__anatomy         --, BOOLOR_AGG(refab_reason.refab_reason_category_cleaned = 'intaglio_interior_of_crown') AS has_reason__intaglio_interior_of_crown         , BOOLOR_AGG(refab_reason.refab_reason_category_cleaned = 'partial_set_up') AS has_reason__partial_set_up         , BOOLOR_AGG(refab_reason.refab_reason_category_cleaned = 'crown_design') AS has_reason__crown_design         --, BOOLOR_AGG(refab_reason.refab_reason_category_cleaned = 'restoration_did_not_seat_intra_orally') AS has_reason__restoration_did_not_seat_intra_orally         , BOOLOR_AGG(refab_reason.refab_reason_category_cleaned = 'abutment_fit') AS has_reason__abutment_fit         , BOOLOR_AGG(             refab_reason.refab_reason_category_cleaned = 'change_order_set_up'         ) AS has_reason__change_order_set_up         , BOOLOR_AGG(refab_reason.refab_reason_category_cleaned = 'abutment_design') AS has_reason__abutment_design         , BOOLOR_AGG(refab_reason.refab_reason_category_cleaned = 'crown_fit') AS has_reason__crown_fit         --, BOOLOR_AGG(refab_reason.refab_reason_category_cleaned = 'abutment_fit_intra_oral') AS has_reason__abutment_fit_intra_oral         , BOOLOR_AGG(refab_reason.refab_reason_category_cleaned = 'screw_fit') AS has_reason__screw_fit         , BOOLOR_AGG(refab_reason.refab_reason_category_cleaned = 'model_fit') AS has_reason__model_fit         , BOOLOR_AGG(refab_reason.refab_reason_category_cleaned = 'None') AS has_reason__none         , BOOLOR_AGG(refab_reason.refab_reason_category_cleaned = 'product_defect') AS has_reason__product_defect         , BOOLOR_AGG(refab_reason.refab_reason_category_cleaned = 'fault') AS has_reason__fault         , BOOLOR_AGG(refab_reason.refab_reason_category_cleaned = 'retention') AS has_reason__retention         , BOOLOR_AGG(refab_reason.refab_reason_category_cleaned = 'implant_fit') AS has_reason__implant_fit ``` "
"2022-11-07 18:57:57.160127+00","I don't know, I just followed otters components"
"2022-11-07 19:16:06.988417+00","Yupp"
"2022-11-07 19:23:24.240684+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion  , datespine AS ( ``` "
"2022-11-07 19:23:24.388326+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     SELECT *     FROM {{ ref('stg_sales_roster') }} ``` "
"2022-11-07 19:23:24.479806+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     SELECT DISTINCT datespine.month_start     FROM datespine ``` "
"2022-11-07 19:23:25.162136+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion  , opportunities AS ( ``` "
"2022-11-07 19:23:25.327244+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion  , rep_list AS ( ``` "
"2022-11-07 19:23:25.346264+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     SELECT *     FROM {{ ref('fact_sf_opportunity') }} ``` "
"2022-11-07 19:23:25.355823+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion  , pursuits AS ( ``` "
"2022-11-07 19:23:25.409531+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     SELECT         month_start ``` "
"2022-11-07 19:23:26.06433+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     FROM quotas ``` "
"2022-11-07 19:23:26.069938+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     SELECT DISTINCT         rep_id ``` "
"2022-11-07 19:23:26.278716+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion  , meetings AS ( ``` "
"2022-11-08 16:20:29.36248+00","Let's remove the ""moderate to high"" wording, because I think that makes this feel extra imprecise. I think ""moderate"" is OK for now until we have real data or a metric.  ```suggestion    <td>Moderate (some false positives) ```"
"2022-11-07 19:23:26.308052+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion  , months AS ( ``` "
"2022-11-07 19:23:30.136268+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     SELECT         DATE(DATE_TRUNC('month', milestone_meeting_set_at)) AS month_start         , main_owner__owner_name         , COUNT(DISTINCT identifiers__pursuit_id) AS meetings_set     FROM pursuits     WHERE milestone_meeting_set_at IS NOT NULL     GROUP BY 1, 2 ``` "
"2022-11-07 19:23:26.348148+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion  , contracts AS ( ``` "
"2022-11-07 19:23:29.42859+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     FROM months     CROSS JOIN reps ``` "
"2022-11-07 19:23:29.77749+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion  , reps AS ( ``` "
"2022-11-07 19:27:10.3236+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion LEFT OUTER JOIN prospected ``` "
"2022-11-07 19:59:03.515526+00","good call!"
"2022-11-07 20:26:47.508171+00","I think we can rephrase this comment here to be: ```suggestion        // The physical measurements table should be hidden for data streams stations        // since there's no way to draw/measure on them         if (this.activeUnitCardType === 'data') {             measurementsSection.innerHTML = '';             measurementsTitle.innerHTML = '';             return;         } ```"
"2022-11-07 19:23:27.322963+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion LEFT OUTER JOIN quotas     USING (rep_name, month_start) LEFT OUTER JOIN closed ``` "
"2022-11-07 19:23:29.041486+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion  , closed AS ( ``` "
"2022-11-07 19:23:37.913576+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     , rep_name ``` "
"2022-11-07 19:23:41.074464+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     FROM sales_rep_history     LEFT OUTER JOIN sf_users ``` "
"2022-11-07 19:27:13.150999+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion LEFT OUTER JOIN contracts ``` "
"2022-11-07 19:23:28.231974+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     SELECT         DATE(DATE_TRUNC('month', milestone_prospected_at)) AS month_start         , main_owner__owner_name         , COUNT(DISTINCT identifiers__pursuit_id) AS pursuits_prospected     FROM pursuits     WHERE milestone_prospected_at IS NOT NULL     GROUP BY 1, 2 ``` "
"2022-11-07 19:23:28.242781+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion  , created AS ( ``` "
"2022-11-07 19:23:28.287381+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     SELECT         DATE_TRUNC('month', contract_signed_coalesced_date) AS month_start         , opportunity_owner__name         , COUNT(DISTINCT identifiers__opportunity_id) AS contracts_signed     FROM opportunities     WHERE contract_signed_coalesced_date IS NOT NULL     GROUP BY 1, 2 ``` "
"2022-11-07 19:23:28.364334+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion  SELECT     rep_list.month_start ``` "
"2022-11-07 19:23:28.391335+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     SELECT         DATE_TRUNC('month', close_date) AS month_start         , opportunity_owner__name         , COUNT(             DISTINCT CASE WHEN opportunity_details__stage_name = 'Closed Won' THEN identifiers__opportunity_id END         ) AS opportunties_won         , COUNT(             DISTINCT CASE WHEN opportunity_details__stage_name = 'Closed Lost' THEN identifiers__opportunity_id END         ) AS opportunties_lost     FROM opportunities     WHERE close_date IS NOT NULL     GROUP BY 1, 2 ``` "
"2022-11-07 19:27:02.092522+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     SELECT *     FROM {{ ref('fact_sf_opportunity') }} ``` "
"2022-11-07 19:23:29.415351+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     SELECT         DATE(DATE_TRUNC('month', opportunity_created_at)) AS month_start         , opportunity_owner__name         , COUNT(DISTINCT identifiers__opportunity_id) AS opportunties_created     FROM opportunities     GROUP BY 1, 2 ``` "
"2022-11-07 19:23:30.678943+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion  , prospected AS ( ``` "
"2022-11-07 19:23:31.186033+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     , COALESCE(quotas.ae_quota_during_month, 0) AS ae_quota_during_month     , COALESCE(closed.opportunties_won, 0) AS opportunties_won     , COALESCE(closed.opportunties_lost, 0) AS opportunties_lost     , COALESCE(contracts.contracts_signed, 0) AS contracts_signed     , COALESCE(created.opportunties_created, 0) AS opportunties_created     , COALESCE(meetings_set, 0) AS meetings_set     , COALESCE(pursuits_prospected, 0) AS pursuits_prospected ``` "
"2022-11-07 19:23:32.712506+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion LEFT OUTER JOIN contracts ``` "
"2022-11-07 19:23:33.607844+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion LEFT OUTER JOIN created ``` "
"2022-11-07 19:23:36.859973+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion LEFT OUTER JOIN prospected ``` "
"2022-11-07 19:27:04.326222+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion  FROM quotas ``` "
"2022-11-07 21:35:18.977878+00","Having this call here plus a similar call on line 148 (inside the `searchUpdatedHandler` will make it so that two `search` requests are triggered where only one (the latter) should suffice."
"2022-11-07 19:23:37.291396+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     AND rep_list.month_start = prospected.month_start ``` "
"2022-11-07 19:23:37.781921+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion LEFT OUTER JOIN meetings ``` "
"2022-11-07 19:23:38.462543+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion      SELECT         rep.id AS rep_id ``` "
"2022-11-07 19:27:02.273108+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion  ) ``` "
"2022-11-07 19:27:02.492485+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     SELECT *     FROM {{ ref('fact_pursuit') }}     WHERE milestone_meeting_set_at IS NOT NULL OR milestone_prospected_at IS NOT NULL ``` "
"2022-11-07 19:27:02.822587+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion  FROM datespine ``` "
"2022-11-07 19:27:03.318904+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion LEFT OUTER JOIN created ``` "
"2022-11-07 19:27:04.058176+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     SELECT DISTINCT datespine.month_start     FROM datespine ``` "
"2022-11-07 19:27:15.08785+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     FROM sales_rep_history     LEFT OUTER JOIN sf_users ``` "
"2022-11-07 19:27:03.338469+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     SELECT DISTINCT         rep_id ``` "
"2022-11-07 19:27:03.613644+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion  GROUP BY 1, 2 ``` "
"2022-11-07 19:27:03.962505+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion   ``` "
"2022-11-07 19:27:06.925839+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     SELECT         DATE(DATE_TRUNC('month', milestone_meeting_set_at)) AS month_start         , main_owner__owner_name         , COUNT(DISTINCT identifiers__pursuit_id) AS meetings_set     FROM pursuits     WHERE milestone_meeting_set_at IS NOT NULL     GROUP BY 1, 2 ``` "
"2022-11-07 19:17:16.700714+00","@philipp-spiess Oh, thanks for the &&  Are you saying we should run git diff with the `--no-pager` param? "
"2022-11-07 20:05:55.507448+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion ( SELECT DISTINCT ``` "
"2022-11-07 20:15:04.082487+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     SELECT * FROM {{ source('salesforce', 'opportunity_stage') }} ``` "
"2022-11-07 19:27:04.480832+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion  SELECT     rep_list.month_start ``` "
"2022-11-07 19:27:05.040178+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion  WHERE milestone_meeting_set_at IS NOT NULL OR milestone_prospected_at IS NOT NULL ``` "
"2022-11-07 19:27:05.040246+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     SELECT         DATE(DATE_TRUNC('month', milestone_prospected_at)) AS month_start         , main_owner__owner_name         , COUNT(DISTINCT identifiers__pursuit_id) AS pursuits_prospected     FROM pursuits     WHERE milestone_prospected_at IS NOT NULL     GROUP BY 1, 2 ``` "
"2022-11-07 19:27:10.88638+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     SELECT         DATE_TRUNC('month', contract_signed_coalesced_date) AS month_start         , opportunity_owner__name         , COUNT(DISTINCT identifiers__opportunity_id) AS contracts_signed     FROM opportunities     WHERE contract_signed_coalesced_date IS NOT NULL     GROUP BY 1, 2 ``` "
"2022-11-07 19:29:15.562473+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion LEFT OUTER JOIN quotas     USING (rep_name, month_start) LEFT OUTER JOIN closed ``` "
"2022-11-07 20:13:29.267147+00","i pushed style changes and also fixed this, removed the coalesce, and removed the direct referencing from source (created base model for opp_stages)"
"2022-11-07 19:27:05.472508+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     , COALESCE(quotas.ae_quota_during_month, 0) AS ae_quota_during_month     , COALESCE(closed.opportunties_won, 0) AS opportunties_won     , COALESCE(closed.opportunties_lost, 0) AS opportunties_lost     , COALESCE(contracts.contracts_signed, 0) AS contracts_signed     , COALESCE(created.opportunties_created, 0) AS opportunties_created     , COALESCE(meetings_set, 0) AS meetings_set     , COALESCE(pursuits_prospected, 0) AS pursuits_prospected ``` "
"2022-11-07 19:27:05.582483+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     FROM quotas ``` "
"2022-11-07 19:27:05.986726+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     FROM months     CROSS JOIN reps ``` "
"2022-11-07 19:27:06.266716+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion  GROUP BY 1, 2 ``` "
"2022-11-07 19:27:07.242016+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion  CROSS JOIN reps ``` "
"2022-11-07 19:27:09.787405+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     SELECT         DATE(DATE_TRUNC('month', opportunity_created_at)) AS month_start         , opportunity_owner__name         , COUNT(DISTINCT identifiers__opportunity_id) AS opportunties_created     FROM opportunities     GROUP BY 1, 2 ``` "
"2022-11-07 19:27:13.903693+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion LEFT OUTER JOIN created ``` "
"2022-11-07 19:27:15.840523+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     , rep_name ``` "
"2022-11-07 19:27:07.245395+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion  GROUP BY 1, 2 ``` "
"2022-11-07 19:27:09.782473+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     SELECT *     FROM {{ ref('fact_sf_opportunity') }} ``` "
"2022-11-07 19:29:27.613036+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     , COALESCE(quotas.ae_quota_during_month, 0) AS ae_quota_during_month     , COALESCE(closed.opportunties_won, 0) AS opportunties_won     , COALESCE(closed.opportunties_lost, 0) AS opportunties_lost     , COALESCE(contracts.contracts_signed, 0) AS contracts_signed     , COALESCE(created.opportunties_created, 0) AS opportunties_created     , COALESCE(meetings_set, 0) AS meetings_set     , COALESCE(pursuits_prospected, 0) AS pursuits_prospected ``` "
"2022-11-07 19:27:09.305189+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     SELECT         DATE_TRUNC('month', close_date) AS month_start         , opportunity_owner__name         , COUNT(             DISTINCT CASE WHEN opportunity_details__stage_name = 'Closed Won' THEN identifiers__opportunity_id END         ) AS opportunties_won         , COUNT(             DISTINCT CASE WHEN opportunity_details__stage_name = 'Closed Lost' THEN identifiers__opportunity_id END         ) AS opportunties_lost     FROM opportunities     WHERE close_date IS NOT NULL     GROUP BY 1, 2 ``` "
"2022-11-07 19:27:09.333721+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion  GROUP BY 1, 2 ``` "
"2022-11-07 19:27:09.500082+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion LEFT OUTER JOIN quotas     USING (rep_name, month_start) LEFT OUTER JOIN closed ``` "
"2022-11-07 19:29:39.382642+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     , COALESCE(quotas.ae_quota_during_month, 0) AS ae_quota_during_month     , COALESCE(closed.opportunties_won, 0) AS opportunties_won     , COALESCE(closed.opportunties_lost, 0) AS opportunties_lost     , COALESCE(contracts.contracts_signed, 0) AS contracts_signed     , COALESCE(created.opportunties_created, 0) AS opportunties_created     , COALESCE(meetings_set, 0) AS meetings_set     , COALESCE(pursuits_prospected, 0) AS pursuits_prospected ``` "
"2022-11-07 19:27:09.967511+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion LEFT OUTER JOIN meetings ``` "
"2022-11-07 19:27:10.162477+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     , COALESCE(quotas.ae_quota_during_month, 0) AS ae_quota_during_month     , COALESCE(closed.opportunties_won, 0) AS opportunties_won     , COALESCE(closed.opportunties_lost, 0) AS opportunties_lost     , COALESCE(contracts.contracts_signed, 0) AS contracts_signed     , COALESCE(created.opportunties_created, 0) AS opportunties_created     , COALESCE(meetings_set, 0) AS meetings_set     , COALESCE(pursuits_prospected, 0) AS pursuits_prospected ``` "
"2022-11-07 19:27:10.842537+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion LEFT OUTER JOIN contracts ``` "
"2022-11-07 19:27:11.018554+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     AND rep_list.month_start = prospected.month_start ``` "
"2022-11-07 19:27:13.915238+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion  SELECT     rep_list.month_start ``` "
"2022-11-07 19:27:14.701393+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion LEFT OUTER JOIN meetings ``` "
"2022-11-07 19:27:14.861434+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion LEFT OUTER JOIN quotas     USING (rep_name, month_start) LEFT OUTER JOIN closed ``` "
"2022-11-07 19:27:24.304809+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     SELECT *     FROM {{ ref('ref_date_day') }}     WHERE base_date >= '2022-01-01'         AND base_date < CURRENT_DATE() ``` "
"2022-11-07 19:27:24.329207+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     SELECT *     FROM {{ ref('fact_sf_opportunity') }} ``` "
"2022-11-07 19:27:24.428389+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     SELECT *     FROM {{ ref('fact_pursuit') }}     WHERE milestone_meeting_set_at IS NOT NULL OR milestone_prospected_at IS NOT NULL ``` "
"2022-11-07 19:27:24.812913+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion  ) ``` "
"2022-11-07 19:27:25.35738+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     SELECT DISTINCT datespine.month_start     FROM datespine ``` "
"2022-11-07 19:27:25.470748+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion  ) ``` "
"2022-11-07 19:27:25.752939+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     SELECT         month_start ``` "
"2022-11-07 21:38:37.075496+00","i think these need to be optional since legacy events won't have them"
"2022-11-07 19:27:25.541231+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion  ) ``` "
"2022-11-07 19:27:29.651201+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion LEFT OUTER JOIN meetings ``` "
"2022-11-07 19:29:06.984952+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion LEFT OUTER JOIN created ``` "
"2022-11-07 19:29:18.565674+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion LEFT OUTER JOIN contracts ``` "
"2022-11-07 19:27:26.289754+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion  ) ``` "
"2022-11-07 19:27:26.452033+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     , COALESCE(quotas.ae_quota_during_month, 0) AS ae_quota_during_month     , COALESCE(closed.opportunties_won, 0) AS opportunties_won     , COALESCE(closed.opportunties_lost, 0) AS opportunties_lost     , COALESCE(contracts.contracts_signed, 0) AS contracts_signed     , COALESCE(created.opportunties_created, 0) AS opportunties_created     , COALESCE(meetings_set, 0) AS meetings_set     , COALESCE(pursuits_prospected, 0) AS pursuits_prospected ``` "
"2022-11-07 20:05:54.937458+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion LEFT OUTER JOIN lead_mapping                 ON opportunity.lead_source = lead_mapping.lead_source ``` "
"2022-11-07 19:27:26.637631+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     SELECT         DATE(DATE_TRUNC('month', opportunity_created_at)) AS month_start         , opportunity_owner__name         , COUNT(DISTINCT identifiers__opportunity_id) AS opportunties_created     FROM opportunities     GROUP BY 1, 2 ``` "
"2022-11-07 19:27:28.714834+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     SELECT         DATE(DATE_TRUNC('month', milestone_prospected_at)) AS month_start         , main_owner__owner_name         , COUNT(DISTINCT identifiers__pursuit_id) AS pursuits_prospected     FROM pursuits     WHERE milestone_prospected_at IS NOT NULL     GROUP BY 1, 2 ``` "
"2022-11-07 19:27:29.222007+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     FROM quotas ``` "
"2022-11-07 19:27:32.889706+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion  ) ``` "
"2022-11-07 19:27:33.251356+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     SELECT         DATE_TRUNC('month', close_date) AS month_start         , opportunity_owner__name         , COUNT(             DISTINCT CASE WHEN opportunity_details__stage_name = 'Closed Won' THEN identifiers__opportunity_id END         ) AS opportunties_won         , COUNT(             DISTINCT CASE WHEN opportunity_details__stage_name = 'Closed Lost' THEN identifiers__opportunity_id END         ) AS opportunties_lost     FROM opportunities     WHERE close_date IS NOT NULL     GROUP BY 1, 2 ``` "
"2022-11-07 19:43:41.776153+00","no, I have no clue, this was old code, I will change it (more needs to be changed... mainly style)"
"2022-11-07 19:27:26.694198+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion  ) ``` "
"2022-11-07 19:27:27.400377+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion   ``` "
"2022-11-07 19:27:27.493213+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion  ) ``` "
"2022-11-07 19:27:27.658813+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion  SELECT     rep_list.month_start ``` "
"2022-11-07 19:27:27.914666+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion  ) ``` "
"2022-11-07 19:27:28.69242+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion LEFT OUTER JOIN created ``` "
"2022-11-07 19:27:29.009843+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     SELECT         DATE(DATE_TRUNC('month', milestone_meeting_set_at)) AS month_start         , main_owner__owner_name         , COUNT(DISTINCT identifiers__pursuit_id) AS meetings_set     FROM pursuits     WHERE milestone_meeting_set_at IS NOT NULL     GROUP BY 1, 2 ``` "
"2022-11-07 19:27:29.889139+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     SELECT         DATE_TRUNC('month', contract_signed_coalesced_date) AS month_start         , opportunity_owner__name         , COUNT(DISTINCT identifiers__opportunity_id) AS contracts_signed     FROM opportunities     WHERE contract_signed_coalesced_date IS NOT NULL     GROUP BY 1, 2 ``` "
"2022-11-07 19:27:29.981624+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     SELECT DISTINCT         rep_id ``` "
"2022-11-07 19:27:30.213322+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     FROM months     CROSS JOIN reps ``` "
"2022-11-07 19:27:31.194664+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion LEFT OUTER JOIN contracts ``` "
"2022-11-07 19:29:06.76235+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion LEFT OUTER JOIN quotas     USING (rep_name, month_start) LEFT OUTER JOIN closed ``` "
"2022-11-07 19:27:30.932475+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion LEFT OUTER JOIN quotas     USING (rep_name, month_start) LEFT OUTER JOIN closed ``` "
"2022-11-07 19:27:33.286601+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion LEFT OUTER JOIN prospected ``` "
"2022-11-07 19:29:07.108364+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     , COALESCE(quotas.ae_quota_during_month, 0) AS ae_quota_during_month     , COALESCE(closed.opportunties_won, 0) AS opportunties_won     , COALESCE(closed.opportunties_lost, 0) AS opportunties_lost     , COALESCE(contracts.contracts_signed, 0) AS contracts_signed     , COALESCE(created.opportunties_created, 0) AS opportunties_created     , COALESCE(meetings_set, 0) AS meetings_set     , COALESCE(pursuits_prospected, 0) AS pursuits_prospected ``` "
"2022-11-07 19:29:07.899539+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion LEFT OUTER JOIN contracts ``` "
"2022-11-07 19:29:08.086579+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     , COALESCE(quotas.ae_quota_during_month, 0) AS ae_quota_during_month     , COALESCE(closed.opportunties_won, 0) AS opportunties_won     , COALESCE(closed.opportunties_lost, 0) AS opportunties_lost     , COALESCE(contracts.contracts_signed, 0) AS contracts_signed     , COALESCE(created.opportunties_created, 0) AS opportunties_created     , COALESCE(meetings_set, 0) AS meetings_set     , COALESCE(pursuits_prospected, 0) AS pursuits_prospected ``` "
"2022-11-07 19:56:51.994158+00","> Are you saying we should run git diff with the --no-pager param?  Oh, no, in the script this is not necessary. I was just leaving this as context of how I tested it 🙈"
"2022-11-07 19:29:08.097772+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion LEFT OUTER JOIN quotas     USING (rep_name, month_start) LEFT OUTER JOIN closed ``` "
"2022-11-07 19:29:10.264637+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion LEFT OUTER JOIN contracts ``` "
"2022-11-07 19:29:10.543806+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     , COALESCE(quotas.ae_quota_during_month, 0) AS ae_quota_during_month     , COALESCE(closed.opportunties_won, 0) AS opportunties_won     , COALESCE(closed.opportunties_lost, 0) AS opportunties_lost     , COALESCE(contracts.contracts_signed, 0) AS contracts_signed     , COALESCE(created.opportunties_created, 0) AS opportunties_created     , COALESCE(meetings_set, 0) AS meetings_set     , COALESCE(pursuits_prospected, 0) AS pursuits_prospected ``` "
"2022-11-07 19:29:11.181846+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion LEFT OUTER JOIN created ``` "
"2022-11-07 19:29:12.07602+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion LEFT OUTER JOIN quotas     USING (rep_name, month_start) LEFT OUTER JOIN closed ``` "
"2022-11-07 19:29:13.082518+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion LEFT OUTER JOIN meetings ``` "
"2022-11-07 19:56:33.353871+00","These changes are unrelated. Are they intentional?"
"2022-11-07 19:57:52.076225+00","can we make this static and add some tests?"
"2022-11-07 19:58:02.105263+00","oh i realised i can;t do that because they're date-time fields so they'll have their own group by definition with all the time/date options"
"2022-11-07 20:05:53.276175+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     SELECT * FROM {{ source('salesforce', 'opportunity_stage') }} ``` "
"2022-11-07 20:05:53.387024+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion         , opportunity_stage.sort_order  ``` "
"2022-11-07 20:05:53.823374+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion         AND opportunity.is_deleted = false ``` "
"2022-11-07 20:05:53.936891+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     ORDER BY opportunity_stage.sort_order ASC) ``` "
"2022-11-07 20:05:54.075184+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion LEFT OUTER JOIN campaign_members AS members                 ON opportunity.lead_id = members.lead_id                 AND members.campaign_member_type = 'Lead' ``` "
"2022-11-07 20:05:54.745919+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion (     SELECT * FROM          (VALUES             ('Discovery Call Scheduled', 1)         , ('Contract Sent', 2)         , ('Confirming', 3)         , ('Contract Signed', 4)         , ('Closed Won', 29)         , ('Closed Lost', 30) ``` "
"2022-11-07 20:05:56.139049+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion ) ``` "
"2022-11-07 20:10:24.147482+00","These are wrong - the err is that we failed to query, but the cause is the error we caught"
"2022-11-07 20:11:06.553951+00","I think we (I) forgot to re-gen the docs when we released 4.1.0, this was technically introduced then. 😅"
"2022-11-07 20:15:01.00844+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion LEFT OUTER JOIN lead_mapping                 ON opportunity.lead_source = lead_mapping.lead_source ``` "
"2022-11-07 20:15:01.103686+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     SELECT * FROM {{ ref('base_salesforce_opportunity_stages') }} ``` "
"2022-11-07 20:15:49.371999+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion LEFT OUTER JOIN lead_mapping                 ON opportunity.lead_source = lead_mapping.lead_source ``` "
"2022-11-07 20:18:00.848571+00","Great point 😅, addressed this and the other comments in my recent PR."
"2022-11-07 20:18:19.484452+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion LEFT OUTER JOIN lead_mapping                 ON opportunity.lead_source = lead_mapping.lead_source ``` "
"2022-11-07 21:06:54.67221+00","Just realized the current impl is not sending the emails since we are not passing in a `DoctorNotificationPreferencesGroups`. Should we make this a non-doctor email? Did you mean a specific type when you said `adhoc` doctor email?"
"2022-11-07 16:58:12.526353+00","With more usages of the `Search` component throughout the app this seems like it could be useful to have as a separate method that'd evaluate the presence of filters instead?  E.g.:  ```ts hasFilters(): boolean;  ```  Metrics could benefit from that [here](https://github.com/dfxmachina/frontend/blob/master/app/modules/metrics/metrics-controller.tsx#L1183-L1184) and we'd be able to avoid making the `JSON.stringify` calls (above) if no filters have been defined. "
"2022-11-07 21:23:48.857002+00","I have a love/hate relationship with TypeScript.  moving on."
"2022-11-07 21:35:19.132495+00","I'd say we can leave it as is for now since most likely this method will change as we add new things to the page; it's up to you though 😉 "
"2022-11-07 21:35:19.166249+00","Missing documentation."
"2022-11-07 21:35:19.21087+00","You can remove multiple classes at once, i.e.:  ```ts el.classList.remove('error', 'loading'); ```"
"2022-11-07 21:35:19.724403+00","I'm curious; is there a reason why you went with a `Component` instead of a `Block`? 🤔 "
"2022-11-07 21:35:19.956062+00","Missing documentation?"
"2022-11-07 21:35:20.519627+00","Missing documentation?"
"2022-11-07 21:35:20.900512+00","Is there a reason why we can no longer have this as a self-closing tag element?"
"2022-11-07 21:35:21.485279+00","If `kpis` is public, we might as well set it directly and drop this setter method?"
"2022-11-07 21:35:22.466812+00","Let's use `.textContent` instead so that it's safer."
"2022-11-07 21:36:34.508161+00","resolved first in a sync, in summary it's per series because we would need to always display this information per series, so we would just re-map the data on the client  I've fixed the second point"
"2022-11-07 22:40:19.591566+00","This seems like the TLDR that should go at the very top of the doc "
"2022-11-07 21:43:46.230451+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion         , DENSE_RANK() OVER (             PARTITION BY labtrac_order_enriched_id ORDER BY labtrac_order_procedures.sequence         ) AS sequence_rank ``` "
"2022-11-07 21:43:46.248405+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     , IFF(         labtrac_order_task.sequence_rank = 1 , labtrac_order.labtrac_order_created_at , labtrac_order_task.prev_task_closed_at     ) AS task_created_at ``` "
"2022-11-07 21:43:46.665416+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion -- LEFT OUTER JOIN labtrac_production_case_steps --     ON labtrac_production_case_steps.launchedstepid = labtrac_order_procedures.ref ``` "
"2022-11-07 21:43:49.133866+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion         OVER (PARTITION BY previous_sequence.labtrac_order_enriched_id, previous_sequence.sequence_rank) ``` "
"2022-11-07 21:43:49.284414+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion         OVER (PARTITION BY previous_sequence.labtrac_order_enriched_id, previous_sequence.sequence_rank) ``` "
"2022-11-07 21:46:49.949961+00","Thanks for the catch – done"
"2022-11-07 21:54:40.438514+00","Verified on tuple. Doesn't need an index. "
"2022-11-07 21:58:36.130971+00","This might be too pedantic, but ""integration"" conveys a certain level of support. In my mind, code host integration means that it appears as an option within Sourcegraph to sync code from. This is true of the named code hosts in the table below.   If a user has to use the Sourcegraph CLI (which is required for the last row: Any git-based code host), then I'd argue we don't have an ""integration"" with that code host. Instead, we support syncing code from that code host even though it's not actually integrated. I think a more correct name for this table is ""Where can [tool] sync code from"". I know that's not as clean of a title :) "
"2022-11-07 22:01:10.122478+00","```suggestion Please note: this page was last updated 2022-11-07, and we will continue to make updates as offerings from both GitHub and Sourcegraph evolve.  ```"
"2022-11-07 22:01:10.54698+00","```suggestion - [See how GitHub code search compares to Sourcegraph](/github-vs-sourcegraph.md) ```"
"2022-11-07 22:01:13.798885+00","The ""checks"" and ""x's"" are a bit hidden when there is a lot of copy in the cell. I wonder if there is a way to make the checks/x's a different color or the font in the table smaller? This is not blocking feedback.   ✓ Limitations include:  Files over 350 KiB and empty files are excluded Only UTF-8 encoded files are included Very large repositories may not be indexed Vendored and generated code is excluded (as determined by [Enry](https://github.com/go-enry/go-enry))"
"2022-11-07 22:01:34.051731+00","to test easier... lol idk if necessary"
"2022-11-07 22:02:15.267038+00","Well you can get it the same way this PR does, `search.getData().filters.length`. That call site could probably use this `ifUnfiltered` flag... not sure we need a separate helper for something this straightforward, but could be something to consider in a followup if there are more places that would benefit from it."
"2022-11-07 22:02:31.036128+00","I realize this is existing code, but this is actually kinda buggy - the sort order is VERY unstable, so the pagination will be extra fuckey. Should be more like `status DESC, id ASC`"
"2022-11-07 22:04:49.552481+00","That's a good point. We could probably remove the title from the table (none of the other tables have titles). "
"2022-11-07 22:32:35.018395+00","When do we ever use this? I've never seen a dagger modifier key O_o"
"2022-11-07 22:09:04.224631+00","Honestly I find this table kind of confusing, especially because (I think) it's just rehashing what the previous paragraphs are saying. The fact that the table contains bullets and checks and normal text and asterisks made it hard to parse.   I wonder if individual sub-sections (Branches, Forks, Repositories) with a tight blurb underneath each comparing GH and Sourcegraph would be cleaner. "
"2022-11-07 22:13:59.658127+00","I feel like this section would benefit so much from having some specific examples. It doesn't feel punchy enough. I'm the target audience and I left the section saying ""so what?""   If nothing else, if we believe structural search is our trump card compared to GitHub in this section, why not lead off with that and tell me why I should be excited by it. After we can say: oh yeah, GH only supports X and Y which Sourcegraph does as well. "
"2022-11-07 22:16:17.352485+00","Updated"
"2022-11-07 22:16:26.294114+00","Updated"
"2022-11-07 22:17:14.832474+00","@tyler-gibbons - Can you not update the type-guard to be:  ``` const isActiveTaskOfType = (task: ActiveWorkflowTask<any> | null): task is ActiveWorkflowTask<T> =>                 task?.type === type; ```  Less coerced types, right?"
"2022-11-07 22:17:46.84342+00","```suggestion Sourcegraph can retrieve all search results. By default, Sourcegraph returns 500 search results, but this number can be increased by increasing the ‘count’ value. Sourcegraph can display a maximum of 1500 matches, but all matches can be fetched using the [src CLI](https://docs.sourcegraph.com/cli/quickstart), the [Stream API](https://docs.sourcegraph.com/api/stream_api), or [GraphQL API](https://docs.sourcegraph.com/api/graphql). You can also export the results via CSV.  ```"
"2022-11-07 22:20:25.154225+00","It is to provide visual padding between the sections of the 'notepad'"
"2022-11-07 22:23:03.251988+00","Mentioning ""a technology called Squirrel"" strikes me as an unncessary implementation detail, especially because we don't quantify how beneficial it is. "
"2022-11-07 22:24:25.705161+00","If I'm a discerning reader, I'm going to lose some trust if I see a row titled ""Accuracy"" but we're using imprecise language like ""moderate"" and ""moderate to high"". I'd expect to see data. "
"2022-11-07 22:25:45.819094+00","Any filtering should occur outside of this method, see this [example](https://github.com/dfxmachina/frontend/pull/2523/#discussion_r1001119238) I had provided in previous iteration; i.e. at the `metric-card.test.ts` level instead so that this method can focus on asserting the expectations of a very specific boolean metric card  This also applies below."
"2022-11-07 22:25:45.854501+00","Let's declare this at the top of this file so that each constant can be easily re-used by different methods."
"2022-11-07 22:28:39.332468+00","```suggestion With [insights for Projects](https://docs.github.com/en/issues/planning-and-tracking-with-projects/viewing-insights-from-your-project/about-insights-for-projects) in GitHub, you can view, create, and customize charts that are built from the project’s data. [Organization activity insights](https://docs.github.com/en/enterprise-cloud@latest/organizations/collaborating-with-groups-in-organizations/viewing-insights-for-your-organization) help you understand how members of the organization are using GitHub, e.g. issue and pull request activity, top languages used, and cumulative information about where members spend their time.  ```"
"2022-11-07 22:25:45.930117+00","This plus the assertions on lines 234 and 236 should run against the metric matching `selector`, otherwise they're running against the very first metric which depending on the scenario at hand might not meet the expectations."
"2022-11-07 22:25:46.078782+00","Same thing as before: https://github.com/dfxmachina/frontend/pull/2523/#discussion_r1001136551"
"2022-11-07 22:47:57.650929+00","oh boy exception city"
"2022-11-07 22:25:46.18916+00","This comment was marked as resolved but afaict none of the concerns were addressed; can you please elaborate why?"
"2022-11-07 23:02:28.22313+00","also we should add the message to otherlylogger too right? or do we get that elsewhere?"
"2022-11-07 22:25:46.902477+00","As is `defectRatePercentage` is optional, what happens if it isn't provided?  Same question applies below for each assertion that is running against an optional property."
"2022-11-07 22:25:46.963112+00","Is the discrepancy between the classes on lines 417, 427 and 435 intentional?  ```ts metric-card-chart-stats-limit-stats metric-card-chart-limits-stats metric-card-chart-limits-stats ```"
"2022-11-07 22:25:47.07899+00","Typo: `have` > `has`."
"2022-11-07 22:25:49.656203+00","Can't the selector just be `.metric-card-type`?  Or better yet, based on my previous comments, `${selector} .metric-card-type`?  This also applies below."
"2022-11-07 22:32:36.944246+00","Don't forget to revert/remove this."
"2022-11-07 22:25:47.672489+00","This is also deviating from the suggested spec; also by saying that `options` are `Partial` it means they can be partially provided thus it makes the usage of `?` at each option's level no longer needed.  This also applies below."
"2022-11-07 22:25:47.77843+00","Is there a reason why we're deviating from the [suggested spec](https://github.com/dfxmachina/frontend/pull/2523/#pullrequestreview-1149734316)? I'd expect this to be a `selector` that would then be used by each of the following assertions to make sure each is scoped to a very specific metric.  This also applies below."
"2022-11-07 22:25:48.687092+00","Why is the `${}` needed around `limitsStats`?"
"2022-11-07 22:32:34.954376+00","Should this styling change only apply if the feature flag is on for search history? Same with the targetPadding on the dropdown."
"2022-11-07 22:25:51.867433+00","As I left in one of my previous comments, I don't understand why we seem to follow one pattern on one use-case and different patterns on others with regards to `filterByName` + `assert*MetricCard` vs. filtering within the `assert*MetricCard` method, I strongly suggest that for consistency, ease of maintenance and re-usability we follow the former throughout.  Also, I'd suggest that instead of declaring `booleanMetricCardWithNoLimits` at the `fixtures.ts` level we declare those here, at the assertions level for ease of readability and understanding of what's being asserted."
"2022-11-07 22:32:35.873665+00","Love this, much cleaner than before!"
"2022-11-07 22:32:36.963275+00","We don't want to immediately submit the search when selecting from the list?"
"2022-11-07 22:47:57.564257+00","while this does work, I feel like the more traditional approach is to have different classes for each situation. I think it's generally preferred (and more testable) to change which classes are applied rather than change what styles a given class contains (i think it actually creates a whole new class when any of the props change).  Doesn't matter at all, just something that caught my eye as a nit"
"2022-11-07 22:32:36.66038+00","Focused is locked inside when open, so can only toggle to open. ```suggestion                             aria-label=""Open search history"" ```"
"2022-11-07 22:32:36.866527+00","Thought: Instead of implementing the role ourselves, can we use the `Menu` component from Wildcard? Additionally, I think that `menu` makes more sense semantically here than `listbox` anyway since it's not a form control but a menu that lists options that will cause navigation (if the submission is immediate)."
"2022-11-07 22:32:37.682467+00","Should we still have these if the feature flag is off?"
"2022-11-07 22:32:37.958491+00","I don't think we should use this shortcut. On Macs with compact keyboards, Cmd+down is the same as the End key, which is used to scroll to the bottom of the page. This command is important so users can navigate to the bottom of search results."
"2022-11-07 22:33:26.279764+00","This was confusing to me. I suggest renaming to clarify that this is a modification of the existing `recentSearches` and adding comments to explain what this is doing.  ```suggestion     // Modify the recentSearches list to remove the context filter if it matches the     // currently selected context, as it will already be present when submitting the search.     const recentSearchesWithoutSelectedContext = useMemo(() => {         if (!recentSearches || !selectedSearchContextSpec) {             return undefined         }          return recentSearches.map(search => {             const searchContext = getGlobalSearchContextFilter(search.query)             if (searchContext && searchContext.spec === selectedSearchContextSpec) {                 return {                     ...search,                     query: omitFilter(search.query, searchContext?.filter),                 }             }             return search         })     }, [recentSearches, selectedSearchContextSpec]) ```"
"2022-11-07 22:33:27.278929+00","We need to add a hidden pause here of some kind to stop the screen reader from smooshing the date with the query. ```suggestion             <span class=""sr-only"">,</span>             <Timestamp date={search.timestamp} /> ```"
"2022-11-07 22:43:33.498727+00","CC @iskyOS "
"2022-11-07 22:34:34.813506+00","```suggestion GitHub has a REST API for web clients, but it is not yet documented. On the other hand, Sourcegraph offers different APIs that help you access code-related data available on a Sourcegraph instance. The [GraphQL API](https://docs.sourcegraph.com/api/graphql) accesses data stored and computed by Sourcegraph. This API can [fetch](https://docs.sourcegraph.com/api/graphql/examples) file contents without cloning a repository or search for a new API and determine all of the repositories that haven’t migrated to it yet. The [Stream API](https://docs.sourcegraph.com/api/stream_api) supports consuming search results as a stream of events and it can be used to [search](https://docs.sourcegraph.com/api/stream_api#example-curl) over all indexed repositories. Lastly, use the [interactive API explorer](https://sourcegraph.com/api/console#%7B%22query%22%3A%22%23%20Type%20queries%20here%2C%20with%20completion%2C%20validation%2C%20and%20hovers.%5Cn%23%5Cn%23%20Here's%20an%20example%20query%20to%20get%20you%20started%3A%5Cn%5Cnquery%20%7B%5Cn%20%20currentUser%20%7B%5Cn%20%20%20%20username%5Cn%20%20%7D%5Cn%20%20repositories(first%3A%201)%20%7B%5Cn%20%20%20%20nodes%20%7B%5Cn%20%20%20%20%20%20name%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%5Cn%22%7D) to build and test your API queries.  ```"
"2022-11-07 22:35:35.722649+00","We should render Ctrl as `^` on Mac ![image](https://user-images.githubusercontent.com/206864/200422261-2bc9172e-f330-4489-bf00-fe9ba38569b4.png) "
"2022-11-07 22:47:57.629221+00","```suggestion     if (targetScan.definition.type === 'review_scan') {         return areAllScansCompleted(scans, true);     } ```  Is this correct? Marginally more clear as to what's actually happening and also slighly more efficient because `areAllScansCompleted` will only be called in the case that it's the review step (this can also be achieved by replacing the variable `areAllOthersCompleted` with the function call inline in the existing implementation)."
"2022-11-07 22:47:57.721483+00","are we still able to jump to scan from checkout? (very well could be, just not sure if I'm missing something)"
"2022-11-07 22:47:58.539228+00","do this have to be a memo?"
"2022-11-07 22:47:58.743731+00","we jump if it is disabled?"
"2022-11-07 22:54:59.793351+00","it's not lol"
"2022-11-07 23:35:37.548288+00","```suggestion             element.append(document.createTextNode(placeholder)) ```"
"2022-11-07 22:58:29.240373+00","i think we can clean this up a bit but not repeating the logger code?  mine might be a bit malformed but the idea is to redefine status code in the different bocks and then just have one copy of the actual logger code thanks for taking care of this!  ``` let status_code = null;        try {             const response: AxiosResponse<DialpadSmsResponse> = await axios.post<DialpadSmsResponse>(                 `/sms?${this.DIALPAD_API_KEY}`,                 {                     text,                     to_numbers: [to_phone_number],                     user_id: this.FALL_BACK_CALL_CENTER_USER_ID, // TODO: make this configurable                     sender_group_type: this.DANDY_SENDER_TYPE,                     sender_group_id: this.FALL_BACK_CALL_CENTER_ID // TODO: make this configurable                 },                 {                     ...this.DIALPAD_API_CONFIG                 }             );              status_code = response.status                        return response.data;         } catch (e) {             if (axios.isAxiosError(e) && e.response) {                 status_code = e.response.status                          }               throw e; } }    this.dialpad_counter.increment(1, { status_code: status_code.toString() });    new OrthlyLogger('dialpad-sms-response', { status_code: status_code }); ```"
"2022-11-07 23:06:58.886705+00","I see what your trying to do going to have to edit it a little because the logger won't run after `throw e`"
"2022-11-07 23:08:27.372393+00","I think this needs to apply to the `metricCard` instead otherwise the metric's stats won't be accurate and the Control chart related ones will still be visible, see this: [screen capture](https://drive.google.com/file/d/1XD4-QARD3alXIbS8OcQlrmHE9ovAIiQZ/view?usp=sharing)"
"2022-11-07 23:13:08.712492+00","That works for this line, so I can make the change. The same strategy doesn't work for the  `.filter` call in `closedTasksOfType` sadly"
"2022-11-07 23:20:36.212471+00","Can we remove `&sm=0`? Seems superfluous to have it if it's the default."
"2022-11-07 23:20:36.22256+00","What does this do? O_O"
"2022-11-07 23:20:37.062478+00","Should any behavior change for the copy query button? Seems like it's going to be inconsistent because the copied query might be precise or smart, without a way to distinguish them."
"2022-11-07 23:20:38.102484+00","What happens if the VSCode extension is being used with an instance that doesn't support the `searchMode` parameter?"
"2022-11-07 23:35:11.314058+00","It's always accurate so long as the code graph data is fresh. Code graph data can get stale once code has been changed, but in that case, I believe we're falling back to search-based navigation anyway.  @macraig Is that understanding correct?"
"2022-11-07 23:37:58.356809+00","Unfortunately we don't have a quantifiable way to describe the accuracy differences. From my understanding, accuracy is variable based on if a codebase is using common names for symbols (because that's where false positives pop up).  We can change this to ""Some false positives"" for both to be more objective."
"2022-11-07 23:53:05.271423+00","never mind- saw it in the staging table! "
"2022-11-07 23:35:37.916979+00","I'm not sure if this should not be an `aria-placeholder` because a placeholder is an example of valid input. This, instead, is more of a label. So maybe we should use `aria-label` instead? Though currently `aria-label` already exists and is set to `Search query`. So maybe the best course of action here is to keep the placeholder hidden to screen readers since it's duplicating the work already being done by the label, and not set the `aria-placeholder` property.  ![image](https://user-images.githubusercontent.com/206864/200437363-dedfbd34-6b98-4c42-ae25-56fbd4fc6454.png) From https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-placeholder  Also, for the search history work where we are adding tips to the placeholder, I'm not sure how that could be handled in an accessible way. In general, we should favor always-visible labels instead of disappearing placeholders. This is not only taking screen reader users into account but also users with other disabilities (motor, cognitive, etc)."
"2022-11-07 23:39:07.916077+00","That's included to justify why some of our languages have ""high"" accuracy, but we don't have a docs page unpacking it, otherwise I'd link out. We can strike that sentence since it doesn't add much right now.  ```suggestion GitHub’s [search-based code navigation](https://docs.github.com/en/repositories/working-with-files/using-files/navigating-code-on-github) supports 10 languages. Sourcegraph’s [search-based code navigation](https://docs.sourcegraph.com/code_navigation/explanations/search_based_code_navigation) supports 40 languages. ```"
"2022-11-07 23:42:43.901229+00","Alternatively, add an optional label parameter here and, if not present, set aria-hidden to true. That would ensure that the icon always either has a label or is hidden."
"2022-11-07 23:42:43.979366+00","If there is no label, the icon should be hidden.  ```suggestion                 if (completion.type && completion.type in typeIconMap) {                     icon.setAttribute('aria-label', completion.type)                 } else {                     icon.setAttribute('aria-hidden', 'true')                 } ```  FWIW no icon seems to have labels when I checked this out to test it?  ![image](https://user-images.githubusercontent.com/206864/200438597-7e954b17-416b-438b-ad5a-de2a7eaea78c.png) "
"2022-11-07 23:43:57.598182+00","@iskyOS correct, we can also say Only SG's precise code nav is compiler-accurate or IDE-accurate if saying 100% sounds too sales-y. "
"2022-11-07 23:50:55.872014+00","Old school line. Haven't seen something like this for a while.  Just out of curiosity, can we use here arrow function instead of the named `historyMethod`? "
"2022-11-07 23:51:13.647724+00","what is the enriched ID? is that a combination of order and stage id?"
"2022-11-07 23:53:13.024291+00","I agree that the detail itself isn't that interesting, but until we have a better way to visualize heuristic-based vs code graph-based code nav, I think we should keep this in."
"2022-11-08 18:15:38.311304+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion ``` "
"2022-11-07 23:54:16.038253+00","when I used `areExecutorsEnabled` in the past if they were ever enabled even if they are no longer enabled, it will still be true. Can you use that? I think it makes sense to hide it for the case that they are not enabled"
"2022-11-07 23:57:30.011784+00","small comment, but why do we call this labtrac_product_id as opposed to just product_id? Is this because it differs from our own internal product ids?"
"2022-11-07 23:59:16.088609+00","for consistency, can we break out remakeqty, discountrate, pridcedup, taxrate, and unitcost into two works like you did with the field names above?"
"2022-11-08 00:00:40.935601+00","are these the 1000, 1200, 2000 numbers that were referenced in the labtrac emails? or are these 1,2,3, etc?"
"2022-11-08 00:01:33.292402+00","Can do, I haven't finalized much of this model yet, mostly just dumping columns so far before digging into what they actually represent."
"2022-11-08 00:02:34.540656+00","Shouldn't the key use something from the current item? Maybe something like ```suggestion             <div key={`column-${queryColumns[index][0].title}`}> ```"
"2022-11-08 00:02:56.769228+00","There is no Dandy product id, but this just makes it clear that it's an id that belongs to Labtrac"
"2022-11-08 00:04:57.433256+00","Could simplify to `CASE WHEN >= '2000-01-01' THEN labtrac_order_procedures.bookedon END` and just get rid of the ELSE and NULL part since it would be implied."
"2022-11-08 00:12:21.288932+00","trying to wrap my head around this, and I think this is where you still have questions for labtrac, but will the sequences always start and end at the same time for the dense rank, or can it be in two steps at once, but enter and leave them at different times?"
"2022-11-08 00:13:27.601071+00","Yeah, that makes a lot of sense, will make that update"
"2022-11-08 00:18:38.776094+00","same comment as above on simplifying the case when"
"2022-11-08 00:19:19.612473+00","I see what you're both saying, and it's valid feedback. We'd have to reorder the section to focus on the three topics in order and alternate between SG and GH.  Repos  - GH - SG - Chart  Branches - GH - SG - Chart  Forks - GH - SG - Chart  I'll propose the changes in the word doc @abschu "
"2022-11-08 00:21:38.849381+00","I think this is the right call given Jordan's feedback. I'm going to commit the suggestion to remove the last sentence. "
"2022-11-08 03:30:59.282571+00","I pushed a commit to remove the comment as it's resolved by this PR"
"2022-11-08 00:33:29.902908+00","This is causing tests to fail because of a bug in `updateAlertBucketSize`  On line 80 of `project-settings-page-commands.ts`, let's switch `setValue` to `setFieldValue` and that should get the tests to go green! 🤞"
"2022-11-08 00:34:13.328741+00","The former (integers in the 1000s)"
"2022-11-08 00:37:10.879582+00","Just want to make sure that the top issue chart works for all of these scenarios  1. no monitors and some top metrics issues 2. some monitors and no top metrics issues (this code block) 3. some monitors and some top metrics issues 4. no monitors and no top metrics issues (also in this block)  Does this block here work correctly for scenario (2)? If I have no top metrics issues but some monitors, will I still be able to see them in the chart?"
"2022-11-08 00:37:11.729456+00","CAn delete this comments I think ```suggestion ```"
"2022-11-08 00:57:06.022487+00","Good catch, thanks!"
"2022-11-08 01:01:47.153091+00","GitHub allows you to search indexed **repositories**, but not all code is indexed. GitHub’s [current limitations](https://cs.github.com/about/faq#indexed-content) on indexed code are:    * Files over 350 KiB and empty files are excluded * Only UTF-8 encoded files are included * Very large repositories may not be indexed * Vendored and generated code is excluded (as determined by [Enry](https://github.com/go-enry/go-enry))  Sourcegraph allows you to search indexed and [unindexed](https://docs.sourcegraph.com/code_search/how-to/exhaustive#non-indexed-backends) code. Sourcegraph’s [current limitations](https://docs.sourcegraph.com/admin/search) on indexed code are:     * Files larger than 1 MB are excluded*  * Binary files are excluded  * Files other then UTF-9 are excluded   *You can use the [search.largeFiles](https://docs.sourcegraph.com/admin/config/site_config#search-largeFile) keyword to specify files to be indexed and searched regardless of size.   <table>   <tr>    <td>    </td>    <td><strong>GitHub</strong>    </td>    <td><strong>Sourcegraph</strong>    </td>   </tr>   <tr>    <td><strong>Search across all repositories</strong>    </td>    <td>Limitations include:  <ul>  <li>Files over 350 KiB and empty files are excluded  <li>Only UTF-8 encoded files are included  <li>Very large repositories may not be indexed  <li>Vendored and generated code is excluded (as determined by <a href=""https://github.com/go-enry/go-enry"">Enry</a>) </li> </ul>    </td>    <td>Sourcegraph allows you to search indexed and unindexed code.  <p> Limitations for code that is indexed:  <ul>  <li>Files larger than 1 MB*  <li>Binary files  <li>Files other than UTF-8   <p> *You can use the <a href=""https://docs.sourcegraph.com/admin/config/site_config#search-largeFile"">search.largeFiles</a> keyword to specify files to be indexed and searched regardless of size. </li> </ul>    </td>   </tr> </table>   With GitHub, only the default **branch** is searchable (though GitHub is planning to support branch search in the future).   With Sourcegraph, typically, the latest code on the default **branch** of each repository is indexed (usually the master or main), but Sourcegraph can also index other non-default branches, such as long-running branches like release branches. If you’re searching outside of indexed branches, you can use unindexed search. You should expect slightly slower results when searching unindexed code.     <table>   <tr>    <td>    </td>    <td><strong>GitHub</strong>    </td>    <td><strong>Sourcegraph</strong>    </td>   </tr>   <tr>    <td><strong>Search across all branches</strong>    </td>    <td>Only the default branch is searchable    </td>    <td>✓    </td>   </tr> </table>   With GitHub, **forks** are included in the index, but they are subject to the same limitations as other repositories, so not all forks are indexed.  With Sourcegraph, **Forks** are included in the index, but they are subject to the same limitations as other repositories, so not all forks are indexed. You may need to include the fork filter to retrieve results for the fork repos, but an admin can adjust global settings to automatically include forks in search query results.    <table>   <tr>    <td>    </td>    <td><strong>GitHub</strong>    </td>    <td><strong>Sourcegraph</strong>    </td>   </tr>   <tr>    <td><strong>Search across all forks </strong>    </td>    <td>Limitations include:  <ul>  <li>Files over 350 KiB and empty files are excluded  <li>Only UTF-8 encoded files are included  <li>Very large repositories may not be indexed  <li>Vendored and generated code is excluded (as determined by <a href=""https://github.com/go-enry/go-enry"">Enry</a>) </li> </ul>    </td>    <td>Sourcegraph allows you to search indexed and unindexed code within forks.  <p> Limitations for code that is indexed:  <ul>  <li>Files larger than 1 MB*  <li>Binary files  <li>Files other than UTF-8   <p> *You can use the <a href=""https://docs.sourcegraph.com/admin/config/site_config#search-largeFile"">search.largeFiles</a> keyword to specify files to be indexed and searched regardless of size. </li> </ul>    </td>   </tr> </table>   In addition to searching your private code, GitHub has indexed over 7 million public GitHub repositories which are also searchable.  With Sourcegraph, in addition to searching your organization’s private code, you can use Sourcegraph.com to search across 2.8 million public repositories from multiple code hosts. "
"2022-11-08 01:12:16.81038+00","```suggestion Sourcegraph offers [structural search](https://docs.sourcegraph.com/code_search/reference/structural), and GitHub code search does not offer this search method. Structural search lets you match richer syntax patterns, specifically in code and structured data formats like JSON. Sourcegraph offers structural search on indexed code and uses [Comby syntax](https://comby.dev/docs/syntax-reference) for structural matching of code blocks or nested expressions. For example, the fmt.Sprintf function is a popular print function in Go. [Here](https://sourcegraph.com/search?q=repo:%5Egithub%5C.com/sourcegraph/sourcegraph%24+fmt.Sprintf%28...%29&patternType=structural&_ga=2.204781593.827352295.1667227568-1057140468.1661198534&_gac=1.118615675.1665776224.CjwKCAjwkaSaBhA4EiwALBgQaJCOc6GlhIDQyg6HQScgfSBQpoFTUf7T_NNqEX5JaobtCS08GUEJuRoCIlIQAvD_BwE&_gl=1*1r2u5zs*_ga*MTA1NzE0MDQ2OC4xNjYxMTk4NTM0*_ga_E82CCDYYS1*MTY2NzUwODExNC4xMTQuMS4xNjY3NTA5NjUyLjAuMC4w) is a pattern that matches all of the arguments in fmt.Sprintf in our code using structural search compared to the [search](https://sourcegraph.com/search?q=context:global+repo:%5Egithub%5C.com/sourcegraph/sourcegraph%24+fmt.Sprintf%28...%29&patternType=regexp) using regex.   Both GitHub code search and Sourcegraph support regular expression and literal search. [Regular expression](https://docs.sourcegraph.com/code_search/reference/queries#standard-search-default) helps you find code that matches a pattern (including classes of characters like letters, numbers, and whitespace) and can restrict the results to anchors like the start of a line, the end of a line, or word boundary. Literal (standard) search matches literal patterns exactly, including punctuation, like quotes. ```"
"2022-11-08 01:14:41.741919+00","```suggestion Remove this section: In addition to regular expression and literal search, Sourcegraph offers [structural search.](https://docs.sourcegraph.com/code_search/reference/structural) GitHub code search does not offer this search method. Structural search lets you match richer syntax patterns, specifically in code and structured data formats like JSON. Sourcegraph offers structural search on indexed code and uses [Comby syntax](https://comby.dev/docs/syntax-reference) for structural matching of code blocks or nested expressions. For example, the fmt.Sprintf function is a popular print function in Go. [Here](https://sourcegraph.com/search?q=repo:%5Egithub%5C.com/sourcegraph/sourcegraph%24+fmt.Sprintf%28...%29&patternType=structural&_ga=2.204781593.827352295.1667227568-1057140468.1661198534&_gac=1.118615675.1665776224.CjwKCAjwkaSaBhA4EiwALBgQaJCOc6GlhIDQyg6HQScgfSBQpoFTUf7T_NNqEX5JaobtCS08GUEJuRoCIlIQAvD_BwE&_gl=1*1r2u5zs*_ga*MTA1NzE0MDQ2OC4xNjYxMTk4NTM0*_ga_E82CCDYYS1*MTY2NzUwODExNC4xMTQuMS4xNjY3NTA5NjUyLjAuMC4w) is a pattern that matches all of the arguments in fmt.Sprintf in our code using structural search compared to the [search](https://sourcegraph.com/search?q=context:global+repo:%5Egithub%5C.com/sourcegraph/sourcegraph%24+fmt.Sprintf%28...%29&patternType=regexp) using regex.  ```"
"2022-11-08 01:21:06.42665+00","Good point. I checked and `s.Logger` is already initialised with the `syncer` scope [here](https://sourcegraph.com/github.com/sourcegraph/sourcegraph/-/blob/cmd/repo-updater/shared/main.go?L176).   I'll drop the `syncer:` prefix in the logs here."
"2022-11-08 01:32:13.476379+00","Good catch! "
"2022-11-08 01:59:50.117999+00","Fix indentation by one space here: ```suggestion         // The physical measurements table should be hidden for data streams stations         // since there's no way to draw/measure on them ```"
"2022-11-08 01:59:50.280913+00","This should be equivalent ```suggestion         if (this.activeUnitCardType !== GalleryInternalDecks.Image) { ```"
"2022-11-08 04:05:58.877759+00","there's actually a version injected into the app from msbuild -- @Colton1skees how can it be accessed?"
"2022-11-08 01:59:50.681968+00","This lines is causing a runtime error for me. I'm  For example on [this link](https://app-stage.instrumental.ai/branches/INST-2011/explore/inspect?project=isaactestproj&serial=A81V5438&imageType=External+station+q7Z2&windowBox=-4959,-5045,11020,11020,1102,930&filters=)  Data streams cards will show an error  ![image](https://user-images.githubusercontent.com/10248067/200455086-c2308e29-e094-42a1-90cf-0a3f51c66394.png)  I'm still debugging it, but maybe you've run into this before?"
"2022-11-08 02:00:39.888143+00","@vovakulikov [wants](https://github.com/sourcegraph/sourcegraph/pull/40399#discussion_r947751063) to change this! Let me know if you have ideas [on how to do it](https://github.com/sourcegraph/sourcegraph/pull/40399#discussion_r947821000)."
"2022-11-08 02:04:52.384771+00","We have multiple children passed to the `ComponentsComposer` component currently. Adding `Router` to the `ComponentsComposer` components list requires changing that.  <img width=""538"" alt=""Screenshot 2022-11-08 at 10 02 25"" src=""https://user-images.githubusercontent.com/3846380/200456773-f389db03-10db-4dca-8d5f-d314fc89e0d0.png""> "
"2022-11-08 02:17:30.532471+00","need something for version, that should be an environment variable set from electron, right?"
"2022-11-08 03:14:08.74249+00","What does this refer to? Could you offer a bit more context?  Also, it this better explained in one of the other PRs that are detailing the refactor comments?"
"2022-11-08 03:19:36.982597+00","Do we need this variable? Can we return here?"
"2022-11-08 03:26:24.498318+00","Oh it's the refactor that this PR itself resolves. I forgot to remove it. The goal is that an Estimate Approval Blocker should also resolve the pending PR estimate that caused this blocker, just like how a PR Review Blocker is expected to resolve the PR that needs reviews."
"2022-11-08 04:07:42.910818+00","yeah, i don't love this pattern. Fortunately, we're about to rework scan covers, it's probably about time for this entire data structure to be reworked. It's in my todo list pending what comes out of that work. I thought about splitting these a bit, but the downside is that the rough logic of computing each branch needs to be replicated."
"2022-11-08 04:09:56.992508+00","ty for catching -- used to be called `canJump` and changed to `isDisabled` without inverting everything."
"2022-11-08 04:10:14.102331+00","The entire scan menu still renders if we're in checkout, so yep! This is just a placeholder for when in item setup / pt setup"
"2022-11-08 04:20:00.849275+00","Done."
"2022-11-08 04:26:37.182501+00","I tested it  on a project with no limits saved on my local BE. If there is no limits saved, the top issues chart displays 'no limits saved' message. So, it works. "
"2022-11-08 05:10:36.301175+00","found it, I think"
"2022-11-08 05:49:32.350642+00","!!basis means there is a basis (not not basis)"
"2022-11-08 05:34:19.836387+00","@sheldon-welinga I need this because of other parts and also tried with `Boolean() ` function it didn`t give me the expected result."
"2022-11-08 05:35:08.818373+00","@sheldon-welinga I tried with the ` Boolean() `function it didn`t give me the expected result."
"2022-11-08 05:35:21.196986+00","same here"
"2022-11-08 05:39:55.01731+00","```suggestion     // If there is no basis, and the basis is not complete, we return true. ```  I might be reading this incorrectly. `!!basis` -> there is no basis `!isScanCompleted(basis)` -> the basis is not complete?"
"2022-11-08 05:40:36.083511+00","```suggestion     // An example here is a pre-prep not being completed but wanting to jump to that arch's prep scan. ```"
"2022-11-08 05:35:40.851586+00","."
"2022-11-08 05:45:05.790899+00","@Joeb3219 You'll have to grab the version at runtime: `Version version = System.Reflection.Assembly.GetExecutingAssembly().GetName().Version;`"
"2022-11-08 18:15:37.427681+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion , practice_data AS ( ``` "
"2022-11-08 05:59:36.423739+00","I did check in line `98` "
"2022-11-08 06:15:15.349353+00","well the previous line was:  ``` args: { newPatternType: SearchPatternType } | { newCaseSensitivity: boolean } | { newPowerUser: boolean } ```  so this was just a auto reformat after I added `{ newSearchMode: SearchMode }`"
"2022-11-08 06:25:39.877286+00","@sheldon-welinga alphabetically sort"
"2022-11-08 06:25:40.06206+00","should be in UTC or date"
"2022-11-08 06:25:40.12117+00","@sheldon-welinga Filename should be `PermissionScopesEnums`"
"2022-11-10 15:07:18.417351+00","this is meant to match the executor queue name this is meant to be used for, so I think it makes sense to name it batches here "
"2022-11-10 17:20:26.262476+00","This should return a list of `GithubAccount.t()`"
"2022-11-11 05:13:23.50914+00","It's the decision between alerts coming from appsignal only vs alerts coming from both appsignal and grafana. Tho tbh custom Oban implementations for appsignal do exist, but we probably want to wait until they fully support it out of the box. So for now, I will see if it's possible to do both monitoring and alerts for Oban on Grafana"
"2022-11-11 07:39:24.85801+00","Nitpick: I don't think this casting is necessary here."
"2022-11-08 06:25:40.120792+00","@sheldon-welinga so when the first iteration returns `isPermitted` then we break the loop and skip the remaining check?"
"2022-11-08 06:25:41.150772+00","@sheldon-welinga multiple line to make it more readable ```suggestion router.delete('/envelopes/:id', [ check('id').isMongoId() ], EnvelopeController.delete); ```"
"2022-11-08 06:39:57.36103+00","```suggestion ```"
"2022-11-08 06:42:05.281247+00","The is generated by `faker`  we can`t get the exact email."
"2022-11-08 06:42:24.95786+00","@Colton1skees how does that compare to what I found?: `typeof(StartupManager).Assembly.GetName().Version.ToString()`?"
"2022-11-08 07:50:39.446867+00","Can add a sentence on ticket fit that project managers and developers should qualify tickets (or rejecting tickets) before we commit to work on them, and add a link to the qualifying ticket docs for leads"
"2022-11-08 06:51:50.082109+00","I guess if we're going to take the version from the executing assembly, we should take the name, too? so,  ```                                                         serviceName: System.Reflection.Assembly                                 .GetExecutingAssembly()                                 .GetName()                                 .Name,                             serviceVersion: System.Reflection.Assembly                                 .GetExecutingAssembly()                                 .GetName()                                 .Version.ToString() ``` ?"
"2022-11-08 06:57:35.916995+00","warn logs won't end up in Sentry. I think we can add a method like `NeedsRefresh` which checks whether the token is _already expired_ and in this case log with `error` level which will create a Sentry event, which is crucial in such situation IMO.  WDYT?"
"2022-11-08 06:58:17.688473+00","Yes. We also ran into this while testing, but it's usually a flash and eventually goes away. Not sure why it has that behavior, but we'll look into it."
"2022-11-08 07:12:12.939769+00","I double-checked with JH, he told me that we _don't_ store logs of all levels (and filter them afterwards), so we are good to add a number of debug statements 👍🏻 "
"2022-11-08 07:12:13.132158+00","do we really need to do `fmt.Sprintf(""%v"", res.repo.NameWithOwner)` on a string field?"
"2022-11-08 07:12:13.201309+00","gotcha!  Let's create a scoped logger (`RunScheduler` scope) for this function as well"
"2022-11-08 07:12:13.656537+00","it doesn't seem to be fixed, does it?"
"2022-11-08 07:12:14.092021+00","do you want to print the whole `github.Repository` type or will `r.NameWithOwner` suffice like in previous cases?"
"2022-11-08 08:44:24.044777+00","Argh, I missed that in a rush. 🤦🏽‍♂️"
"2022-11-08 07:15:05.932502+00","`oauthutil.DoRequest` already does it here a little further below: https://github.com/sourcegraph/sourcegraph/blob/fd67e1906b13a30badf4d4eb340e083776f25184/internal/extsvc/github/common.go#L1541-L1545  So if the token is expired we will end up refreshing it and making the request. I don't see much value in implementing a check for already expired token in this case.  "
"2022-11-08 07:17:53.740972+00","Since we hard fail from `DoRequest`, I think it's fine to ignore the error the first time especially if we cannot be certain if the error is intermittent or permanent. My thinking is if this happens frequently then we should see the errors propagate out from the above code and it won't be ignored."
"2022-11-08 07:24:27.110931+00","Hmm. Weird. I remember committing your suggestion. 🤔 "
"2022-11-08 07:27:31.049078+00","Using a different name in the logs will be confusing. Usage of `stored.ID` here is intentional."
"2022-11-08 07:28:23.37543+00","I do want the whole `repo` here. I want to be able to inspect the structure of the variable for a missing repo to see if there are any corner cases."
"2022-11-08 07:35:08.324056+00","I see. Do you think adding the field names in this case (`%+v`) can be useful?"
"2022-11-08 07:35:44.962489+00","Good catch! Will fix."
"2022-11-08 07:36:54.901244+00","Yea, that's correct"
"2022-11-08 07:38:31.562878+00","Good idea, makes sense. 👍🏽"
"2022-11-08 07:39:36.444386+00","@WajihaNiazi Do we really need to add `limit` keyword in the query?"
"2022-11-08 07:45:34.391951+00","Should we have a GitBook Docs session just for Leads too?   Some docs we can think of:  - How to onboard an instance - How to manage an instance - How to price PRs - How to onboard developers - How to qualify tickets - etc. "
"2022-11-08 07:45:34.622474+00","Just like PRs, can we list out all ticket status + its meaning, before going into transitioning "
"2022-11-08 07:45:34.882515+00","Would be great to add a session on what’s the time log used for, is it mandatory, and why we want to obtain this data "
"2022-11-08 07:45:35.32651+00","How to pick up ticket → Right now, most times project managers and repo owners assign tickets to developers because  - they have context and experience on the codebase + each dev’s experiences - by assigning, they are in a better position to manage client expectations on ETA on PR delivery + change requests  I also understand why developers picking up tickets is a more scalable solution and remove leads as the bottleneck.  I think we can enable both modes, but developers picking up tickets will notify the leads so that they can intervene as soon as possible "
"2022-11-08 07:45:35.451163+00","still firmly believe that `change request` as a PR status would be an important status to inform devs, because it helps: - measure how quickly we fix change requests - review cycles - showcase status in client standups - to not confuse with in_progress status - devs and clients won’t know whether the PR was already pushed to client or wasn’t   I understand this is a product change that causes inconvenience and we should have voiced it much earlier, but I would want to resurface this discussion to bring to product and engineering team's attention (cc'ed @macocha @diemkay  @ziahamza )"
"2022-11-08 07:45:35.677506+00","Would be good to list out what statuses require manual updates, which ones are automatic, so our project managers and developers are more mindful what status update actions they need to perform"
"2022-11-08 07:47:16.839575+00","Does it work? I.e. does it get announced once the button appears?"
"2022-11-08 08:22:31.794156+00","@Mjanuary  ```suggestion     return await EnvelopeActivity.aggregate(pipelines); ```"
"2022-11-08 08:24:12.806576+00","```suggestion         this.pointA = a;         this.pointB = b;         this.pointC = c;         this.rightAngleBox = rectangle;     } ``` ```suggestion         this.pointA = a;         this.pointB = b;         this.pointC = c;         this.pointPP = pp;         this.rightAngleBox = rectangle;     } ```"
"2022-11-08 08:36:04.302575+00","The other batch changes related services start with `Batches`, maybe we should do the same here? Makes it more consistent and easier to scan down the list and pick out just the stuff related to batch changes.   Maybe even be worth grouping these with some newlines?"
"2022-11-08 08:44:42.909271+00","This happens when we *don't* have a NotFound error so the log isn't accurate.   Maybe instead we can wrap the error and include the repo name?"
"2022-11-08 08:36:26.458442+00","Also, probably worth renaming the BitBucket ones while we're here"
"2022-11-08 08:36:47.742489+00","@passy4ucj  yes, we need that. "
"2022-11-08 08:38:12.98155+00","This should be fixed now from the latest commit."
"2022-11-08 08:39:41.397789+00","unfortunately it won't work this way, you need to assign it to a new variable and use it"
"2022-11-08 08:40:48.822822+00","Don't we log the errors that are sent back in the `results` chan? Maybe instead we can wrap the error and include the repo name? "
"2022-11-08 08:40:55.639599+00","this works fine but do you think maybe we can refactor this code a bit"
"2022-11-08 08:40:56.102478+00","variable could be named better?"
"2022-11-08 08:40:58.852487+00","```suggestion     props?.cityArray.forEach((city) => {         arrayObjectTimezones.push(`${city.timezone}: ${city.city}`);       }); ``` If we do this then we won't need `arrayTimezones` and `arrayCities`. What do you think?"
"2022-11-08 08:41:03.432481+00","(Same comment for the other places where we sent the error back)"
"2022-11-08 08:41:56.972536+00","Agree with @sashaostrikov, probably too noisy to log the entire struct,"
"2022-11-08 08:42:28.953292+00","I think this could get very noisy and doesn't convey too much info"
"2022-11-08 08:44:56.622503+00","When you take a look at logs, you usually don't have the source code before your eyes (and customers for sure don't as well), that's why you/customer will just see that `external service repo deleted` and then in log attributes will notice that `stored.ID=123`.  I guess this will confuse everyone much worse than a variable name (with its own semantics) not being the same for the logging attribute name (with its own _very different_ semantics).  WDYT?"
"2022-11-08 08:47:22.587608+00","```suggestion 				s.Logger.Debug(""sync context done"") ```"
"2022-11-08 09:14:44.110935+00","I think this should also be nested under `if args.InactiveSince != nil {`"
"2022-11-08 09:14:44.223634+00","I'd add a note that this only has an effect if `inactiveSince` is set."
"2022-11-08 09:18:15.229+00","Uhm, I don't follow. If I look at the code I see   ```go 	// If set and non-zero, this limits the webhook logs to those matched to 	// that configured webhook. If set and zero, this limits the webhook logs to 	// those that did not match any webhook. If nil, then all webhook 	// logs will be returned. 	WebhookID *int32 ```  It's a pointer.  We're also talking about the GraphQL API here, not the database layer. So why should `-1` and `0` be special values in the GraphQL API? We do have optional parameters in GraphQL, so we can just say ""if webhook is set, then use that in the database options, otherwise no"""
"2022-11-08 09:19:55.29885+00","Yeah, makes sense. No strong feelings here. `filtered` is a good name, too."
"2022-11-08 09:22:37.06788+00","`URLSearchParams.getAll()` [returns an array](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams/getAll#return_value) that will always be truthy here. To avoid setting the header when it's redundant, we can check for an array length:  ```suggestion     const feat = parameters.getAll('feat')     if (feat.length) { ```"
"2022-11-08 09:24:35.040401+00","Repo name should be included in all the logs, right? since the logger is scoped to have the name in every message (see first line of this function)"
"2022-11-08 12:03:30.112508+00","Should this exit with 1 rather?"
"2022-11-08 09:30:28.364618+00","I created that list before but they are pretty self-explanatory as you can get the meaning just from their names, so I ended up deleting it. The transitions are more valuable in this case."
"2022-11-08 09:50:48.069241+00","You're right! We should raise in case we have any unexpected results"
"2022-11-08 09:54:37.893486+00","I agree that if it exists -- we just pass it to the database options.  fixed here https://github.com/sourcegraph/sourcegraph/pull/44067"
"2022-11-08 09:56:35.302513+00","I think a better phrasing here would be ```suggestion 				logger.Warn(""doRequest: refreshing of the token failed"", log.Error(err)) ```  Because `'refresh token'` might refer to the refresh token itself, not the action of refreshing the token. Should I create a follow up PR or do you want to do it yourself @indradhanush ?"
"2022-11-08 10:00:47.745627+00","Good point. PR here: https://github.com/sourcegraph/sourcegraph/pull/44068"
"2022-11-08 10:01:11.219989+00","Let's move the type export to the `Type Exports` section below. "
"2022-11-08 15:53:26.422156+00","I think we can just link to the README for src-cli here?"
"2022-11-08 10:01:11.326235+00","Would the story be fine without the memorization added via the `useMemo` hook? We strive to use these hooks sparingly where the reason for them is clear to avoid confusion and React hooks dependencies waterfall.   ```suggestion         <FeedbackPrompt onSubmit={handleSuccessSubmit} {...commonProps(args)}> ```"
"2022-11-08 10:01:11.346619+00","Is this prop used only in Storybook? Would it be possible to rely on the Storybook toggle value to set the authenticated user prop to null and remove this prop from the component interface?"
"2022-11-08 10:05:21.310909+00","@FaridGitStart Use `Object.values` ```suggestion   body('access').notEmpty().isIn(Object.values(EnvelopeAccessLevelEnums)), ```"
"2022-11-08 10:05:22.162497+00","@FaridGitStart Use `Object.values`"
"2022-11-08 10:05:22.369914+00","@FaridGitStart same here use` Object.values` ```suggestion       if (!Object.values(EnvelopeAccessLevelEnums).includes(access)) { ```"
"2022-11-08 10:05:25.009789+00","@FaridGitStart alphbetically sort"
"2022-11-08 10:37:02.283527+00","```suggestion   @spec get_ticket(pos_integer()) :: {:ok, Ticket.t()} | {:error, Ecto.Changeset.t()} ```"
"2022-11-08 10:37:02.285227+00","```suggestion   @spec change_ticket(Ticket.t(), map()) :: Ecto.Changeset.t() ```"
"2022-11-08 10:43:09.762468+00","```suggestion ```"
"2022-11-10 15:08:08.616115+00","IMO we can import `import graphiql from 'graphiql'` directly here and use `graphiql.Toolbar` below"
"2022-11-08 10:44:04.824796+00","I think we want to keep this special-case page for dotcom. The content of getting started can be 100% the same, but it serves the following purposes:  - It doesn't register additional routes - It is a version that doesn't show the list page as an option  After this change, `https://sourcegraph.com/batch-changes/create` will be available (but not functional). Also, the getting started page looks broken: <img width=""1499"" alt=""Screenshot 2022-11-08 at 11 40 38@2x"" src=""https://user-images.githubusercontent.com/19534377/200544087-0623b53d-bec8-4085-94e8-1e20fc22931b.png""> "
"2022-11-08 10:44:48.75953+00","if you want one of batch changes to take this over, lmk. "
"2022-11-08 11:10:00.637862+00","I looked at the code calling `SyncRepo` which seems to handle the error. This log is redundant. I've removed it and instead wrapping the error now.  @ryanslade Good call out on the `NotFound` error. I missed the real error in the earlier log message."
"2022-11-08 11:10:23.869465+00","I like that!"
"2022-11-08 11:10:31.792486+00","I'd leave this. But the test case with `-1` is more confusing than helping, since it makes it sounds like `-1` is a specific value."
"2022-11-08 11:11:27.608456+00","Addressed in the similar comment about RunScheduler. Marking as resolved."
"2022-11-08 11:14:20.448521+00","```suggestion gitstart_engine.iml  ```"
"2022-11-08 11:18:07.000076+00","yes this looks good 👍 "
"2022-11-08 11:18:34.601254+00","returned this check"
"2022-11-08 11:19:51.052472+00","The mapping is not only used for modifiers... we use `Alt+t` for theme switching and at some point we found out that it didn't work on macOS or something? So we actually use `†` in the keybinding definition for macOS  https://github.com/sourcegraph/sourcegraph/blob/15d48f5b475ae93816c908a36ec306bf49ba024f/client/shared/src/keyboardShortcuts/keyboardShortcuts.ts#L24-L28  Now that we have incorporated the logic for the shortcut implementation we should adjust it to avoid these weird workarounds."
"2022-11-08 11:21:13.112544+00","Probably a question for @quinnkeast?"
"2022-11-08 11:24:39.762482+00","```suggestion 			results <- &githubResult{err: errors.Wrapf(err, ""context error for repository: namewithOwner %q"", nameWithOwner)} ```"
"2022-11-08 11:27:59.925426+00","cc @quinnkeast ☝🏻 "
"2022-11-08 11:29:05.004058+00","Not at the moment. cc @quinnkeast "
"2022-11-08 11:29:39.875267+00","I decided to stick with the similar convention used in this function already."
"2022-11-08 11:30:41.662473+00","This should be in a new `4.1.3` section since it's specific to the `4.1.3` release."
"2022-11-08 11:31:06.202473+00","Approving to unblock!"
"2022-11-08 11:33:16.230636+00","Done. Ty!"
"2022-11-08 11:50:34.882499+00","Had a change of heart and decided to fix it in both the instances."
"2022-11-08 11:52:17.062492+00","Best approach ever! :value-high-agency:"
"2022-11-08 13:03:07.132475+00","> FWIW no icon seems to have labels when I checked this out to test it?  I will double check... maybe a namespace issue? idk"
"2022-11-08 13:27:17.379336+00","``` docker inspect --format='{{.RepoDigests}}' grafana/grafana:7.5.17  [grafana/grafana@sha256:15abb652aa82eeb9f45589278b34ae6ef0e96f74c389cadde31831eb0b1ce228] ```"
"2022-11-08 14:05:05.142496+00","shouldn't withProfile be boolean? like  `withProfile = true,` ?"
"2022-11-08 14:34:27.688878+00","Yes, thanks for catching this."
"2022-11-08 14:34:58.646013+00","Yes. :) `AnimationPresence` does magic that handles that very well."
"2022-11-08 14:52:49.315963+00","This just gets rid of the preemptible nodes."
"2022-11-08 14:53:16.382606+00","Node sure I had put the min at `2`. I am making it `1` as that is then consistent."
"2022-11-08 14:54:10.82479+00","This just gets rid or preemptible nodes."
"2022-11-08 14:54:47.485398+00","There is no reason to use high-memory nodes in staging."
"2022-11-08 15:37:28.874601+00","Ty!"
"2022-11-08 15:06:03.812499+00","From **_BartoszJarocki_**: -1 do you mind keeping only these changes in this particular PR? if something isn't working, it's easier to track the change which is causing the issue when PRs are related to only one functionality/issue. "
"2022-11-08 15:07:09.666187+00","@raj360 please attend to this"
"2022-11-08 15:11:08.122491+00","@raj360 do you think only these changes would be enough to meet the acceptance criteria?"
"2022-11-08 15:24:22.293807+00","I just noticed this. We should change everything to IAM: ```suggestion 							Owner:          monitoring.ObservableOwnerIAM, ```"
"2022-11-08 15:26:53.406639+00","Correct, for now we're appending to the input but not submitting."
"2022-11-08 15:29:13.238299+00","`loadBefore` gives you an aggregate that would not actually be sound to dispatch events against, and it's actual callers only wanted the state anyway, so i'm replacing it with `loadStateBefore`"
"2022-11-08 15:29:13.512488+00","similarly here for getting the current state. ultimately, when these refactorings are done, i intend to make `load` private"
"2022-11-08 15:30:21.412516+00","As an alternative, we could use `⌥↓` / `Alt+↓`—this is what IntelliJ's shortcut is.  (QQ: Given that our search results load as an infinite list, doesn't that kind of defeat the purpose of the command-down shortcut?)"
"2022-11-08 16:03:17.269469+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion         AS last_order_placed_at         , 1 + treasure.WORKING_HOUR_DIFF_UDF(first_order_placed_at, last_order_placed_at, 9, 18, 9, 18) / 9         AS biz_days_alive  ``` "
"2022-11-08 15:36:13.398651+00","Instead of returning an empty `div` here. I think we need to return at least some sort of feedback to the user. I have used `<NoPermission />` temporally in case we have to decide about the design."
"2022-11-08 15:36:36.193396+00","I have two thoughts against using a `menu` semantically:  - At least for now, we're not submitting on selection, so no navigation is caused. (This may change.) - We may add more functionality to the dropdown, including other metadata or other actions (such as clearing items), which to me implies the popover is a container that includes a list of items along with other functional elements."
"2022-11-08 15:37:07.139207+00","I'm fine with that. I structured the names this way to sort of match `GitHubSyncWebhook` but there's really no deeper reason. Grouping them w/ newlines is a good idea 👍 "
"2022-11-08 15:41:20.343384+00","👍 "
"2022-11-08 15:41:20.410328+00","I think we should pass here `authenticatedUser` instead of null."
"2022-11-08 15:41:23.362488+00","This doesn't block this PR but just thoughs outloud. Based on our experience with other props like this I think  it would be better to have a flat list of primitives props instead of picking prop from shared interface and exteding all consumers prop with this custom authUser type.   Just to be clear I propose to delete `FeedbackPromptAuthenticatedUserProps` and simply have  ``` interface interface FeedbackPromptProps {  username?: string  email?: string  productResearchEnabled?: boolean  onClose?: () => void  onSubmit: FeedbackPromptSubmitEventHandler } ```  It might be ouside of this PR scope but in my opinion wildcard components shouldn't rely on any shared global modals unless these models are wildcard specific. Since `AuthenticatedUser` isn't a part of wildcard I think it make sense to decouple Prompt UI and `AuthenticatedUser`"
"2022-11-08 15:41:23.442485+00","Minor, we're trying to reduce usage of `data-testid` and treat UI in tests as it will be treated by common users, so we're trying to use `getByRole` and `getByLabel` more in our tests and not to use `getByTestId` method "
"2022-11-08 15:41:28.018472+00","it's likely cleaner to use a regex (maybe with `pickBy`) that matches the regex we use to exclude these above - this will also prevent confusing errors if we add an additional dependency"
"2022-11-08 15:48:29.973832+00","I think you're gonna want /^@grpc/, too"
"2022-11-08 15:49:06.528442+00","```suggestion 	if !oldPerms.SyncedAt.IsZero() { ```"
"2022-11-08 15:49:07.23285+00","`SyncedAt` is never going to be `nil`, so we will always end up not going in the other branch where we store the first sync metrics. See this code: https://sourcegraph.sourcegraph.com/github.com/sourcegraph/sourcegraph@b104de5586c4ca6e1819ecb3d6e54351f06be81a/-/blob/enterprise/internal/database/perms_store.go?L1288&subtree=true  Same is true for the repositories. ```suggestion 	if !oldPerms.SyncedAt.IsZero() { ```"
"2022-11-08 15:53:26.142497+00","Take a look at this: https://github.com/sourcegraph/src-cli/blob/8424c23429ba06f73177f6fcd17451a87862e454/cmd/src/api.go#L33-L35  I think it's cleaner to use the variable-functionality instead of interpolating into the query itself."
"2022-11-08 15:53:26.590909+00","Success message? :)"
"2022-11-08 15:53:29.18615+00","Turn `the script` into a link?"
"2022-11-08 15:54:58.802475+00","Spoke with Andy and we're going to make the chart easier to follow and keep it where it is with the current flow of content.      <tr>    <td>    </td>    <td>**GitHub**     </td>    <td>**Sourcegraph**     </td>   </tr>   <tr>    <td>**Search across all repositories and forks**     </td>    <td>✓ with limitations      </td>    <td>✓ with limitations      </td>   </tr>   <tr>    <td>**Sarch across files larger than 350 KiB**     </td>    <td>✗     </td>    <td>✓   Using the [search.largeFiles](https://docs.sourcegraph.com/admin/config/site_config#search-largeFile) keyword     </td>   </tr>   <tr>    <td>**Search across all branches**     </td>    <td>Only the default branch is searchable     </td>    <td>✓     </td>   </tr>"
"2022-11-08 15:55:06.516246+00","`state=http_error`?"
"2022-11-08 15:55:06.584188+00","How about `state=http_begin` instead of `state=received`?"
"2022-11-08 15:55:06.659244+00","Can we move this counter up so that it isn't silently skipped for the second code path? (You can add the value of conditional that drives the fork as a label if you expect this code to stick around, e.g. `use_queue`)."
"2022-11-08 15:55:07.132509+00","Note that automatic retries could make the states add up in an unintuitive way (the 'try' state, which perhaps should be renamed 'enqueue', will presumably not be manually called for the retries)."
"2022-11-08 15:55:07.478241+00","In general we probably want to rely on higher-level error-metrics that would alert us to unintended control flow, and logs/traces to debug. That said, I understand that the very confusing error flow around this code is what prompted this particular counter. We can probably replace most of the metric code in this PR with decorators (e.g. `withMsLatencyHistogram`, which we could extend with a before-counter analogous to 'try') or an analogous helper function to improve readability."
"2022-11-08 16:03:12.369005+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion ``` "
"2022-11-08 16:03:12.373225+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion ``` "
"2022-11-08 16:03:12.456221+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion         , COUNT(dim_kustomer_conversation.identifiers__conversation_id) AS total_conversations          , SUM(IFF((has_tag__aggressive = TRUE                     OR has_tag__angry = TRUE OR ``` "
"2022-11-08 16:03:12.552498+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion   ``` "
"2022-11-08 16:03:13.316333+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     SELECT         dim_practicelocation.fundam__salesforce_account_id AS salesforce_account_id         , SUM(IFF(minimum_level = 'Full', 1, 0)) AS number_of_full_contract_minimum_months         , SUM(IFF(minimum_level = 'Partial', 1, 0)) AS number_of_partial_contract_minimum_months         , SUM(IFF(minimum_level = 'Zero', 1, 0)) AS number_of_zero_contract_minimum_months      FROM treasure.fact_practice_contract_minimum ``` "
"2022-11-08 16:03:15.199323+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion      LEFT OUTER JOIN treasure.aggdimext_kustomer_conversation_tags_summary ``` "
"2022-11-08 16:03:18.432478+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion         AS lifetime_orders ``` "
"2022-11-08 16:03:13.002214+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion                     has_tag__verbally_abusive_manager_notification = TRUE), 1, 0)) AS negative_sentiment_conversation          , SUM(IFF(has_tag__difficulty_scanning = TRUE, 1, 0)) AS has_difficulty_scanning_conversation          , SUM(IFF((has_tag__broken_equipment = TRUE                     OR has_tag__bug = TRUE OR                     has_tag__chairside_bug = TRUE OR                     has_tag__disconnecting_scanner = TRUE OR ``` "
"2022-11-08 16:03:13.166621+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     SELECT         salesforce_account_id         , orders__latest_order_seq         , conversations__count_running_total         , scan_rejections__total         , ROUND(conversations__count_running_total / orders__latest_order_seq, 2) AS conversations_per_order_avg         , ROUND(scan_rejections__total / orders__latest_order_seq, 2) AS scan_rejections_per_order_avg      FROM treasure.aggfactext_practice_onboarding_benchmarks_summary ``` "
"2022-11-08 16:03:14.33011+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion ``` "
"2022-11-08 16:03:14.659812+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion      GROUP BY 1 ``` "
"2022-11-08 16:03:15.072482+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion         , SUM(IFF((has_tag__it_escalation_tier_2 = TRUE                     OR has_tag__it_escalation_tier_3 = TRUE OR ``` "
"2022-11-08 16:03:16.218582+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion         AS tenth_order_placed_at ``` "
"2022-11-08 16:03:13.482478+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     SELECT         identifiers__salesforce_account_id AS salesforce_account_id         , doctor_feels__confident_to_complete_final_impression         , doctor_feels__comfortable_using_the_dandy_portal         , doctor_feels__confident_to_complete_pre_setup         , doctor_feels__comfortable_with_the_scanner         , doctor_feels__prepared_to_submit_next_case         , doctor_feels__satisfied_with_dandy         , doctor_feels__confident_to_identify_adequate_margins         , additional_products_looking_for_training     FROM treasure.fact_training_csat_survey_response ``` "
"2022-11-08 16:03:13.632483+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion ``` "
"2022-11-08 16:03:13.996208+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion ``` "
"2022-11-08 16:03:14.1707+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion         , DATEDIFF('month', first_conversation, last_conversation) AS months          , ROUND(total_conversations / NULLIF(MONTHS, 0), 2) AS conversations_per_month         , ROUND(negative_sentiment_conversation / NULLIF(MONTHS, 0), 2) AS negative_sentiment_conversation_per_month         , ROUND(             has_difficulty_scanning_conversation / NULLIF(MONTHS, 0), 2         ) AS has_difficulty_scanning_conversation_per_month         , ROUND(tech_problems_conversation / NULLIF(MONTHS, 0), 2) AS tech_problems_conversation_per_month         , ROUND(it_conversation / NULLIF(MONTHS, 0), 2) AS it_conversation_per_month         , ROUND(positive_sentiment_conversation / NULLIF(MONTHS, 0), 2) AS positive_sentiment_conversation_per_month         , ROUND(issue_related_conversation / NULLIF(MONTHS, 0), 2) AS issue_related_conversation_conversation_per_month  ``` "
"2022-11-08 16:03:16.372479+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion         , BOOLOR_AGG(CONTAINS(most_important_trait_in_a_lab_c, 'Price')) AS value_prop_price  ``` "
"2022-11-08 16:03:17.542619+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     SELECT         identifiers__account_id AS salesforce_account_id         , SUM(             IFF(task_details__task_subtype = 'Email' AND task_details__task_direction = 'Inbound', 1, 0)         ) AS total_inbound_emails         , SUM(             IFF(task_details__task_subtype = 'Call' AND task_details__task_direction = 'Inbound', 1, 0)         ) AS total_inbound_calls         , SUM(             IFF(task_details__task_subtype = 'Email' AND task_details__task_direction = 'Outbound', 1, 0)         ) AS total_outbound_emails         , SUM(             IFF(task_details__task_subtype = 'Call' AND task_details__task_direction = 'Outbound', 1, 0)         ) AS total_outbound_calls ``` "
"2022-11-08 16:43:44.342477+00","Need to not put a backdoor hotkey entryway into this unknown area!"
"2022-11-08 16:03:15.322476+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     SELECT ``` "
"2022-11-08 16:03:19.436669+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion ``` "
"2022-11-08 16:03:19.552468+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     LEFT OUTER JOIN treasure.dim_practicelocation         ON fact_practice_contract_minimum.partner_id = dim_practicelocation.identifiers__portal_billing_entity_id ``` "
"2022-11-08 16:03:20.430196+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     GROUP BY 1 ``` "
"2022-11-08 16:03:20.462471+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion         AS first_order_placed_at ``` "
"2022-11-08 16:03:23.601288+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion       LEFT OUTER JOIN salesforce.training_c ``` "
"2022-11-08 16:03:24.54397+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion         AS order_n ``` "
"2022-11-08 16:03:24.586007+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion         , DATEDIFF('month', first_outreach, last_outreach ) AS months_outreach         , ROUND(total_inbound_emails / NULLIF(months_outreach, 0), 2) AS inbound_emails_per_month         , ROUND(total_inbound_calls / NULLIF(months_outreach, 0), 2) AS inbound_calls_per_month         , ROUND(total_outbound_emails / NULLIF(months_outreach, 0), 2) AS outbound_emails_per_month         , ROUND(total_outbound_calls / NULLIF(months_outreach, 0), 2) AS outbound_calls_per_month ``` "
"2022-11-08 16:05:56.60526+00","Resolving since we updated the table. "
"2022-11-08 16:26:25.169778+00","Nuke empty line 35"
"2022-11-08 16:27:38.877602+00","```suggestion   @spec update_ticket_details(Ticket.t(), map()) :: Ecto.Changeset.t()   def update_ticket_details(%Ticket{} = ticket, attrs) do ```"
"2022-11-08 16:04:49.589209+00","if I'm reading this right, are we coalescing `risk_level_current` and `""Pre-Orders""`? A description of what we're doing here might be helpful"
"2022-11-08 16:05:58.72267+00","Resolving since we updated the table. "
"2022-11-08 16:10:09.454742+00","Good catch - the metric-card component has the data element, not the chart wrapper.  "
"2022-11-08 16:11:55.22594+00","just caught this, but the string comparison is a bit weird - we're confident this works for all dates? wouldn't something like this work?: ```suggestion         const tomorrow = moment().tz(originationTimeZone).add(1, 'day');         const doctorDueDate = moment(sla.internal_committed_due_date).tz(originationTimeZone);         if (tomorrow.isSameOrAfter(doctorDueDate, 'day')) {             return 'ups_next_day_air';         } ```"
"2022-11-08 16:13:08.463453+00","Use `.call(this)` to explicitly bind this function to make sure `this` is properly defined inside of `accessStatus` ```suggestion         if (!accessStatus.call(this, 'measurement-r-1', false) || !accessStatus.call(this, 'measurement-sandbox-persistence', false)) return; ```"
"2022-11-08 16:13:41.571819+00","@elikeyz, These changes only account for the visibility of the button when there is no content in the input for Android devices; according to the issue description, we only pass the first check.  - [X] User can send the comment using the send button - [ ] Clicking the send button should not close the keyboard - [ ] Next-line button should change the line (instead of sending a comment) as there is no other way on mobile to change the line.  According to @BartoszJarocki, we should aim for only one functionality for PRs to make things easier; for the rest of the issues, I believe separate issues should be created.    "
"2022-11-08 16:13:16.201198+00","This still doesn't fix the issue. If you debug and go into the call for `accessStatus` at line 449, the `this` keyword is no longer bound to the `Gallery` component:  Breakpoint at `featureflags.ts`:  ![CleanShot 2022-11-08 at 08 03 50@2x](https://user-images.githubusercontent.com/10248067/200615158-987e7b4f-cb05-4b97-baf6-4707f2b14673.png)  And in any case, if you use the `{}` as a default, then `accessStatus` will be undefined and you will get a type error at the next line.  Revert this change and use `accessStatus.call` like I suggest below. I think the issue might coming from the call site in `measurements.ts` [here](https://github.com/dfxmachina/frontend/blob/012f0caf5965bfceb5135fd6d57ed28485edc77e/app/modules/measurements/measurements.ts#L435), but the suggested change should work for now and I can refactor things in a follow up."
"2022-11-08 16:25:12.00158+00","I would setup instance1 an explicit name like ""Commercial Instance"" in the setup function and assert using that rather than interpolating the variable like this. It makes the test more explicit and readable, and relies less on how the setup functions order the list object in the scenario map."
"2022-11-08 16:25:12.079696+00","I would add a refactor to remove gitstart in the Ecto Query before the Repo.all is even called. Let's not do this in this PR as we want to focus on creating tickets"
"2022-11-08 16:26:25.543554+00","Is it mentioned to have the default here?"
"2022-11-08 16:27:42.282328+00","```suggestion   @spec get_estimated_ticket_cost(pos_integer()) :: %{min: non_neg_integer(), max: non_neg_integer()} ```"
"2022-11-08 16:28:52.978705+00","Should this be `test.skip` and not `test.only`?"
"2022-11-08 16:34:21.439589+00","@erik-measure-dandy could you send a `withMsLatencyHistogram` example. Will probably fast follow this ticket with this decorator"
"2022-11-08 16:35:43.232491+00","@dandysean Do the retries happen in process or do they re-enqueue the entire job?"
"2022-11-08 16:37:29.804284+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion opp AS ( ``` "
"2022-11-08 16:43:44.244252+00","remove this"
"2022-11-08 16:43:44.299204+00","finish debugging this fail"
"2022-11-08 16:43:47.291162+00","what's this for?"
"2022-11-08 16:43:44.397992+00","Experimental ScanExportModelViewerBlock"
"2022-11-08 16:43:49.191296+00","Oh it's for the MarginMesh interaction"
"2022-11-08 16:51:00.982498+00","Oh I forgot about this comment, I thought that there was a different line. Ok then"
"2022-11-08 16:43:45.095206+00","remove plz"
"2022-11-08 16:43:45.175929+00","remove"
"2022-11-08 16:43:45.196272+00","also needs to be gated by feature flag"
"2022-11-08 16:43:45.212603+00","Pull this out to not affect MarginEditingStructure"
"2022-11-08 16:43:46.179021+00","what's going on with controlRef"
"2022-11-08 16:43:46.196864+00","definitely fix this"
"2022-11-08 16:43:48.551614+00","Get rid of this"
"2022-11-08 17:50:28.23074+00","We can fix those separately, no need to fix everything here"
"2022-11-08 16:43:46.212999+00","Don't forget to cleanup this stuff"
"2022-11-08 16:43:46.225225+00","filter by visible appearance!"
"2022-11-08 16:43:47.178959+00","Fix me please, and move this out ot your own experimental scan export block"
"2022-11-08 16:44:04.002492+00","string comparison is not weird, and we need to be getting rid of momentjs -- it's deprecated.  so I was focused on a solution that could easily be swapped with another date library without worrying about whether it has something like `isSameOrAfter`."
"2022-11-08 16:49:33.456691+00","```suggestion 500 searches are returned by default, but this number can be increased by increasing the ‘count’ value. A maximum of 1,500 matches can be displayed, and more matches can be fetched using the src CLI, the Stream API, or GraphQL API. ```"
"2022-11-08 16:45:00.607867+00","YYYY-MM-DD always has the same lexicographical and chronological sorting.  can you think of a date that can't be accurately represented by YYYY-MM-DD? 😂 "
"2022-11-08 16:46:55.660969+00","are there any cases where there is more than one email?"
"2022-11-08 16:49:30.812775+00","```suggestion ## Which is best for you? ```"
"2022-11-08 16:49:33.449798+00","```suggestion Sourcegraph can retrieve all search results. By default, Sourcegraph returns 500 search results, but this number can be increased by increasing the ‘count’ value. Sourcegraph can display a maximum of 1,500 matches, but all matches can be fetched using the [src CLI](https://docs.sourcegraph.com/cli/quickstart), the [Stream API](https://docs.sourcegraph.com/api/stream_api), or [GraphQL API](https://docs.sourcegraph.com/api/graphql). You can also export the results via CSV.  ```"
"2022-11-08 16:49:33.962475+00","Should we go with compiler-accurate @iskyOS "
"2022-11-08 16:49:34.419424+00","@lcolston08 - update the table so ""Structural search"" is first. "
"2022-11-08 16:53:38.142747+00","they re-enqueue the entire job with an exponentially growing delay"
"2022-11-08 16:57:22.173453+00","can we add a description here?"
"2022-11-08 17:01:46.038314+00","Thank you for the heads up. It is empty in both prod and staging."
"2022-11-08 17:15:57.532499+00","import { Avatar } from ""@calcom/ui/components/avatar""; "
"2022-11-08 17:15:58.776128+00","import { Button } from ""@calcom/ui/components/button""; "
"2022-11-08 17:20:46.053542+00","I understand, just surprised/confused about this existing argument 😅 It looks like it's completely unused, should we remove it?"
"2022-11-08 17:22:21.139803+00","@Stelminator I didn't see your change before writing my reply - they're functionally the same"
"2022-11-08 17:49:20.464025+00","Let me clarify from him"
"2022-11-08 17:49:29.698722+00","haha idk man! just checking. cool with me, you thought about this more than me clearly ❤️ "
"2022-11-08 17:50:11.84544+00","These look reasonable. I experimented with small changes like removing `IdentifierBuiltin` and update our TypeScript highlighter to use `IdentifierBuiltin` for types like `void` that are guaranteed to have no meaningful definition."
"2022-11-08 18:15:24.332502+00","drive-by reminder to change this when the uploads domain PR comes around"
"2022-11-08 17:53:45.557853+00","same here, nuke send()"
"2022-11-08 17:53:45.604584+00","same here, nuke send()"
"2022-11-08 17:53:45.640923+00","nuke send()"
"2022-11-08 17:53:45.809962+00","nuke send()"
"2022-11-08 17:53:46.735024+00","@WajihaNiazi  nuke the send(). when nothing is needed in request body there is no need for send()."
"2022-11-08 17:53:47.602814+00","nuke the send()"
"2022-11-08 17:54:15.494275+00","```suggestion Using the search.largeFiles keyword ```"
"2022-11-08 18:12:24.757574+00","?????"
"2022-11-08 18:13:17.511582+00","Do we know that this is the only store that gets crated in the frontend?"
"2022-11-08 18:13:34.95274+00","```suggestion [Sourcegraph.com](https://sourcegraph.com/search) (Sourcegraph's public instance for searching open source code) utilizes an algorithm inspired by Google PageRank to measure code reuse and return the most relevant search results first. This new ranking algorithm will be implemented for Sourcegraph customer instances (self-hosted and Cloud) in the future. ```"
"2022-11-10 18:16:42.237969+00","i'll change it"
"2022-11-11 09:07:39.572706+00","We do not. It's something we can do. The goal of this tech spec really would be to list all the important metrics we are already collecting and converting them to either alerts, or workflows where we manually check the metrics dashboards for tracing data"
"2022-11-08 18:15:37.592809+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion         , datediff('day', a.training_date, getdate() ) AS days_from_train_to_now         , days_from_train_to_now - 195 AS days_over_195 ``` "
"2022-11-08 18:15:37.617516+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion WITH practice_data_source AS (     SELECT * FROM {{ ref('practice_churn_outcomes') }} ``` "
"2022-11-08 18:15:37.632552+00","You may need to guard this with a mutex or use a sync map."
"2022-11-08 18:15:37.673779+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion churn_timelines AS ( SELECT * FROM dbt_emily_batchos_dev.practice_churn_timelines  )  ``` "
"2022-11-08 18:15:38.372672+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion ``` "
"2022-11-08 18:15:38.422477+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion , practice_data AS ( ``` "
"2022-11-08 18:16:02.572911+00","I see this is covered in changes to `internal/workerutil/dbworker/store/observability.go`."
"2022-11-08 18:17:05.432357+00","Can you elaborate on that inline so it's not so alarming? 😬 "
"2022-11-08 18:15:39.329005+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     SELECT         salesforce_account_id , churn_anchor_plus , 'plus5' AS buffersize , dateadd('day', -35, churn_anchor_plus ) AS obs_start , dateadd('day', -5, churn_anchor_plus ) AS obs_end     FROM practice_data_source     WHERE churn_anchor_plus IS NOT NULL  ) ``` "
"2022-11-08 18:15:39.436571+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion      SELECT         salesforce_account_id         , training_date         , days_from_train_to_now         , days_over_195         , lt_model_include         , first_possible_lt_date         , column2 AS random         , dateadd('day', column2, first_possible_lt_date) AS obs_start         , dateadd('day', 30, obs_start) AS obs_end         , dateadd('day', 45, obs_start) AS outcome_end         , datediff('day', obs_end, getdate()) AS days_to_now         , days_to_now >= 75 AS outcome_use     , coalesce(existing_churned.salesforce_account_id IS NOT NULL, FALSE) AS is_churned_group       FROM practice_data      LEFT OUTER JOIN dbt_emily_batchos_dev.temp_test_sf_connector_random         ON column1 = practice_data.salesforce_account_id      LEFT OUTER JOIN existing_churned         USING (salesforce_account_id)      WHERE outcome_use ``` "
"2022-11-08 18:15:40.17286+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion SELECT * FROM churn_bootstrap_dates ``` "
"2022-11-08 18:15:40.263264+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion  , combine_windows AS ( ``` "
"2022-11-08 18:15:40.319786+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion ``` "
"2022-11-08 18:15:40.926313+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion         , a.training_date ``` "
"2022-11-08 18:18:36.295769+00","And I agree that `listbox` is the right role to use here, after this discussion."
"2022-11-08 18:15:40.383188+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     SELECT DISTINCT salesforce_account_id ``` "
"2022-11-08 18:15:41.394556+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     UNION  ``` "
"2022-11-08 18:15:41.406417+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     WHERE is_churned_group = FALSE ``` "
"2022-11-08 18:15:42.557283+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     SELECT         a.fundam__salesforce_account_id AS salesforce_account_id         , a.has_signed_contract ``` "
"2022-11-08 18:35:49.771522+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     SELECT         salesforce_account_id         , 'control' AS buffersize         , obs_start         , obs_end         , NULL AS churn_anchor_plus         , FALSE AS churn_in_outcome_window     FROM add_random ``` "
"2022-11-08 18:15:43.443045+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     SELECT         salesforce_account_id         , 'control' AS buffersize         , obs_start         , obs_end         , NULL AS churn_anchor_plus     FROM add_random ``` "
"2022-11-08 18:15:43.695264+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion         , coalesce(a.training_date < getdate(), FALSE) AS training_occurred          , days_from_train_to_now >= 90 AS lt_model_elig -- could be at 90 days         , days_from_train_to_now >= 195 AS lt_model_include -- with outcomes need 195 days of experience          , dateadd('day', 90, training_date) AS first_possible_lt_date      FROM treasure.dim_practicelocation AS a     LEFT OUTER JOIN treasure.aggdimext_practicelocation_orders_summary AS b         ON a.fundam__salesforce_account_id = b.salesforce_account_id      WHERE has_signed_contract         AND training_occurred  ) ``` "
"2022-11-08 18:15:43.721006+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     SELECT         salesforce_account_id , churn_anchor_plus , 'plus15' AS buffersize , dateadd('day', -45, churn_anchor_plus ) AS obs_start , dateadd('day', -15, churn_anchor_plus ) AS obs_end     FROM practice_data_source     WHERE churn_anchor_plus IS NOT NULL     UNION      SELECT         salesforce_account_id , churn_anchor_plus , 'plus10' AS buffersize , dateadd('day', -40, churn_anchor_plus ) AS obs_start , dateadd('day', -10, churn_anchor_plus ) AS obs_end     FROM practice_data_source     WHERE churn_anchor_plus IS NOT NULL     UNION ``` "
"2022-11-08 18:15:43.729177+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     FROM churn_timelines ``` "
"2022-11-08 18:16:29.691907+00","Actually could we make this a pattern that's easy to adopt?"
"2022-11-08 18:16:47.480245+00","Need to figure out what Im gonna do with this, why the other two _arent_ defined in `background` etc"
"2022-11-08 18:18:06.418175+00","I'm not sure if the wraparound selection is a good thing. `<select>` doesn't wrap and the `listbox` role should be near-identical to `<select>` in behavior."
"2022-11-08 18:19:29.698564+00","Alt+up/down is page up/page down which is also important for keyboard users."
"2022-11-08 18:21:06.522486+00","> I'm not sure if the wraparound selection is a good thing. `<select>` doesn't wrap and the `listbox` role should be near-identical to `<select>` in behavior.  I agree.   (Starting to feel like we need a flowchart of decisions and behaviour for all this!)"
"2022-11-08 18:42:42.818673+00","But what about the more specific case where there are 0 metrics with limits _but_ 5 monitors with failing units?  I'm just wondering if this branch exits before those 5 failing monitors are added to the Pareto chart."
"2022-11-08 19:02:45.545201+00","@rwagatenga I checked in other Schemas, they use `default: Date.now`"
"2022-11-08 19:02:53.54462+00","Ah, I didn't realize `searchUpdateHandler` gets called on page load!"
"2022-11-08 19:09:23.858273+00","I'll add the description in the model that is exposed to looker aggdimext_practicelocation_account_status_monthly"
"2022-11-08 19:12:19.712344+00","I'm anticipating that there might be some more data massaging to do in here once we hook up the es query, but I can drop this for now and bring it back if we need it."
"2022-11-08 19:13:50.638908+00","nope, not sure how this got changed - it's a mystery! 👻  (will change it back)"
"2022-11-08 19:24:28.639398+00","Similar to the `FieldStatus` work we did, I wanted to be able to call methods oh `OpsDashboardKpiTile` to change its state ... I can definitely try to rework it to use `Block` and event listeners like we did with `FieldStatus` before we decided to have it extend `Component` instead if it seems worth it. It's also definitely possible that I'm missing something here and it's not as complicated as I think :)"
"2022-11-08 19:24:54.137882+00","Nice catch!  Although the ""everything is OK alarm also works"" "
"2022-11-08 19:32:34.321164+00","I don't have much information on that, because this `Schema` was defined based on the `Typescript Interface` which was provided in the task `BM-3050`"
"2022-11-08 19:34:55.351751+00","Are these tests going to our actual Bitbucket instance or is the test data being injected (somehow)?"
"2022-11-08 19:34:55.685232+00","It would still be good to ensure that `fork` is nil"
"2022-11-08 19:39:08.266441+00","```suggestion func unmarshalBatchSpecRandID(id graphql.ID) (batchSpecRandID string, err error) { ```"
"2022-11-08 19:55:35.300008+00","We have a typo here, it's named `product` in the common.json, should be the same here"
"2022-11-08 19:56:37.182496+00","Yes thank you!"
"2022-11-08 20:18:31.42754+00","```suggestion               if (annotationType === 'lower') {             textLocation = -5 + (xLocation <= textAnnotationHeight ? textAnnotationHeight : 0);         } else {             textLocation = -5 + (xLocation >= innerWidth - textAnnotationHeight ? 0 : textAnnotationHeight);         } ```  This can be simplified to this 👆"
"2022-11-08 20:21:06.638747+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion ``` "
"2022-11-08 20:32:07.954403+00","This should be  `chairside_adjustment_minutes?: number | null;`  See https://www.notion.so/orthly/Schema-Style-Guide-84c8121622e84166a1b74c4fb780550d for an explanation  Even though this isn't written to by clients, it _could_ be so best to be careful."
"2022-11-08 20:34:09.67253+00","Nit: `tooltipTitle` will always be a `string` so no need for the `??  ''`"
"2022-11-08 21:01:22.932483+00","This is a super helpful notion page, thanks for directing me towards this!"
"2022-11-08 20:34:09.893122+00","I'd also test this, but MUI docs indicates that the tooltip won't show if the string length is empty, so you can likely remove `disableHoverListener`"
"2022-11-08 20:41:20.622516+00","eventsourced v2 updates this field automatically, so a number of these additions can be un-done after i upgrade the aggs"
"2022-11-08 20:50:12.441401+00","@jonboiser As we discussed, we found an additional bug in this case where scenario (2) is not implemented.  I created a ticket for this bug [WEB-2241](https://instrumental-inc.atlassian.net/browse/WEB-2241) along with a ticket to cover the functional test for this scenario. [WEB-2243](https://instrumental-inc.atlassian.net/browse/WEB-2243)"
"2022-11-08 20:50:34.378369+00","@Mjanuary revert this coz it is sorted"
"2022-11-08 20:59:32.942548+00","@Piszmog actual instance, docs on this process coming soon :)"
"2022-11-08 21:00:50.325667+00","i thought thats what this line does? `assert.Nil(t, err)`"
"2022-11-08 22:34:41.142487+00","i didn't really need to move these, but it's always annoyed/confused me that they weren't in fulfillment order (made it harder to visually parse the list)"
"2022-11-11 09:08:11.017242+00","Cleaning up comments "
"2022-11-08 21:04:24.761721+00","@sheldon-welinga better to use `Object.values` as client suggested in all PRs ```suggestion       Object.values(fields).forEach((field) => { ```"
"2022-11-08 21:11:32.079508+00","@jonathan-yee is this okay for now to hide setting limits for physical measurements as we do not have that functionality yet? "
"2022-11-08 21:17:31.373759+00","@jonathan-yee I discussed this with Isaac and we decided to hide the image type [intent name] for now if there is no associated auto monitor with it.  I created a separate ticket for me to handle the part that is to grab the parent image id. [WEB-2245](https://instrumental-inc.atlassian.net/browse/WEB-2245).  I hope to take this on if I have extra capacity this sprint. 🤗"
"2022-11-08 21:19:54.740767+00","@jonathan-yee  I am not 100% confident with the naming convention here. As the measurements property here contains both metrics and physical measurements, I was tempted to name it to measurements but then we also use measurements to count the number of measurements per each metric which could be confusing. This renaming obviously had created cascades of updates here. I'd be happy to pair up on this one if you see a huge issue with it.🤓"
"2022-11-08 21:20:20.483864+00","remove this print statement"
"2022-11-08 21:22:27.898439+00","@nweidinger Please confirm the following. Looking at the mockups it seems that the value next to the measurement name (boxed in red below) is the station name which is in line with other metric cards. It appears that perhaps we should add the intent name to the metric card as well, but I certainly think we should not be dropping the station name as these changes suggest for physical measurements.  ![Screenshot 2022-11-08 at 1 20 20 PM](https://user-images.githubusercontent.com/54614861/200677899-f501234b-dd3d-4ee5-8e43-871cfe79713f.png) "
"2022-11-08 21:43:14.135083+00","I do not have an opinion on this quite yet and would like to see what shakes out of #2567. This might have been an item to consider when deciding on whether we would cache the data stream metrics and the physical measurements together as one list OR cache them separately and only combine them as necessary which appears to be being handled in #2567. Whatever is decided, I think it should be consistent with the typings' naming convention."
"2022-11-08 21:24:24.305904+00","If you look at other patterns throughout the codebase, we want to check if the `typeof` is `undefined`, not just if it equals (or not) `undefined`."
"2022-11-08 21:26:21.974074+00","Seems reasonable, but I would change the note to a `TODO` or `FIXME` mentioning that we need to remove this check once limits are included not as a note that is permanently being left behind. Also note that ternary operators (`?` and `:`) should either be at the end of the previous line or the beginning of the next line. They should never be on their own line like this one is on line 457."
"2022-11-08 21:27:29.804332+00","Codebase styling: opening and closing brackets must be on the same indentation level."
"2022-11-08 21:28:36.55136+00","That's fair."
"2022-11-08 21:29:22.623079+00","Leaving a note here considering I saw this crop up on #2593. Could we leave descriptions for all of these typings we are adding so that we do not establish a pattern of not describing our typings?"
"2022-11-08 21:30:39.572475+00","How about single-quoated?  ```suggestion           <>{t('or_lowercase')}</>{' '} ```"
"2022-11-08 21:39:38.68184+00","That's reasonable, but we still need the station name? If I remember correctly, station name is included already as part of the previous work. As is, this change will hide the station name if it is a physical measurement."
"2022-11-08 21:42:11.347302+00","nope"
"2022-11-08 21:42:16.094977+00","No for this am not targeting the values, its the fields so its keys, e.g. `group: 'gatsby`. I want the key `group` not the value `gatsby`"
"2022-11-08 21:47:56.799152+00","Thank you Luis for your feedback and suggestion. After huddling a little bit, we decided to rename the table to `PaymentReceiptTokenExchangeRate`. It's a mouthful but the name is more honest. It indicate to which other table it is related to, and it doesn't signal any sort of re-usability."
"2022-11-08 21:49:30.143842+00","```suggestion                         <>                             Search your private code with{' '}                             <Link to=""https://signup.sourcegraph.com/"" onClick={() => eventLogger.log('ClickedOnCloudCTA')}>                                 Sourcegraph Cloud                             </Link> or contact us to purchase a subscription for a self-hosted Sourcegraph instance. See{' '}                             <Link to=""https://about.sourcegraph.com/pricing"">pricing</Link> for more information.                         </> ``` I think the `<>` fragment was used because of the console error below.  `<PageHeader/>` assigns `description` to a `Text` tag one level down <img width=""966"" alt=""image"" src=""https://user-images.githubusercontent.com/59381432/200682611-8f8da082-bbf0-420a-850d-8079784ac823.png""> "
"2022-11-08 21:51:40.190815+00","Shouldn't this be `metric-distribution-chart`?"
"2022-11-08 21:51:40.334726+00","You should remove this commented code"
"2022-11-08 21:51:40.643107+00","Typo + Wrong indentation: ```suggestion              * This is represented as a function because selected values is not defined when               * the component is loaded.              */ ```"
"2022-11-08 21:51:41.182485+00","I don't think these elements would ever be undefined/null. Why are we making these changes?"
"2022-11-08 21:51:41.195125+00","Why do we have changes in this file?"
"2022-11-09 01:54:44.674948+00","this refactor enables multiple timers to run in parallel, by having `startTimer` return a termination function, and have multiple running at once from a single `histogram` instance"
"2022-11-08 21:51:41.202511+00","Any reason why you removed the `MeasurementInfoQueryResponse` type here?"
"2022-11-08 21:51:41.379889+00","```suggestion                 // Select only bars that exist in the selected measurements for the visual correlations tab ```"
"2022-11-08 22:01:36.582476+00","discussed with @mckalexee and my concern is no more. "
"2022-11-08 22:08:59.115649+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion  , dedupe AS ( ``` "
"2022-11-08 22:08:59.164069+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion SELECT * FROM dedupe ``` "
"2022-11-08 22:08:59.20112+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     SELECT * FROM {{ source('dialpad', 'users') }} ``` "
"2022-11-08 22:08:59.619498+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion         , kustomer__team_name != 'OBC' DESC         , kustomer__team_last_updated_at DESC         , kustomer__last_updated_at DESC         , dialpad__last_updated_at DESC         , paylocity__last_updated_at DESC         , playvox__last_updated_at DESC         , kustomer__team_name DESC         , kustomer__team_display_name DESC) ``` "
"2022-11-08 22:09:00.156563+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion SELECT * FROM source ``` "
"2022-11-08 22:09:15.506618+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion         /* description month_start_frequency_bucket = True if all items within order have a value for price. */         , COALESCE(             LAST_VALUE(                 IFF(date_spine.period_marker__month_start, revenue_risk_score.frequency_bucket, NULL)             ) IGNORE NULLS             OVER (                 PARTITION BY                     revenue_risk_score.salesforce_account_id                 ORDER BY revenue_risk_score.as_of_date ASC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING             ) ``` "
"2022-11-08 22:09:15.155134+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     SELECT          /* description salesforce_account_id = Salesforce account id. */         revenue_risk_score.salesforce_account_id         /* description as_of_date = as of date. */         , revenue_risk_score.as_of_date         /* description is_current_date = True if as of date is the current date. */         , revenue_risk_score.is_current_date         /* description frequency_bucket = Frequency bucket a practice is assigned to based on their order frequency. */         , revenue_risk_score.frequency_bucket         /* description risk_level_current = Risk level a practice is assigned to based on their current and previous order frequency. */         , revenue_risk_score.risk_level_current         /* description risk_level_changed = Indicates whether the practice risk level has changed. */         , revenue_risk_score.risk_level_changed         /* description period_marker__month_start = Flag to indicate month start. */         , date_spine.period_marker__month_start         /* description period_marker__month_end = Flag to indicate month end. */         , date_spine.period_marker__month_end          /* description prev_month_start_risk_score = The risk score assigned to the practice at the start of the previous month. */         , COALESCE(             LAST_VALUE(                 IFF(date_spine.period_marker__month_start, revenue_risk_score.risk_level_current, NULL)             ) IGNORE NULLS             OVER (                 PARTITION BY                     revenue_risk_score.salesforce_account_id                 ORDER BY revenue_risk_score.as_of_date ASC ROWS BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING             )             , 'No risk score assigned') ``` "
"2022-11-08 22:09:15.366086+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion         /* description prev_month_start_frequency_bucket = True if all items within order have a value for price. */         , COALESCE(             LAST_VALUE(                 IFF(date_spine.period_marker__month_start, revenue_risk_score.frequency_bucket, NULL)             ) IGNORE NULLS             OVER (                 PARTITION BY                     revenue_risk_score.salesforce_account_id                 ORDER BY revenue_risk_score.as_of_date ASC ROWS BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING             )             , 'Pre-Orders') ``` "
"2022-11-08 22:09:15.539572+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion          /* description month_end_frequency_bucket = True if all items within order have a value for price. */         , COALESCE(             FIRST_VALUE(                 IFF(date_spine.period_marker__month_end, revenue_risk_score.frequency_bucket, NULL)             ) IGNORE NULLS             OVER (                 PARTITION BY                     revenue_risk_score.salesforce_account_id                 ORDER BY revenue_risk_score.as_of_date ASC ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING             )             , 'Future Date') AS month_end_frequency_bucket          /* description next_month_end_frequency_bucket = True if all items within order have a value for price. */         , COALESCE(             FIRST_VALUE(                 IFF(date_spine.period_marker__month_end, revenue_risk_score.frequency_bucket, NULL)             ) IGNORE NULLS             OVER (                 PARTITION BY                     revenue_risk_score.salesforce_account_id                 ORDER BY revenue_risk_score.as_of_date ASC ROWS BETWEEN 1 FOLLOWING AND UNBOUNDED FOLLOWING             )             , 'Future Date')         AS next_month_end_frequency_bucket          /* description changed_risk_score_during_month = True if all items within order have a value for price. */         , IFF(month_start_risk_score = month_end_risk_score, FALSE, TRUE) AS changed_risk_score_during_month         /* description changed_frequency_bucket_during_month = True if all items within order have a value for price. */         , IFF(             month_start_frequency_bucket = month_end_frequency_bucket, FALSE, TRUE         ) AS changed_frequency_bucket_during_month      FROM revenue_risk_score      LEFT OUTER JOIN date_spine         ON revenue_risk_score.as_of_date = date_spine.base_date ``` "
"2022-11-08 22:09:16.151211+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion          /* description month_end_risk_score = The risk score assigned to the practice at the end of the month. If this date is in the future it will be indicated by 'Future date'. */         , COALESCE(             FIRST_VALUE(                 IFF(date_spine.period_marker__month_end, revenue_risk_score.risk_level_current, NULL)             ) IGNORE NULLS             OVER (                 PARTITION BY                     revenue_risk_score.salesforce_account_id                 ORDER BY revenue_risk_score.as_of_date ASC ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING             )             , 'Future Date') AS month_end_risk_score          /* description next_month_end_risk_score = The risk score assigned to the practice at the end of the next month. If this date is in the future it will be indicated by 'Future date'. */         , COALESCE(             FIRST_VALUE(                 IFF(date_spine.period_marker__month_end, revenue_risk_score.risk_level_current, NULL)             ) IGNORE NULLS             OVER (                 PARTITION BY                     revenue_risk_score.salesforce_account_id                 ORDER BY revenue_risk_score.as_of_date ASC ROWS BETWEEN 1 FOLLOWING AND UNBOUNDED FOLLOWING             )             , 'Future Date') ``` "
"2022-11-08 22:09:16.510433+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion         /* description month_start_risk_score = The risk score assigned to the practice at the start of the month. */         , COALESCE(             LAST_VALUE(                 IFF(date_spine.period_marker__month_start, revenue_risk_score.risk_level_current, NULL)             ) IGNORE NULLS             OVER (                 PARTITION BY                     revenue_risk_score.salesforce_account_id                 ORDER BY revenue_risk_score.as_of_date ASC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING             ) ``` "
"2022-11-08 22:22:14.052396+00","I just realized it was the station name which I initially thought it was the image intent name. I reversed the change to display the station name."
"2022-11-08 22:35:47.128616+00","turns out there is, I've roped it into the new PR I have out"
"2022-11-08 23:11:43.021567+00","Do we want to specify that the reason is a failure to write to labtrac? Something like: ```suggestion                                     reason: ""Failed to write to Labtrac"",                                     human_readable: true,                                     data: OrderEntryWorker.maxRetryError                                 } ```"
"2022-11-08 23:11:43.522478+00","I think we could get rid of this comment"
"2022-11-09 01:58:54.976818+00","I'm having a hard time following this test, but it was loading metrics from `prom-client`, which isn't really an option with the otel lib without digging through its internals."
"2022-11-08 23:11:42.891418+00","I think there is a bug in `job-utils` logic to execute retries. The bug is not due to this code, but exposed by it.  [This](https://github.com/orthly/orthlyweb/blob/master/packages/services/src/utils/job-utils.service.ts#L146) should be calling the method on [`JobUtils`](https://github.com/orthly/orthlyweb/blob/master/packages/services/src/utils/job-utils.service.ts#L257), but is instead calling [this](https://github.com/orthly/orthlyweb/blob/master/packages/shared-types/src/utils/retryable-errors.ts#L39) - which does not consider a `RetryJobError` to be a retryable error  cc @dandysean @karimsa "
"2022-11-08 23:14:43.544883+00","nice attention to detail! 😍 "
"2022-11-08 23:16:56.075192+00","Multiple variant groups? "
"2022-11-08 23:34:14.225074+00","look on lines 4 and 14 in this file - idk why organization didn't have this"
"2022-11-08 23:43:22.743925+00","Just by reading these 50 minutes I can feel my hair go whiter.."
"2022-11-08 23:44:20.869394+00","😂 I'm just mimicking what we have on the backend. looks like it was 5 minutes originally and @rossproduct changed it to 50 so... I assume it took more than 5 at least once?"
"2022-11-08 23:45:09.562483+00","Yeah, I had it set to 2 minutes (""surely that's way more than enough""), then 5 (""okay _this_ has got to do the trick""), then finally 50 because after 5m failed I didn't want to keep guessing."
"2022-11-08 23:45:27.422493+00","inb4 500 minutes"
"2022-11-09 02:02:25.26249+00","not sure what we want to test here.  we can't [easily] look within otel the way we did with prom-client."
"2022-11-08 23:45:37.175012+00","5000 when?"
"2022-11-09 00:05:39.702497+00","This should be done via a graphql computed property rather than this"
"2022-11-09 00:07:38.091183+00","Also needs constraint of unique `order_id, experiment_id`"
"2022-11-09 00:08:49.74105+00","pseudo code:  ``` file_url() {   if (is enabled on LD && is part of experiment group) { return scan_export.margin_injected_url }   return scan_export.file_url } ```"
"2022-11-09 00:17:04.352476+00","Also this method should move to `OrderExperiment.service.ts` in `order/order-experiment/dto`. Make it generic - takes in experiment, possible groups.   Also merge `OrderExperiment.ts` and `ExperimentAssignemtn.dto`"
"2022-11-09 00:21:52.552932+00","This whole method needs to be atomic"
"2022-11-09 00:34:31.174701+00","Also should have a global launchdarkly flag for the whole experiment being enabled or not"
"2022-11-09 08:50:59.362473+00","A wisdom URL extraction can be painful. "
"2022-11-09 00:35:08.027857+00","Shouldn't we do this outside of the transaction to avoid holding up the write?"
"2022-11-09 00:35:51.389178+00","@mysuey  can I bug you to add a definition for these two while you have it open? "
"2022-11-09 00:38:49.27724+00","We probably should make one transaction per order rather than overall, right? Only problem being typeorm's pool is limiting on this. It will feel awkward to the user to have one of their order failures result in all of their orders fail."
"2022-11-09 00:41:51.171816+00","Yeah, that looks right to me - @dandysean "
"2022-11-09 01:06:31.274173+00","We've kinda gone over this a lot in the past, and the simple truth is: we can't stop a user from copying a query string in the search bar, so we can't guarantee ""meta"" information of a query are copied along with the search string either. Case in point: `patterntype:`. The copy button is just a compromise, that we cannot guarantee a user clicks on anyway. We have to accept the canonical representation of a search result set is the query URL, not the query string. The query string is a partial representation, subject to some default configuration/settings.  It is, and has been, IMO, a wrong design decision to encode certain information in the query string, like `patterntype` (we should not be encoding `patterntype` in a query string, neither should we allow any kind of value to affect how a query string is interpreted inside the query itself). Ranking is another example where, there is no value in the query string that determines which ranking algorithm to use for results (and at this point we should not have any such settings values in the query string).  Achieving a consistent runtime behavior of a query string shouldn't come down to ""how do we encode this information in the query string"" but rather ""where should users expect to copy the canonical representation of a search"". For our web app, that's the URL, and for CLI, we have CLI params (for streaming, or for search modes at some point, and so on).  This is why I'm generally in favor of proposals to remove the copy button. But it does provide some extra utility if the user just wants to copy the query string. The key thing is to not give the impression this is the canonical representation of the result set it may return. If it's likely that we create this impression, then we should think about removing it."
"2022-11-09 00:42:06.984369+00","I'm not sure if we should do a global retry here - not all of the errors at this stage are retryable (and we aren't checking what the error was)"
"2022-11-09 00:43:05.101894+00","Yes, let's keep the format of the existing errors:  ```                                                    reason:                                                         writeResult.error.reason ??                                                         `Failed to write order to labtrac: ${writeResult.error.kind} without a reason`,                                                     human_readable: !!writeResult.error.reason,                                                     data: {                                                         errors: writeResult.error                                                     } ``` "
"2022-11-09 00:43:19.355318+00","In theory it's superfluous, but the code around this state management is really poor and I don't want to delve into trying to make that possible right now--it's more likely I'll break something.  For example, `patterntype=xyz` is also superfluous in the default case, but we always set this unconditionally currently. We'd need to add logic to remove URL parameters when they correspond to the default, (which doesn't exist yet), and this needs to be _thoroughly_ tested before I'd feel good about it. So maybe after these changes are finalized!"
"2022-11-09 00:44:54.458109+00","Since the value is only determined by the toggle, and (I think) we don't show the toggle for VSCode, it can't be anything but `Precise`. I will double check interactions with the vscode plugin before merging this."
"2022-11-09 00:46:39.416966+00","**Request for comments here**: When the request clone status is `cloned`, we remove all results for which there is a row with a status distinct from `cloned`. I believe this should be the exact same set as _keeping_ all results for which there is a cloned `gitserver_repos` row."
"2022-11-09 00:48:55.286705+00","Sounds good!"
"2022-11-09 01:08:16.522888+00","The logic makes sense to me.   I don't quite understand why we're special-casing `CloneStatus == types.CloneStatusCloned` though. Couldn't we just do an inner join with `AND gr.clone_status = %s` for any clone status? I don't see why deferring the filtering to the `where` clause would actually be faster, and it seems possible that the speedup comes from moving the condition to the join rather than post-filtering. "
"2022-11-09 01:12:33.09087+00","```suggestion         // Dynamically add SnapshotRebuildLog to Connection so clients do not have to specify it ```"
"2022-11-09 01:13:25.141399+00","ugh you caught my copy-pasta"
"2022-11-09 01:14:51.402537+00","could we add: 1) OrthlyConfig.serviceName 2) date/time?"
"2022-11-09 01:15:08.172481+00","This is part of the optimization, it makes it so that we only need to hash and join a small subset, because the assumption is #cloned >> other states "
"2022-11-09 08:54:53.095015+00","oh i see   the `APIImageFeatureMeasurementType` are `Uppercase` as against the `ImageMetricFeatureType` that is `Capitalize`   ```export const PERPENDICULAR: APIImageFeatureMeasurementType = ""PERPENDICULAR"";```"
"2022-11-09 10:37:28.42389+00","@WajihaNiazi the issue was here plz use `withProfile = true,` coz check convert it to isBoolean not a string. and then in your condition you won't verify `if (withProfile == 'true')` it will be `if (withProfile)` ```suggestion       withProfile = true, ```"
"2022-11-09 01:15:16.330738+00","(Correct me if wrong)"
"2022-11-09 01:15:19.581643+00","snake_case?"
"2022-11-09 01:24:06.483351+00","Aaah, okay, that makes sense. Thanks for the extra explanation 😄 "
"2022-11-09 01:24:07.288766+00","```suggestion 	batchSpecRandID, err := unmarshalBatchSpecRandID(graphql.ID(rawBatchSpecRandID)) ```"
"2022-11-09 01:33:47.807108+00","i added the service name. we get the timestamp from a column default ```typescript     @Column({ type: 'timestamp with time zone', default: () => 'now()' })     created_at: Date; ```"
"2022-11-09 01:38:39.654686+00","apparently i revert to my pythonista roots when i try to rush"
"2022-11-09 01:54:15.827102+00","the port needs to be exposed in a way that `MetricsService` can access it.  this ultimately did not require a refactor of `DandyNestFactory` as a result of how the initialization of prom exporting ended up, but the refactor was already complete and this brings more of the startup logic into a shared package that be used to bootstrap other services, so I'm happy with it."
"2022-11-09 02:02:25.430597+00","I am pretty sure this was validating the labels against itself, rather than against the existing meter, so it would have never failed."
"2022-11-09 02:03:03.312507+00","should the labels ever be optional?"
"2022-11-09 02:03:07.90251+00","reset is not an option otel provides"
"2022-11-09 02:07:28.855024+00","For future reference: Isaac and I synced up offline and agreed that WEB-2233 doesn't block the changes in this PR from getting in since the `Search` component, even when instantiated by different pages, only gets [initialized once](https://github.com/dfxmachina/frontend/blob/master/app/modules/search/search.ts#L208-L212) making it so that calls to `api.aggregates` (before this PR) or to `/listMetrics` (after this PR), that fetch data for populating unit filter options, are only executed once."
"2022-11-09 02:08:30.232495+00","@gitstart-sourcegraph, could you test it using [guidelines from our documentation](https://docs.sourcegraph.com/dev/background-information/web/accessibility/how-to-screen-reader)?"
"2022-11-09 02:21:23.500324+00","No, it's used elsewhere in the actual app."
"2022-11-09 02:23:04.213811+00","I'm removing this page and code path in a separate PR #43985 and didn't want to do the extra work to pass through authenticatedUser only to remove that all again in another PR."
"2022-11-09 02:23:55.502726+00","hmm, i actually think we should remove this check, if we're trying to add a phone number to migrate a profile to a user, we should always fail if there is an existing user, same as below"
"2022-11-09 02:25:49.662467+00","How about  ``` interface FeedbackPromptProps {   // ...   authenticatedUser: { username: string, email: string } | null } ```  Then the `authenticatedUser` value from SourcegraphWebApp conforms to that type (without the need for a top-level spread, which could result in needless props being passed down), and it also documents that you can't (eg) have username but no email.  I also think it's good to name it `authenticatedUser` not just `username`/`email` because it makes it clear that it's for the authenticated user, and not (eg) a user you are giving feedback to or about.  This would basically mean the diff is:  ```diff diff --git a/client/wildcard/src/components/Feedback/FeedbackPrompt/FeedbackPrompt.tsx b/client/wildcard/src/components/Feedback/FeedbackPrompt/FeedbackPrompt.tsx index 53ec3a8add..03b775b4d2 100644 --- a/client/wildcard/src/components/Feedback/FeedbackPrompt/FeedbackPrompt.tsx +++ b/client/wildcard/src/components/Feedback/FeedbackPrompt/FeedbackPrompt.tsx @@ -23,6 +23,7 @@ export type FeedbackPromptSubmitEventHandler = (text: string) => Promise<Feedbac    export interface FeedbackPromptAuthenticatedUserProps {      authenticatedUser: Pick<AuthenticatedUser, 'username' | 'email'> | null +    authenticatedUser: { username: string; email: string } | null  }    interface FeedbackPromptContentProps extends FeedbackPromptAuthenticatedUserProps { ```  WDYT about that? (I will merge this without blocking on this in the interest of getting this improvement live, but happy to go back and fix it.)"
"2022-11-09 02:33:15.541533+00","In this project are used double quotes "
"2022-11-09 02:42:58.683757+00","@sqs, [using Sourcegraph](https://sourcegraph.com/search?q=context:global+repo:%5Egithub%5C.com/sourcegraph/sourcegraph%24+rev:sqs/feedback-prompt+productResearchEnabled&patternType=standard) I found that we only pass `true` as a value for this prop in the application. Could you share a place where this prop is used with a different value?"
"2022-11-09 02:53:38.342346+00","> Only problem being typeorm's pool is limiting on this  if you mean the deadlock issue, i don't think that would come into play here, because none of the transactions would need a connection (besides their own) to make progress.  (of course, it's still horrifying that someone could add an innocent-looking `SomeDTO.getRepository().find(...)` call within a transaction and introduce a deadlock scenario)"
"2022-11-09 02:54:55.087585+00","@eseliger I want to remove disparities between dotcom and non-dotcom as much as possible, even if it means a bit of jankiness like that error message. I think our audience will understand that, and it paves the way for things like read-only access or demos for some of the UI (not in scope now, but possibly something we'd like in the future to work on on Growth Marketing). I will update that error message to say that you need to use Sourcegraph Cloud or self-hosted, and then I think it's fine."
"2022-11-09 03:03:44.446504+00","I also just made it so the `/create` route is not registered on dotcom (with just an if-statement in the JSX)."
"2022-11-09 08:57:13.445612+00","Named after the famous album from the Bittles, Sg Err` "
"2022-11-09 03:03:59.231135+00","good call, done in e16c396"
"2022-11-09 03:06:13.432509+00","Added this"
"2022-11-09 03:09:44.225918+00","That is dreadful, but I’m actually referring to the fact that if you send 10+ orders to this (usually like Sean said, it’ll be 100+), you would deadlock every other command and query on the same pod until this one resolved"
"2022-11-09 03:20:41.390039+00","I just read [this article](https://dev.to/martinthenth/using-elixirs-with-statement-5e36) about `with` statements and I found it quite useful. Maybe we can add it as a reference.  Also, what do you think about linking different resources for the points mentioned in this doc? 🤔 "
"2022-11-09 03:23:35.721515+00","Why did you delete the Enum.filter? I thought we still needed it? I meant not to do the refactor I was suggesting. We still need this feature, right?"
"2022-11-09 03:24:41.118105+00","Does it make sense to use `with` here? I think `billable_client_monthly_usage` always matches.  cc @ishmam-mahmud, @rlopzc "
"2022-11-09 03:28:50.445299+00","I think here the with is more helpful for handling the else block more than here. Which is still a valid way to use with tbh. Maybe the `billable_client_monthly_usage` can be moved before the with begins, unless it can potentially return `nil` or a tuple as well?"
"2022-11-09 11:38:21.580783+00","@ryanslade gotcha, thanks!  I also like @mrnugget's idea about rephrasing :)"
"2022-11-09 03:28:57.118874+00","```suggestion       new_amount_in_credits =        client_monthly_credit_usage.instances_usage       |> Stream.filter(fn {_, %{instance_id: instance_id}} ->           instance_id           |> Instances.get_instance!()           |> commercial?()         end)       |> Enum.reduce(billable_instances_usage, 0, fn {_, billable_instance_usage}, acc -> acc + billable_instance_usage.amount_in_credits         end) ```"
"2022-11-09 03:30:06.54045+00","```suggestion       Clients.list_clients()       |> Stream.filter(fn client -> client.id != ""gitstart"" end)       |> Enum.map(fn client -> ```"
"2022-11-09 03:44:06.17271+00","Thanks, i've moved this to client context and do not need stream anymore."
"2022-11-09 03:45:26.580314+00","I don't see what you're trying to do here. We can't pipe like because we want to process two distinct maps. I need to merge this to focus on another project but feel free to improve this"
"2022-11-09 03:46:05.234079+00","I've added an :ok tuple to gain advantage of this"
"2022-11-09 03:51:23.592971+00","Not sure what you mean by ""enable"". There's nothing left to enable in the app; this is how the feature works today. Any developer can pick up a ticket, or have one assigned to them. If a developer picks up a task and puts it in their standup plan, then it gets posted to Slack, to their team. "
"2022-11-09 03:55:56.262498+00","You can add something in a new PR if you have the time and knowledge. I have no idea what we do as part of 'ticket fit'. We tried our best to document features in here, not process. Process is something that is likely to change, and we don't want to spend all of our time writing and editing docs for it!"
"2022-11-09 11:38:33.66201+00","nice!"
"2022-11-09 03:54:12.693175+00","You're welcome to start adding docs for this, we don't need a session. Plan some LInear tickets and tag us in them if you want help early on!"
"2022-11-09 03:54:47.592545+00","It will become way more obvious later why it's needed, but we don't have those features yet, so it hasn't been documented."
"2022-11-09 04:12:26.807563+00","```suggestion         resourceText=""Providers settings page can not be accessed on self-hosted / CLI platform"" ```"
"2022-11-09 04:45:43.870031+00","I didn't realize that you must use the `billable_instances_usage` variable as a value in the map that is returned. If that was not the case then the `billable_instances_usage` variable could've been avoided."
"2022-11-09 11:39:11.703861+00","Does this mess with some of our ""file walking"" logic that walks through that directory to find repos, count file sizes, etc.?"
"2022-11-09 04:54:19.95966+00","all instances are in this list now"
"2022-11-09 04:54:19.997139+00","added if is internal don't redirect as well"
"2022-11-09 05:14:46.778373+00","I need this like string. coz of check."
"2022-11-09 05:40:34.449461+00","Could you provide the ""long-form"" of SLO when it's first used and use the acronym afterwards?"
"2022-11-09 05:52:05.563027+00","> Attempting to allow LaunchDarkly to reconfigure (batch) span processor settings while running. e.g. kill switch for just turning off traffic.  You might want to try a `Sampler`, e.g. a variant of `TraceIdRatioBasedSampler`, rather than a `SpanProcessor` to implement a dynamic sample ratio (0.0 for kill switch)."
"2022-11-09 06:09:42.546664+00","This pattern feels a bit problematic to me (both before this refactor, and after). The instrumented code can get a bit clunky, and units are potentially problematic. Also, for the code above specifically, I don't think there are many situations where we would be willing to accept floor-to-whole-second timing resolution.  Maybe we could adopt alternative patterns for debug-level metric-based sub-operation timing that involve slightly less code pollution, perhaps along the lines of `startActiveSpan` or `withMsLatencyHistogram`. And unless we're actively alerting on these metrics perhaps they should just be `LoggingStopwatch` or actual custom trace spans during periods of intense scrutiny, and excised otherwise."
"2022-11-09 06:09:42.746523+00","The JS OTEL SDK sure is clunky."
"2022-11-09 06:09:42.742493+00","Agreed"
"2022-11-09 06:09:44.626005+00","Ouch"
"2022-11-09 06:12:00.72256+00","yeah I totally didn't mean to use floor.  I was surprised to see the expected units is seconds, tbh.  I would've expected ms."
"2022-11-09 06:12:20.95669+00","```suggestion             const durationSecs = durationMs / 1000; ```"
"2022-11-09 06:13:04.542481+00","yeah, it's very very picky about initialization order and what's attached to what.  it took many iterations to get it all right."
"2022-11-09 06:28:43.159513+00","why is this in this pr"
"2022-11-08 21:51:41.230634+00","Any particular reason why we choose to name this `render3dChcarts`? I think we could replace it with simply `renderChart`"
"2022-11-09 06:29:41.049923+00","yeah yeah ik"
"2022-11-09 06:31:30.152619+00","It can be great to have a separate test for these barcode assertions instead of editing the existing test. These assertions are not related to the existing test."
"2022-11-09 06:40:06.128018+00","that's right, but it looks like from the diff that line got deleted, though. I think Randell's saying we should keep it."
"2022-11-09 06:47:46.487588+00","```suggestion     case Repo.get(User, id) do       %User{} = user -> {:ok, user}       nil -> {:error, :user_not_found}     end ``` We want to return the user itself, not a `:user` atom."
"2022-11-09 06:47:57.751475+00","We should change the type spec as well. It documents the parameter and return types of the function. It should now be ``` @spec get_user(id :: pos_integer()) :: {:ok, User.t()} | {:error, :user_not_found} ```"
"2022-11-09 07:14:44.058971+00","I think we should add another `else if` specifically for `!IS_PLATFORM` and render the no permission message for it. In case there are some other edge cases that lead to the final return `<div />` on Non CLI/Self hosted platform."
"2022-11-09 07:16:16.408832+00","use defined enum rather than string literals  ```suggestion         if (this.controller.meas.feature.featureType === APIImageFeatureMeasurementType.PERPENDICULAR              && !this.controller.perpendicular         ) { ```"
"2022-11-09 07:27:30.042487+00","Thanks, I've tried it out but it shows an error like this.   > This condition will always return 'false' since the types '""ReferencePoint"" | ""LinearDistance"" | ""CircleDiameter"" | ""Angle"" | ""Scribble"" | ""Perpendicular"" | ""RectangleArea"" | ""CircleDrawing"" | ""RectangleDrawing"" | ""AnomalyGroundTruthLabel"" | ""RADLabel"" | ""Eraser""' and 'APIImageFeatureMeasurementType' have no overlap."
"2022-11-09 12:32:35.416045+00","https://github.com/sourcegraph/sourcegraph/pull/44145"
"2022-11-09 07:29:55.610965+00","```suggestion   ""Whether the user is a team lead of any team, repo owner of any repo or instance manager of any instance""   isLead: Boolean! ```"
"2022-11-09 07:33:56.539706+00","```suggestion   instances: [Instance!]! ```"
"2022-11-09 07:40:35.991387+00","This SQL finds users that are with role 'user' in `client_users` while being a developer as well, these people will get redirected, please check if they should be redirected: ```sql SELECT cu.*, u.* FROM users u JOIN client_users cu ON cu.""userId"" = u.id JOIN developers d ON d.id = u.login WHERE cu.role = 'user' ``` ![image](https://user-images.githubusercontent.com/43922849/200767574-61cdaabd-3140-4055-ac7d-3d501420f73e.png)  Can you check Bryan, Serge Deh and Keerthieaaswar, maybe change them to role `internal`, others should be good. "
"2022-11-09 07:43:18.307591+00","@Mjanuary revert this line. There's a line space after each import section"
"2022-11-09 09:07:58.53251+00","I don't think so, since the cluster didn't have https setup thus bitbucket set the url to be http 🤔  "
"2022-11-09 08:22:28.375725+00","Thanks for checking @ethanppl ! "
"2022-11-09 08:40:34.712543+00","Yeah. I think what we have is okay.  For reference, here's an example in `measurements.ts` where the string literal is used directly because there's no `APIImageMetricFeatureType` variation of what we have for `APIImageFeatureMeasurementType`.  ![image](https://user-images.githubusercontent.com/32432927/200781300-cc023f29-08a2-41ab-9333-354fbdd22ca4.png) "
"2022-11-09 08:43:05.122475+00","Just wondering, isn't that something we should simply patch along the way? I mean just doing `s/^http/https/`"
"2022-11-09 08:43:55.25225+00","I'm not awake yet, caffeine has yet to reach my brain, but I concur with your analysis here. "
"2022-11-09 08:46:10.732119+00","> Oh my dear --mirror, am I the prettiest of the kindgom this morning?   > Yes my prince, you're the flagship our our beauty fleet "
"2022-11-09 08:46:53.412507+00","LMAO ... this wins review comment of the year so far"
"2022-11-09 08:48:03.859747+00","Is this a Triforce where the use of 45 degrees rotations are forbidden? Great display of designing with constraints 👍 "
"2022-11-09 08:49:33.33293+00","See also a [recording](https://www.youtube.com/watch?v=DUIP-TOxbQs) on the client celebrating that newly acquired power. "
"2022-11-09 08:50:24.865792+00","```suggestion // LabradorRepos retrieves all repos from the bitbucket server. After all repos are retrieved the http or https clone ```"
"2022-11-09 08:54:34.92157+00","@m-ubaid-77  No action is being performed in onAppear modifier, do you need the modifier ?"
"2022-11-09 08:57:13.05221+00","```suggestion 		return nil, errors.Wrap(err, ""failed to create GitLab client"") ```"
"2022-11-09 08:57:13.286117+00","If that's why we have `sgerr`, our `errors` package has `As` as well. "
"2022-11-09 08:57:15.63211+00","```suggestion 		return nil, errors.Wrap(err, ""failed to create GitHub client"") ```"
"2022-11-09 08:57:15.664514+00","""This is the preffered client interacting with the REST API as it has more power"". Apart for the possible reference to DBZ I could make here, isn't there an issue with the phrasing? "
"2022-11-09 09:01:07.449007+00","Sounds good, I missed out on the part where tasks can be assigned by them. Now the feature serves both ways of working which is fine now"
"2022-11-09 09:04:04.922477+00","Sounds good, will keep this in mind and create a new PR as we work on the Ticket Creation Flow and Managed Ticket projects"
"2022-11-09 09:07:54.906621+00","@Mjanuary plz revert this line it was sorted"
"2022-11-09 09:09:03.404527+00","@Mjanuary revert this line it was already sorted "
"2022-11-09 09:11:45.658742+00","![gif](https://media.giphy.com/media/21GCae4djDWtP5soiY/giphy-downsized.gif)"
"2022-11-09 09:12:12.134436+00","I'll rephrase it 🤔 "
"2022-11-09 09:19:10.184187+00","```suggestion Fill in the form, such that the `code` should match with the client's ticket so that once the syncer does work, it won't create a duplicate ticket. So if they use: ```"
"2022-11-09 09:28:21.908132+00","Trying to be more assertive on using this feature very conservatively ```suggestion If you are a [lead](./2-roles-teams.md#roles) in the community then you will be able to manually create tickets. Use this feature only in case you need new tickets but the syncers don't work and the tickets don't get automatically created. ```"
"2022-11-09 09:34:57.372504+00","Added this function but, as it is not being used, CI was failing.. So commented it."
"2022-11-09 09:41:04.812494+00","@mikailyusuf Thanks for reviewing. I removed this."
"2022-11-09 09:21:58.272579+00","We use entity ids. This is the cause of this error <img width=""492"" alt=""Screenshot 2022-11-09 at 14 29 07"" src=""https://user-images.githubusercontent.com/21334508/200819021-d70ec9b0-58fa-4825-9817-94f8d7deea99.png"">  "
"2022-11-09 09:51:58.632496+00","oh i had removed that because 'fork' was undeclared"
"2022-11-09 09:52:54.283894+00","> `#cloned >> other states`  If I am not mistaken, on sourcegraph.com most repos are not cloned. But I suppose it is possible the gitserver_repos table may have most entries as cloned since that table is much newer than the repos table (assuming not every entry in repos exists in gitserver_repos).  At the end of the day, if the query plan is better once tested on .com then this is better."
"2022-11-09 09:55:18.519061+00","Every repo has a corresponding gitserver_repos entry.  you’re right that many are uncloned, but not many of the Indexable are, it’s 2.8M cloned vs 10k uncloned in that subset. "
"2022-11-10 14:14:58.881982+00","I am having blocker with adding test. The main blocker is I don't have idea how to pass `argTypes` in the test"
"2022-11-09 09:52:28.706324+00","The default avatar was created in a such way that it appears that it has a border. So this prop will be used mimic the border"
"2022-11-09 18:10:34.69761+00","Oh shoot. This leaked in from some other work. Will patch up this PR"
"2022-11-11 03:05:24.056313+00","```suggestion   return {     props: {       ...(locale ? await serverSideTranslations(locale, ['common']) : {}),     },   }; ```"
"2022-11-11 03:14:50.436207+00","```suggestion The Elixir community has created a set of standards on how we should write code based on the collective knowledge acquired so far. Following these conventions makes the code easier to understand, especially for newcomers. On top of that, we'll also build our own conventions and document all of them in this file. ```"
"2022-11-09 09:52:26.872519+00","I believe we need the default avatar when there is not `picture` provided"
"2022-11-09 10:12:49.503432+00","I do not think we should add any more statuses than necessary, as any status that we add significantly increases the whole system's complexity.  - Both `measure how quickly we fix change requests` and `review cycles` can be measured without introducing a new status. - `showcase status in client standups` - this could potentially be the reason to add this, but I'd like some confirmation that there's a material difference in how clients understand `in_progress` vs `changes_requested`. - `won’t know whether the PR was already pushed to client or wasn’t` this shouldn't be a status, but rather a separate property of the PR. "
"2022-11-09 10:19:42.789288+00","lol"
"2022-11-09 10:20:35.78827+00","This is the kind of code we don't show the Go haters"
"2022-11-09 10:27:54.057398+00","Please uncomment it as it would be used in a future PR. And what was the error message from CI ?"
"2022-11-09 10:30:20.83391+00","same here"
"2022-11-09 10:30:21.155623+00","should this be optional too?"
"2022-11-09 10:30:21.240136+00","fix indentation"
"2022-11-09 18:12:22.478444+00","Oh yeah, def need to add the control ref type! "
"2022-11-09 11:11:47.852467+00","```suggestion           if (!Object.keys(EnvelopeDocumentStatusEnums).includes(status)) { ``` ```suggestion           if (!Object.values(EnvelopeDocumentStatusEnums).includes(status)) { ``` use Object.values instead of Object.keys as it was suggested on other PRs by client"
"2022-11-09 11:11:49.651395+00","```suggestion             throw new BadRequestError(ErrorEnums.MISSING_PARAMS_OR_DATA, `statuses.${index}: value must be one of this ${Object.keys(EnvelopeDocumentStatusEnums)}`); ``` ```suggestion             throw new BadRequestError(ErrorEnums.MISSING_PARAMS_OR_DATA, `statuses.${index}: value must be one of this ${Object.values(EnvelopeDocumentStatusEnums)}`); ```"
"2022-11-09 11:16:52.071649+00","jsdoc format: ```suggestion      * @param options.annotationType Determines whether the annotation line is for the upper or lower bound. ```"
"2022-11-09 11:25:53.564665+00","do we need to explicitly create the directory and `chmod` it?"
"2022-11-09 11:25:53.973124+00","how to ensure that?"
"2022-11-09 11:28:36.290649+00","I tested locally without creating it and it worked"
"2022-11-09 11:29:52.419345+00","I guess the comment is just guidance to say whatever you pass in here should be writable. By default we pass in our repos directory and I don't see that changing any time soon."
"2022-11-09 11:37:11.498717+00","I think you can rephrase the comment to say ""we use a directory under our control so we can ensure it's writable"""
"2022-11-09 11:40:02.479123+00","I have the understanding that CLI tools are expected to give an empty output in case of success. But it might be an obsolete convention, plus I personally find it more user-friendly to get a success message, so I'll just add it. 👍 "
"2022-11-09 11:49:05.515372+00","I ended up removing this so it's not needed anymore."
"2022-11-09 11:55:40.211971+00","I assumed it would be safe since we do something similar here: https://github.com/sourcegraph/sourcegraph/blob/736a5626cdb97937206f52838bbeac757bf2a0ce/cmd/gitserver/server/cleanup.go#L929  But, good catch since it looks like we explicitly ignore this: https://github.com/sourcegraph/sourcegraph/blob/4448968a2d5b518d1eb1164b5d5a22fcec698663/cmd/gitserver/server/server.go#L921-L927"
"2022-11-09 12:11:20.032557+00","updated"
"2022-11-09 12:11:24.607341+00","updated"
"2022-11-09 12:11:30.902473+00","updated"
"2022-11-09 12:14:34.523809+00","Yeah this is fine "
"2022-11-09 12:14:34.588437+00","prefix `with` is used for HOCs lets call it something like `hasBoarder`"
"2022-11-09 12:14:35.133384+00","```suggestion         <Avatar picture={picture} size={96} hasBorder /> ```  This should look good if you followed the previous suggestion `withBorder` -> `hasBorder`  as well."
"2022-11-09 12:23:04.998552+00","```suggestion 	base := filepath.Base(path) 	return strings.HasPrefix(base, tempDirName) || strings.HasPrefix(base, P4HomeName) ```"
"2022-11-09 12:29:29.841384+00","Which is why I've introduced these helpers 😬   https://github.com/sourcegraph/sourcegraph/blob/71e7f4282e6090a704d055a1379a856c37e1d98b/cmd/frontend/graphqlbackend/graphqlbackend.go#L314-L332"
"2022-11-09 12:33:34.729631+00","```suggestion           if (!Object.values(EnvelopeDocumentStatusEnums).includes(status)) { ``` sorry this should be Object.values() as well"
"2022-11-09 12:38:53.220579+00","`allColumns` provided by `src/Components/ABOM/index.tsx` looks to be the same as the previous call here. Any reason for passing it as a prop vs having it internally? <img width=""301"" alt=""Screenshot 2022-11-09 at 15 36 21"" src=""https://user-images.githubusercontent.com/21334508/200832042-a3aef4d9-c8d2-4318-bbb8-37d0482d7861.png""> "
"2022-11-09 12:40:49.31187+00","Im not sure where else this particular pattern will be used, but we could look into it on a follow-up PR to go over the consequences and API surface etc"
"2022-11-09 12:47:07.659845+00","Sorry I forgot to comment on this: I believe these are separate improvements, outside of search history. cc @quinnkeast "
"2022-11-09 13:06:05.73963+00","Should we go on without a shortcut?"
"2022-11-09 13:11:02.66527+00","```suggestion     if (todayBookings) { ```"
"2022-11-09 13:11:02.68661+00","```suggestion    return todayBookings ? todayBookings[0][0]?.id !== undefined : false; ```"
"2022-11-09 13:11:02.712562+00","```suggestion           (booking) => ```"
"2022-11-09 13:11:03.374278+00","```suggestion           (booking) => ```"
"2022-11-09 13:11:03.845839+00","```suggestion     if (allBookings) { ```"
"2022-11-09 13:11:03.931671+00","Missing ""key"" prop for element in iterator"
"2022-11-09 13:11:04.025148+00","```suggestion       return todayBookings[0][0]?.id !== undefined; ```"
"2022-11-09 13:11:04.505578+00","This is confusing, todaysBookings is of type `[][]`, so `todayBookings` is an array. Why then use the length of `todayBookings` which is of type `[][]` instead of using `todayBookings[0][todayBookings[0].length - 1]`? Are we always sure that the lengths will always be in sync i.e the length of `todayBookings` will never exceed the length of `todayBookings[0]`?"
"2022-11-09 13:11:04.727248+00","```suggestion                   .map((booking) => { ```"
"2022-11-09 13:11:05.706718+00","It's not necessary typing data that is already typed, it just adds on the lines of code without any extra value ```suggestion                     (booking) => ```"
"2022-11-09 13:11:06.520173+00","Does `firstBookingItem` refer to the same thing in both these instances? If yes, then please retrieve the data from the same variable i.e  use `firstBookingItem: allBookings[0][0].id` in both instances. Using two different variables makes it ambiguous as to whether they refer to the same thing."
"2022-11-09 13:28:23.65722+00","I needed it in the parent component, that's why I moved it. Looking at it again, it's actually not necessary, I can just call it multiple times. "
"2022-11-09 13:38:52.734497+00","should P4Home permissions be checked too and that it exists? Just thinking in case someone configures something and then don't know why this is failing?  I guess the ultimately p4 error would indicate that the given path is not writable 🤔    **Nevermind. I forgot the filepath.Join at the top 🤦🏼** "
"2022-11-09 13:47:47.730346+00","We should use `isMacPlatform` that's already imported in scope"
"2022-11-09 13:57:11.125459+00","We should reuse the kinds from this list here (which got merged yesterday) https://sourcegraph.com/github.com/sourcegraph/sourcegraph@8eda459e113011a6c25af8acf17d5497056c1453/-/blob/client/web/src/repo/blob/codemirror/tokens-as-links.ts?L246:7-246:35"
"2022-11-09 13:58:31.811759+00","```suggestion ``` Let's just delete these as we deleted the function"
"2022-11-09 13:58:32.259083+00","```suggestion   @spec get_user(pos_integer()) :: {:ok, User.t()} | {:error, :user_not_found} ```"
"2022-11-09 13:58:57.299297+00","Nice!"
"2022-11-09 13:59:55.742735+00","It's conventional to put the ok tuple first in these cases"
"2022-11-09 14:05:45.957533+00","how was this not caught in a previous PR??? wtf prettier"
"2022-11-09 14:19:18.554083+00","Cool. It is good to minimize component prop changes."
"2022-11-09 14:23:34.783399+00","@olalekanteeblaze   The changes in this file don't have any effect and they don't need to show up in the diff."
"2022-11-09 14:38:11.999661+00","```suggestion   - `list_instances_where_is_lead/1` don't return the instances that the user is not a member or manager of or the instances that the user is not related to. ```"
"2022-11-09 14:42:47.892495+00","From **_BartoszJarocki_**: -1 do you mind keeping only these changes in this particular PR? if something isn't working, it's easier to track the change which is causing the issue when PRs are related to only one functionality/issue. "
"2022-11-09 14:44:56.617559+00","remove"
"2022-11-09 14:52:32.225795+00","renamed errors from cue to be aliased with cueErrs and rather use errors as our errors package"
"2022-11-09 14:52:39.527339+00","Rephrased it!"
"2022-11-09 15:03:37.446424+00","🤔 what do you mean here?"
"2022-11-09 15:19:48.597464+00","Can you elaborate on why this change is needed?"
"2022-11-09 15:37:48.91852+00","It's unquoted, but we don't have any interesting URLS and aren't likely to."
"2022-11-09 15:50:31.645228+00","If you wait for https://github.com/sourcegraph/sourcegraph/pull/43594 to be merged you can use `return shortcutDisplayName([...(keybinding.held || []), ...ordered].join('+'))`"
"2022-11-09 15:52:16.102576+00","`navigator.platform` is deprecated and not recommended to be used anymore, with `navigator.userAgentData.platform` replacing it. Should have no impact on adding it here besides it being done now rather than down the line when browsers start dropping support for it"
"2022-11-09 15:54:12.712497+00","This might not work anyways because the DOM is controlled by CodeMirror (so the attribute might be set again at some point)."
"2022-11-09 15:55:53.764832+00","Sounds good to me, can wait :+1: "
"2022-11-09 16:02:59.361391+00","@abeatrix is this PR good to merge? Seems like all that is needed is this change for CI to pass ```suggestion Please refer to the [upgrade docs for all Sourcegraph kubernetes instances](../kubernetes/operations.md#upgrade). ```"
"2022-11-09 16:08:12.506396+00","Any thoughts @valerybugakov @vovakulikov ?"
"2022-11-09 16:13:45.310578+00","shouldn't we allow if the logged in user's (not migrated) info matches the provided input and other profiles do not use the provided input? otherwise the logged in user will get `true` back from the `doesUserExist...` calls and will not be able to continue"
"2022-11-09 16:14:24.130409+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion         , kustomer__team_name != 'OBC' DESC         , kustomer_team_last_updated_at DESC         , kustomer_last_updated_at DESC         , dialpad_last_updated_at DESC         , paylocity_last_updated_at DESC         , playvox_last_updated_at DESC         , kustomer__team_name DESC         , kustomer__team_display_name DESC) ``` "
"2022-11-09 16:16:37.479953+00","Can the team lead input any ticket code he wishes? I think so, and I was concerned that there could be duplicated ticket code. However it's nto possible since code is a UNIQUE field in the DB. So that would throw an error. The error probably won't be understandable for the dev, but it's unimportant as you added the guideline to copy the code from the client's issue tracking system in the docs."
"2022-11-09 16:16:50.265617+00","When we have more than 10 meetings scheduled, one more array is generated inside the initial meeting, so when ""allBookings.length > 1"" we need to use ""allBookings[0][0] to find the first meeting."
"2022-11-09 16:39:30.2323+00","Yeah our other consideration was to use something like [`patch-package`](https://www.npmjs.com/package/patch-package). The default here is really bad since it makes none of the gutters accessible for screenreaders, so maybe there's an argument for fixing it upstream (and only apply aria-hidden to the line numbers) 🤔  "
"2022-11-09 16:17:43.679226+00","@hashimaziz46 this `true` not required in `if` condition check only `withLatestVersion` ```suggestion       if (withLatestVersion) { ```"
"2022-11-09 16:24:04.12584+00","This is because when today's array of meetings is not more than 10 and All is, a new request is made to today's array. So today has an array with the meetings and an empty array ![Screenshot_10](https://user-images.githubusercontent.com/87545086/200884812-834f553b-241c-4f9f-bddb-f4f3f74d6bfc.png) "
"2022-11-09 16:25:42.836917+00","Will slashes etc in the url not cause escaping?"
"2022-11-09 16:33:20.901764+00","@Joeb3219 `/` != `\`"
"2022-11-09 16:37:08.590015+00","Instead of getting custom CSV attributes as a default, we can add another case specifically for attributes since we know their structure `attr_***` <img width=""162"" alt=""Screenshot 2022-11-09 at 19 31 59"" src=""https://user-images.githubusercontent.com/21334508/200887562-bc2a8075-d48d-43fb-b400-7769084455e1.png""> "
"2022-11-09 16:48:55.18784+00","Thanks @rwagatenga for that, I would have missed out this"
"2022-11-09 17:28:40.194433+00","This feature needs to be hidden behind another feature flag. Could you add this line as well? cc @jonathan-yee   ```suggestion         if (accessStatus.call(this, 'auto-measure', 'ignore') === 'ignore') return ```"
"2022-11-09 16:37:33.043605+00","Let's make this a required field in the create_ticket changeset I'd also remove the clientId field from the changeset and add a separate function that fetches the correct client id depending on the instance id passed in"
"2022-11-09 16:37:33.249864+00","tip: You can use Repo.exists? for checks when you need at least one row like this"
"2022-11-09 16:37:33.287336+00","```suggestion - instanceId: from GraphQL payload ```"
"2022-11-09 17:20:14.982518+00","I don't think we can do that since we're using a switch statement. We can only compare if we know for sure the value we'll be comparing it with"
"2022-11-09 16:37:33.4427+00","```suggestion - clientId: using `GitstartEngine.Instances.get_instance(instance_id)`, we can get Instance object and extract the the client_id ``` I would write a custom query inline that selects only the client id. There is no need to retrieve the whole instance here."
"2022-11-09 16:37:49.896696+00","this is probably supposed to be this project's ID, not production's"
"2022-11-09 16:38:01.819858+00","but I don't foresee CCI doing deployments in this project so you can just delete this binding all together tbh"
"2022-11-09 16:43:18.646875+00","Thanks. Fixed in f8c0088ae431ca97ef2c94c6708101388c00dd6e."
"2022-11-09 16:43:48.147643+00","From a test case perspective would it make sense to update to two different values so that in the event that the new value matches the default value we still get confirmation that the update succeeded and the backend isn't just returning the default value that happens to match what we attempted to update this field to?  This could probably be something like the following *un-tested* example:  ```ts .waitUntilReady() .updateAlertBucketSize(1440, true) .confirmBucketSize(1440) .updateAlertBucketSize(60, true) .confirmBucketSize(60) ```  This applies to other fields as well.  "
"2022-11-09 16:51:10.469272+00","Resolved"
"2022-11-09 16:52:18.032167+00","This is the relevant change of this file. The rest are formatting. We replace ItemBankAssessment component with a component specific for overview with button to navigate to review, preview or take the assessment"
"2022-11-09 16:52:59.205986+00","We enclose the app with our AssessmentProvider needed for react-query and making ajax requests"
"2022-11-09 16:54:23.989359+00","With items already being fetched internally by the Review component, there is no need to return the items here. What's needed here is the uuid."
"2022-11-09 16:58:28.347616+00","> This might not work anyways because the DOM is controlled by CodeMirror (so the attribute might be set again at some point).  What if we add gutters' dependencies (file blob, blame hunks, etc.) as `useEffect` dependencies? Could it help? But yeah, it still sounds unsafe. "
"2022-11-09 17:15:16.670635+00","Each state is now it's own route."
"2022-11-09 17:31:52.660495+00","added descriptions and made the 'else' clause more descriptive"
"2022-11-09 17:41:09.789139+00","I see no issue with this but noting especially for @vovakulikov  a single time point could be incomplete for multiple reasons. "
"2022-11-09 17:41:12.560597+00","True and using conditions on a case is a terrible idea."
"2022-11-09 17:43:43.885723+00","I'm not sure I follow this logic. These are supposed to be due 48 business hours post trigger right? Maybe worth clarifying with the stakeholder but 48 """"business hours"""" would mean 6 working days (at 8 hours a day). I'm not sure if they intended that to really mean ""two working days"" but worth clarifying either way.   That detail aside, I'm not sure this dateadd() is quite right. I think this would result in a timestamp thats 6AM UTC which is 1AM ET. I think it is probably more robust to take just the date you're wanting to work with (no time information) and create a timestamp with the `timestamp_from_parts()` function so you don't have to worry about the dateadd being correct. See [here](https://docs.snowflake.com/en/sql-reference/functions/timestamp_from_parts.html)."
"2022-11-09 17:46:53.278578+00","on the first part, when i originally created these I discussed with stakeholders, they meant 2 business days (and not 6)  i'll look at the timestamp_from_parts(), this is cool, did not know it existed, thanks"
"2022-11-09 17:53:18.318929+00","one nit: this is technically mutable"
"2022-11-09 17:53:18.630991+00","We can still type the control ref, no?"
"2022-11-09 18:01:22.654823+00","I'm starting to think we need some kind of feature detection/API versioning for the extensions :/ "
"2022-11-09 18:02:58.561633+00","This makes sense, thanks for the detailed response. FYI @quinnkeast since you're experimenting a lot with this UI."
"2022-11-09 18:08:40.332695+00","Done @jonboiser "
"2022-11-09 18:09:36.957877+00","It looks like the `timeZone` prop doesn't exist. Is the objective to render the time in UTC? Or is it to convert a UTC time to the user's time zone for rendering?"
"2022-11-09 18:13:53.089668+00","Thank you!  In #43927 (incomplete issue at moment of posting this comment) I'm proposing removing the copy button out of the input itself, while still exposing it as an option in a dropdown menu.   >Achieving a consistent runtime behavior of a query string shouldn't come down to ""how do we encode this information in the query string"" but rather ""where should users expect to copy the canonical representation of a search"". For our web app, that's the URL, and for CLI, we have CLI params (for streaming, or for search modes at some point, and so on).  I love this description—""where should **users** expect to copy the canonical representation of a search."""
"2022-11-09 18:16:43.59291+00","I think we can go without a shortcut for now. Users can tab to the button in any case."
"2022-11-09 18:19:28.139256+00","So the help button is dead? 🔥🔥🔥"
"2022-11-09 18:22:35.796236+00","These lines are unreachable and are causing main to fail lint https://buildkite.com/sourcegraph/sourcegraph/builds/182437 @davejrt "
"2022-11-09 18:29:42.415048+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion , standard_features AS ( ``` "
"2022-11-09 19:44:58.544731+00","Same?"
"2022-11-09 18:29:42.514152+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion             WHEN churn_date IS NOT NULL AND placed_an_order THEN last_order_delivered_all             WHEN churn_date IS NOT NULL AND NOT placed_an_order THEN training_date END AS churn_anchor_date ``` "
"2022-11-09 18:29:42.558708+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion         , CASE WHEN is_more_than_churn_time AND placed_an_order THEN last_order_delivered_all             WHEN is_more_than_churn_time AND NOT placed_an_order THEN training_date ``` "
"2022-11-09 18:29:42.624388+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion         1, 2, 3, 4, 5, 6, 7, 8, 9 ``` "
"2022-11-09 18:29:43.662271+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion ``` "
"2022-11-09 18:32:23.756676+00","> (doesn't work in Safari or Firefox).  the code still falls back to `navigator.platform`, so all browsers should function fine here"
"2022-11-09 18:37:12.675498+00","@jonathan-yee Here is my attempt at finding the parentImageId. I am pulling in the image if the measurementId matches the parentImage's source target measurement Id which works 😬. However, I am a bit skeptical on what should be the right approach if there are two the same type measurements?  For instance, manual measurement 'GG Three Points Manual Measurements' was taken on the parent image '`Subassembly Type 0.0`' then again the same named 'GG Three Points Manual Measurements' measurement was taken on '`Subassembly Type 0.3`' later. With the current implementation here, this would pull in the `'Subassembly Type 0.0'`.  Shall we sort it measurement ids by the most recent measurement for this case so we could display 'Subassembly Type 0.3'?   "
"2022-11-09 18:28:01.205094+00","[`navigator.userAgentData` is not broadly supported](https://caniuse.com/mdn-api_workernavigator_useragentdata) (doesn't work in Safari or Firefox). Let's keep `navigator.platform` for now.  FWIW browsers will never drop support for this 😅 Though they might [hardcode it to something useless like they did with `navigator.appName`.](https://developer.mozilla.org/en-US/docs/Web/API/Navigator/appName)  EDIT: after looking at the code, it's using both and preferring the newer one if it exists; this is fine and I think it's the right way to go. Though we should check back then Safari for iPad supports the new property as we also need to render Mac-style shortcuts there. (Safari for iPad now reports as Mac for compatibility)."
"2022-11-09 18:33:45.485434+00","Yup posted an edit a bit late 😅"
"2022-11-09 18:38:35.94505+00","I don't have any preferences here. I'm sure that browsers will never drop support for this though. Usually it's good to use new api as much as possible. If it has a right fallback with `window.navigator.platform.includes('Mac')` I don't see any blockers for not doing this.   Speaking about new API and expressions: using || seems a bit ancient. Should we use here ?? operator instead? @Strum355? "
"2022-11-09 18:42:19.450023+00","> Speaking about new API and expressions: using || seems a bit ancient. Should we use here ?? operator instead? @Strum355?  Can definitely do this"
"2022-11-09 18:49:35.99996+00","alternatively no pointer and treat 0 value as missing. This prevents 0 from being a valid input"
"2022-11-09 18:54:02.879413+00","I couldn't find a better type for using the locale prop in the serverside so i left it as any"
"2022-11-09 19:04:05.752495+00","@jonathan-yee as we discussed this offline. I will abstract out the query so that way, there is not too much load on the typescript part to massage this data. "
"2022-11-09 19:09:51.486091+00","I think it'll look better if we just use `DARK_GRAY` regardless of selected/unselected"
"2022-11-09 19:15:09.219879+00","This is how it looks with eaa23de.  <img width=""1840"" alt=""Screenshot 2022-11-09 at 11 12 47 AM"" src=""https://user-images.githubusercontent.com/43425812/200920650-85ab7e65-6ee6-42b7-a97e-04e4133a4b69.png"">"
"2022-11-09 19:27:22.642487+00","suggestion: add a comment similar to this here explaining why this is in UTC.  ```suggestion                 {/* Display commit date in UTC to match behavior of before/after filters */}                 <Timestamp date={result.committerDate} noAbout={true} strict={true} utc={true} /> ```"
"2022-11-09 19:29:23.638645+00","oh right, yes, I think that's the only check we'll want, I don't think the practiceemployees check is necessary since there's no unique constraint there, let me know if you want to discuss"
"2022-11-09 19:30:10.587195+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     , SPLIT_PART(stg_training.training_duration, ' ', 0) AS training_duration_hours_split     , CAST(training_duration_hours_split AS decimal(15, 1)) AS training_duration_hours ``` "
"2022-11-09 19:30:52.499031+00","Let's use `rem` so that if the user changes their default font size we scale with that. Also add a comment explaining why this is needed.  ```suggestion     // Set a minimum height so the page doesn't shift when changing tabs     min-height: 21rem;  ```"
"2022-11-09 19:33:36.989445+00","why is this still here?"
"2022-11-09 19:35:56.542487+00","Good call! Thanks Juliana"
"2022-11-09 19:41:46.686891+00","```bash > yarn why @tsconfig/node12  yarn why v1.18.0 [1/4] 🤔  Why do we have the module ""@tsconfig/node12""...? [2/4] 🚚  Initialising dependency graph... [3/4] 🔍  Finding dependency... [4/4] 🚡  Calculating file sizes... => Found ""@tsconfig/node12@1.0.9"" info Reasons this module exists    - ""_project_#ts-node"" depends on it    - Hoisted from ""_project_#ts-node#@tsconfig#node12"" info Disk size without dependencies: ""16KB"" info Disk size with unique dependencies: ""16KB"" info Disk size with transitive dependencies: ""16KB"" info Number of shared dependencies: 0 ✨  Done in 1.37s. ```"
"2022-11-09 19:44:58.540814+00","```suggestion /** The page area for all executors settings in org settings. */ ```"
"2022-11-09 19:22:36.878694+00","Here's how the rectangle drawn from `(0, 0)` to `(500, 290)` looks like in both environments:  My local dev: ![image](https://user-images.githubusercontent.com/712667/200919225-59926cb1-83bd-4f38-ab11-3e1142e6a511.png)  CI: <img width=""1311"" alt=""image"" src=""https://user-images.githubusercontent.com/712667/200919094-feabb4d1-8606-48bf-8702-148931f5b34b.png"">  I believe the mismatch is related with the coordinates being on image space instead of canvas space which then yields different results based on the screen resolution.  I'd suggest: 1. Changing the minimum area percentage back to `20` it's fine if we're overriding it to the default since this prevents unexpected failures if the default value changes in the future 2. Drawing a region that holds only 15% of the image;  for a 600x400 image a 90x400 rectangle should do it 3. Converting 90x400 to canvas space 4. Updating the percentage references on lines 396 and 397 so that it uses the `20%` minimum percentage and `15.0%` selected region percentage  For #3 something like the following should work:  ```ts browser.perform(() => {     browser.url(`http://localhost:8000${Pages.UNITS}`);      unitsPage         .waitUntilReady()         .waitUntilAlignmentFormReady()         .selectUnit(unitA.id)         .selectIntent({ intentNumber: 1, unitId: unitA.id });          browser.execute(             (coordinates) => {                 const hero: HeroComponent = window['UnsafeInstrumentalDeps'].router.activePage.deps.hero;                 return hero.convertPointFromImageSpaceToCanvasSpace(coordinates.x, coordinates.y);             },             [{ x: 90, y: 400 }], // 90x400 = 15% of a 600x400 image             (result: NightwatchCallbackResult<{ x: number, y: number}>) => {                 unitsPage.selectRect({ x: 0, y: 0 }, { x: v(result).x, y: v(result).y })                 browser                     .waitThenClick('.alignment-setup-root-units-list-add-action')                     .submitForm('form.alignment-setup-form');             }         ); }); ```   If for some reason the aforementioned suggestion doesn't work, I'd suggest tweaking the assertion on lines 395 to something simpler like the following:  ```ts .assert.containsText('#confirm-modal .confirm-modal-content','This version of alignment works best with large root regions') ``` "
"2022-11-09 19:44:58.936263+00","```suggestion                                 tooltip=""This secret is available to all users of the Sourcegraph instance.""                                 aria-label=""This secret is available to all users of the Sourcegraph instance."" ```"
"2022-11-09 19:45:05.853067+00","(and again)"
"2022-11-09 19:44:59.123999+00","I was kind of confused by this label because it made me think it was describing an element with the literal _value_ of the _secret_, even though we just show the key and metadata about it. Maybe just ""Secret"" would be better? Or even omitting it entirely?"
"2022-11-09 19:44:59.346728+00","```suggestion             <H3 id={labelId}>Access logs</H3> ```"
"2022-11-09 19:44:59.430218+00","```suggestion                                                     {variable.name}: {variable.value === null ? <i>Set from secret</i> : <>{variable.value}</>} ```"
"2022-11-09 19:44:59.634012+00","Maybe we could match the style of the ""created at"" timestamp on batch changes here?  <img width=""567"" alt=""image"" src=""https://user-images.githubusercontent.com/8942601/200915611-50d9d054-ccbd-481d-833c-ee04f709bbc9.png"">  So text-muted, normal font weight, and don't start with a capital ""B""? "
"2022-11-09 19:45:01.787956+00","Not that I realistically expect anyone to be creating 1000 secrets, but is there a reason not to increase this cap to something more synonymous with ""unlimited"", like 99999, just in case? 😅"
"2022-11-09 19:44:59.962162+00","```suggestion                     ...ExecutorSecretAccessLogsConnectionFields ```"
"2022-11-09 19:45:00.392481+00","```suggestion     fragment ExecutorSecretAccessLogsConnectionFields on ExecutorSecretAccessLogConnection { ```  I think the GraphQL schema type should also be plural but I know that was from the last PR, sorry. 😬"
"2022-11-09 19:45:02.775557+00","(see above)"
"2022-11-09 19:45:02.831336+00","I don't have any problem if you wanted to include the modals as children of the `<li />` and get rid of the containing fragment. 🙂"
"2022-11-09 19:45:03.563232+00","Can you add a more human-readable interpretation of this condition as a comment, maybe? 😬"
"2022-11-09 20:19:17.875985+00","just pash the entire dataPush and handle the logic on the pushNavigate function, you don't even need an if here, just pass the remotemessage?.data and handle all the logic on the pushNavigate function"
"2022-11-09 19:45:00.411447+00","Maybe worth a comment why we're doing this, since the place it's actually used is ~150 lines away?  ```suggestion                     // We fetch the execution secrets available in this namespace to provide                     // autocomplete for env fields. The secrets are namespace-specific.                     distinctUntilChanged((prev, next) => prev.batchChangeNamespace === next.batchChangeNamespace),                     switchMap(props =>                         requestGraphQL<                             BatchSpecExecutionAvailableSecretKeysResult,                             BatchSpecExecutionAvailableSecretKeysVariables                         >(BATCH_SPEC_EXECUTION_AVAILABLE_SECRET_KEYS, {                             namespace: props.batchChangeNamespace!.id,                         })                     ), ```"
"2022-11-09 19:45:00.728217+00","I appreciate the intention, but I guess this feels like putting docs in the product? We don't have this for PATs, so do we need it for secrets? I think the badge and tooltip add the necessary clarity when it's relevant, but considering there may not even _be_ global secrets configured, this extended intro feels unnecessary to me. Just my opinion of course. If we do want to keep it, I'd argue we should do the same for PATs at least. 🙂"
"2022-11-09 19:45:01.228787+00","I'd probably also remove it from the `H3`, as it's kinda ancillary."
"2022-11-09 19:45:01.73297+00","I do think it makes sense to cover all the states here, but it's also a bit weird to have a story that renders... nothing? 😅 Idk, maybe we at least throw in a comment here like ""(renders nothing)"" so someone doesn't get confused and think the story broke? "
"2022-11-09 19:45:03.045286+00","...It doesn't _start_ open? 😬"
"2022-11-09 19:45:11.502607+00","Again with the ""batches"" vs. ""batch changes"" 😭"
"2022-11-09 19:45:02.047452+00","I feel like I'm missing something. Why does this seem to need a different treatment from `useExecutorSecretAccessLogsConnection` down below? That one injects the variable `secret` the exact same way, no?  I would have expected this to just be defined like:  ```suggestion export const useUserExecutorSecretsConnection = (     user: Scalars['ID'],     scope: ExecutorSecretScope ): UseConnectionResult<ExecutorSecretFields> => ```  I think the linter warning is just over a hook being called from a non-component, non-hook-function, right? I think just naming it in the ""hook-y"" way (starts with `use`) is all that's going on here."
"2022-11-09 19:45:03.642407+00","```suggestion             <H3 id={labelId}>Executor secret: {secret.key}</H3> ```  Might be more our style, looking at the Remove Credentials modal for inspiration."
"2022-11-09 19:45:05.463167+00","(same)"
"2022-11-09 20:15:17.052475+00","This was defined based on the provided interface"
"2022-11-09 19:45:05.49484+00","Nice touch. 🙂"
"2022-11-09 19:45:05.557558+00","Should we turn on snapshots for this page?"
"2022-11-09 19:45:06.62151+00","Nit: we're inconsistent between this and the secrets list in terms of centered vs. left-aligned summary and `noSummaryIfAllNodesVisible`. "
"2022-11-09 19:45:07.865868+00","I got really confused by this when I first saw it in the Storybook story, especailly since right now the only scope is ""Batch Changes"", which results in a disabled button. I think this probably ought to be a dropdown, not buttons, and there should probably be a label for ""Scope"" or something next to."
"2022-11-09 19:45:09.690411+00","Like we do with most of our other connections, maybe we should preface this with a 1-sentence text summary of what this list represents."
"2022-11-09 19:45:09.712491+00","I think the button text is sufficient as a label here.  ```suggestion                         <Button onClick={onClickAdd} variant=""primary""> ```"
"2022-11-09 19:45:12.203805+00","In general our approach to UI seems to be that it's better not to hide things, just to disable them. Since there isn't a concept of disabled sidebar items, maybe instead it would make sense to show a banner on the secrets list page (or a different version of the list?) if executors aren't enabled.  (If `areExecutorsConfigured` is `true` even after executors are disabled, that doesn't seem good. 😅)"
"2022-11-09 20:04:25.050587+00","What's the advantage to using `relay` over our own `graphqlbackend` for the marshaling we're doing here?"
"2022-11-09 20:04:25.890987+00","AFAIK this is the first batch changes use of a feature flag, right? Not to be overkill, but do we want to establish a batch-changes-specific naming scheme, or even start some super basic doc for tracking and maintaining active flags?"
"2022-11-09 19:44:59.456788+00","I'm starting to feel like we should just add a GraphQL resolver to get the schema for a given batch change from the backend. 😅"
"2022-11-09 20:14:50.973193+00","Same here, I'd rather the root cause be addressed. This is a genuine error / state synchronization error"
"2022-11-09 20:14:52.367999+00","I'm going to push back against this being downgraded to warning. It's a genuine error, and there's an extremely simple solution to prevent the log spam from calling LoadScanViewModel in an infinite loop(rate limiting)"
"2022-11-09 20:16:21.612591+00","I disagree -- it is a genuine error, and we will still get tracking, but it serves zero purpose being in Sentry. Nobody is going to see it in Sentry and go fix someting. The fix for rate limiting is not straightforward, and these 4 errors combine to be a higher volume of error than the entirety of our labs sever. We'll still track it just the same."
"2022-11-09 20:16:49.917983+00","I believe this is fixed in 1.48, but I will say -- this error isn't actionable, so it's just accumulating and not helping us."
"2022-11-09 20:17:31.711438+00","yep! If you could re-add it. I like to ensure we cover our bases with outputs"
"2022-11-09 20:25:25.5436+00","@dandysean - Why are we timing a `flatMap` call"
"2022-11-09 20:14:06.038661+00","I don't know who has access to traces on customer instances but these patterns feel like something that we shouldn't expose in this way, so this just returns `nil` since there's nothing else to observe"
"2022-11-09 20:23:39.010552+00",">The fix for rate limiting is not straightforward  What is stopping us from inserting logic in the retry code, which adds like 5-50ms of padding between calls after a certain number of retries? At a certain point, if an operation fails maybe 5 times in a row, there's not too much value in subsequent calls in a while loop, especially not on the scale of thousands - tens of thousands invocations per second  > Nobody is going to see it in Sentry and go fix someting  I disagree. If a new issue pops up r.e. failing to activate the scan flow, that's something which should be flagged via sentry. If we can just alleviate the sheer amount of automated retries, it is extremely manageable to monitor these logs  "
"2022-11-09 20:26:18.54254+00","Because the retry logic doesn't run in a loop -- we'd need to rearchitect how this works. There already _is_ a 50ms delay between calls."
"2022-11-09 20:28:33.032339+00","![image](https://user-images.githubusercontent.com/22334471/200934887-ae3b6c78-bd62-476a-b864-a1687d850c18.png)  There's no 50ms delay, check out these logs https://my.papertrailapp.com/systems/9e4296f8-b996-4abb-8a4e-90475d75cafd/events?focus=1527076680689147908&selected=1527076680689147908"
"2022-11-09 20:32:55.048406+00","One retry every 50ms = 20 retries per second, or 1,200 exception logs per minute. I understand that there might be some pain points with changing this logic, but we really should invest time into changing the behavior. This is the #1 source of log volume in papertrail, and has been around for a loong time "
"2022-11-09 20:37:58.618621+00","Do we need to say that it's embedded in the UI? "
"2022-11-09 20:37:58.865195+00","@lcolston08 - this introduces a typo. Is there anything we need to update here? "
"2022-11-09 20:37:59.102481+00","```suggestion In addition to searching your private code, GitHub has indexed over 7 million public GitHub repositories which are also searchable. ```  I think it's implied that it's from the same UI. "
"2022-11-09 20:37:59.192487+00","@lcolston08  You can search across public and private repositories in Sourcegraph (you can index any public repository).   The difference is that with GitHub you can search across 7M open source repos + your code without needing to index anything.  Maybe it's: - Number of open source repositories indexed - Search across your repositories and indexed open source repositories at the same time: Yes for GitHub / Mention .com for SG @iskyOS - what do you think?"
"2022-11-09 20:37:59.356692+00","Are we calling it beta preview? "
"2022-11-09 20:37:59.850605+00","```suggestion    <td><strong>Search across files larger than 350 KiB</strong> ```"
"2022-11-09 20:37:59.893192+00","```suggestion If you're brand new to code search and you want to try it, visit [Sourcegraph.com](https://sourcegraph.com/search) to search across open source repositories.   As your codebase grows in complexity, the value of code search quickly increases. Sourcegraph may be a good fit for your team if: ```"
"2022-11-09 20:38:00.000375+00","```suggestion GitHub code search is currently available through a beta preview (you can sign up for their [waitlist](https://github.com/features/code-search-code-view/signup) to request access. This beta preview is not yet available for GitHub Enterprise.  ```"
"2022-11-09 20:38:02.103637+00","Can you please check this language with eng? "
"2022-11-09 20:38:02.820129+00","@lcolston08 - we have an experimental fuzzy finder: https://sourcegraph.slack.com/archives/C89KCDK5J/p1665601547150969"
"2022-11-09 20:38:03.17475+00","Do you think the ""If you're brand new"" sentence should go at the end of this paragraph? I worry that leading with it may suggest we are only for searching open source repos. "
"2022-11-09 20:42:58.296296+00","For visibility, we've changed this check to verify whether there exists a preference object where the current session id is equal to its staff member id. This will in effect check if the logged in user has already migrated and only allow phone numbers/emails that have not been migrated."
"2022-11-09 20:43:43.366609+00","So if i'm following this correctly. It will persist the error to the repo_iterator_errors, but then delete it from the in memory map.  And because it's removed from the in memory map at the end of the handler it will `HasErrors() = false`   Does this continue to work on an interrupted restart? I think it will be a problem because it will load the previous errors?  I'm not sure it will the `NextRetryWithFinish` will skip it and advance the cursor but not clear the errors so at the end of the handler it will requeue it again?"
"2022-11-09 20:48:37.772513+00","this is worker code, so it shouldn't cross-import from frontend :) "
"2022-11-09 20:49:11.617555+00","Does it make more sense to sanitize based on the chunk content rather than the matched content? I'm picturing a situation where the sanitization matches a token, but you can search for some other thing on the same line like `GITHUB_TOKEN=`"
"2022-11-09 20:49:37.594787+00","I am a bit hesitant mentioning this anywhere, because I really don't want anyone to use this before we learn more if it works well. I don't expect this to stay when we make it available to customers, and if we do, it's super simple to rename them, too. WDYT?"
"2022-11-09 20:49:49.442134+00","I'm not sure it's implied since GH offers a unified search experience and we don't."
"2022-11-09 20:52:02.772565+00","Well, you can search across both but not in a unified way, correct? I thought you had to use sourcegraph.com to search open source repos and Business/Enterprise is only for your private repos. Maybe I'm wrong there? "
"2022-11-09 20:54:26.515826+00","Previously we called out that it wasn't in the primary UI, so that is the only reason why I called out that it is now. I'll remove that part. "
"2022-11-09 21:06:49.165965+00","Indentation seems to be off here."
"2022-11-09 21:06:49.304639+00","Looks like this and line 84 could be update to use `this.elem` instead?"
"2022-11-09 21:06:49.421662+00","Indentation seems to be off here."
"2022-11-09 21:06:49.435492+00","This is the first time I'm looking at this code so might admittedly be missing something; but shouldn't we clear the `tooltipCache` on `unload`?"
"2022-11-09 21:06:49.973617+00","It looks like we previously weren't using the `#` but it's needed now due to the new logic that lives within this property's setter?"
"2022-11-09 21:10:44.529647+00","gah sorry, so I thought about it again, and I think it should actually be `practiceEmployees.find(e => e.contact_email === email && !!e.staff_member_id)`, because there could be multiple existing users for a practice, so only checking on the session would only work for if there is only 1 user for the practice, let me know if that makes sense"
"2022-11-09 21:06:49.9827+00","Why does this need to be an arrow function? Also, it seems its only usage is within this class' load method - can it be private instead?"
"2022-11-09 21:31:55.222753+00","Gotcha, thanks, I was unsure how to properly use `conf` here"
"2022-11-09 21:31:58.267141+00","If we change the of `onSuccess`, then this could become  ``` vaultData ? send({ type: ""CREATE"", vaultData })} : send({ type: ""ABORT"" }) ```"
"2022-11-09 21:37:30.260056+00","Same comment"
"2022-11-09 21:40:52.412487+00","see above"
"2022-11-09 21:54:35.396614+00","might it be better to put these in reverse order, so that their numeric value could be used for comparisons?"
"2022-11-09 21:31:58.376692+00","I don't think we need the changes in this file any more since if it was created by a multisig, this modal wouldn't be shown."
"2022-11-09 21:31:58.733612+00","Let's delete all the previous pending vaults for the project, regardless of the `deployerAddress` and `chainId`/"
"2022-11-09 21:31:59.204916+00","I'm not a fan of casting like this. It could be dangerous. I rather us change the type of `onSuccess` so it becomes `onSuccess: (maybeVault?: Vault) => void`. Then inside `onSuccess` we check if `maybeVault` is undefined or not, and act accordingly."
"2022-11-09 21:33:20.502472+00","```suggestion   const checkTodayMeetings = () => {     const pages = query.status === ""success"" ? query.data.pages : [];     const todayBookings = pages.map((page: { bookings: BookingOutput[] }) => ```  This way we can remove the first if block and `todayBookings` will always be an array. There is also a console.log() just below"
"2022-11-09 21:33:15.652486+00","Good call, added a case for `result.RepoMatch` and the default case now just omits the current result from the event if it's not one of `result.FileMatch`, `result.CommitMatch`, or `result.RepoMatch`."
"2022-11-09 21:38:42.198384+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion FROM targets ``` "
"2022-11-09 21:37:29.282494+00","Maybe put these consts in the components they're used in?"
"2022-11-09 21:38:42.09714+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     SELECT * FROM {{ source('google_sheets', 'am_training_targets') }} ``` "
"2022-11-09 21:38:42.214147+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion  SELECT * FROM source ``` "
"2022-11-09 21:38:42.267086+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion  SELECT * FROM source ``` "
"2022-11-09 21:38:43.040541+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     SELECT * FROM {{ ref('stg_gsheets_am_training_targets') }} ``` "
"2022-11-09 21:38:43.122706+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     SELECT * FROM {{ source('google_sheets', 'am_arpp_targets') }} ``` "
"2022-11-09 21:38:43.142749+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     SELECT * FROM {{ ref('stg_gsheets_am_arpp_targets') }} ``` "
"2022-11-09 21:38:43.268133+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion SELECT  ``` "
"2022-11-09 22:33:38.072497+00","I can fix it in a separate PR. But the solution here would be to send Marshalled IDs from the executor because we can't send unmarshalled IDs from the client.  WDYT?"
"2022-11-09 21:38:44.077834+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion SELECT  ``` "
"2022-11-09 21:38:45.150535+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion FROM targets ``` "
"2022-11-09 21:37:05.456648+00","This was called out in conversations with the customer that requested this feature. In short, that particular customer is only concerned with the actual matched ranges and so they're okay with a secret value showing up adjacent, like in context lines or something. My sense was that they want to have some added friction without being overly restrictive on the search experience.  Maybe as a next step we could add the behavior you're describing and make it configurable? Like a toggle between ""strict mode"" and ""less strict mode"""
"2022-11-09 21:41:47.161214+00","Looks like the fuzzy finder is turned on for internal testing, and I'm not seeing any public-facing docs. "
"2022-11-09 21:39:38.329268+00","Checking now"
"2022-11-09 21:40:40.582498+00","i put it here to make component more legible, and i think it's a react pattern to pull them out.  also if we ever want to export it we can"
"2022-11-09 21:45:11.133419+00","Adding your suggestions of adding two lines in the table. Adding that now. "
"2022-11-09 21:51:37.025972+00","Updated this chart"
"2022-11-09 21:59:13.602478+00","Yeah sure, that's correct"
"2022-11-09 22:06:02.692492+00","Yeah, you are right, we need this enum for sorting reports by this column. All this time I thought the first item in the enum definition was the biggest."
"2022-11-09 22:06:06.462473+00","I think you're right.  I think [this](https://github.com/sourcegraph/sourcegraph/pull/44116/commits/e9b7cd31161cab56c45f7ab37082e78f7f8708f2) was the missing piece here. The idea was that we skip these on iteration (which was happening), but we also need to update the state of the error map at the same time. "
"2022-11-09 22:19:12.756688+00","If we add a new button style out of wildcard, that means that we have yet another way of rendering a button in a non-standard way. I think ideally all things that we need are in wildcard. That is not always the case ofc, but if this is purely about font-size and a border, could we just live with not having a border for the sake of consistency? Just generally, this feels like quite a lot of CSS for a standard component like a button.   cc @courier-new for thoughts."
"2022-11-09 22:19:13.145491+00","do we need any sort of access control here? "
"2022-11-09 22:19:13.563832+00","Do people prefer `1.5MB` or `1.54MB`? (aka what value should we pass to `toFixed`. I think I would slightly prefer 2 digits, but no strong preference."
"2022-11-09 22:19:16.176653+00","It'd be great if this just used one format, but no blocker if it's hard. Ideally, the file resolver just returns a working URL via the `.url` field, and then it would be agnostic of graphql IDs if we don't want to use those in here (because the executors does that too)"
"2022-11-09 22:22:46.724449+00","I have to switch the use of that class from a button to a `<a>` link. So I'll rename that to suit the use case. Made use of the `<Link>` component from the wildcard but needed to override some of the styles to suit our usecase here.  ![CleanShot 2022-11-09 at 23 22 02](https://user-images.githubusercontent.com/25608335/200954790-e50929f6-5ce1-4576-906f-006e59b54fa8.png) "
"2022-11-09 22:23:51.859459+00","```suggestion    <td>Private instance + [Sourcegraph.com](https://sourcegraph.com/search)  ```"
"2022-11-09 22:23:51.917799+00","@lcolston08 - is this the latest number? Adam posted this update: https://sourcegraph.slack.com/archives/C02Q2VCFRJ8/p1668028994433409?thread_ts=1668027424.914759&cid=C02Q2VCFRJ8  Unclear if that is total repos or just open source repos"
"2022-11-09 22:23:52.049384+00","@lcolston08 - sorry for going back and forth on this. I still don't think this quite gets at what is/isn't supported. Technically, your repositories may be open source.  - Search results include your organization's code and all indexed public repositories  GitHub: Yes Sourcegraph: No - you must use [Sourcegraph.com](https://sourcegraph.com/search) to search across all indexed open source repositories.  @iskyOS @lcolston08  "
"2022-11-09 22:23:52.363566+00","```suggestion GitHub code search is currently available through a beta preview (you can sign up for their [waitlist](https://github.com/features/code-search-code-view/signup) to request access). The beta preview is not yet available for GitHub Enterprise.  ```"
"2022-11-09 22:23:53.956553+00","```suggestion    <td><strong>Search across files larger than 350 KiB</strong> ```"
"2022-11-09 22:24:12.082479+00","I also don't have a strong preference here. I'll switch to 2 decimal places here."
"2022-11-09 22:24:16.241567+00","Can a `<Button as={Link}>` do that? Not sure tbh, but feels like a legit wildcard use-case if we don't support it "
"2022-11-09 22:27:44.170404+00","@jplahn Seeing if you don't mind reviewing this language in regards to GH. I'll send you the screenshot I'm going off of. "
"2022-11-09 22:31:41.508036+00","Other than [this](https://sourcegraph.com/github.com/sourcegraph/sourcegraph@bo/display-mounted-files-ui/-/blob/enterprise/cmd/frontend/internal/batches/resolvers/resolver.go?L1892%3A1-1895%3A3)?  What do you have in mind here?"
"2022-11-09 22:36:51.272515+00","Done!"
"2022-11-09 22:28:15.644605+00","@jplahn Is this accurate about our inability to complete a fuzzy find using filters? "
"2022-11-09 22:31:41.389395+00","+1 that this could be clarified, it's about searching the vendor's index of OSS repos (not about a company searching their own open source repos, which they can do anywhere if they sync them)"
"2022-11-09 22:36:08.93933+00","we can if the backend populates the URL field on the fileResolver correctly - which it should anyways I think :) "
"2022-11-09 22:37:28.309209+00","removed!"
"2022-11-09 22:38:21.185655+00","I meant rather check if the file should be viewable by the user ... but realize it uses a randID so that's probably good enough until we get to private batch changes?"
"2022-11-09 22:42:42.808877+00","Yes. "
"2022-11-09 22:47:06.791007+00","I think we can remove this and just use isiIos since we don't care whether the user is in-app or not."
"2022-11-09 22:48:13.962479+00","The URL field is still unimplemented at this point. A probable fix would be to get the URL field populated, but I think we held off on that pending moving to a blob store (cc @Piszmog incase I'm misunderstanding past events)."
"2022-11-09 22:48:28.642484+00","pushed a hotfix to unblock QA here https://github.com/orthly/orthlyweb/commit/efec341e9ce142bb536293a2168e35626f08e173"
"2022-11-09 22:51:08.859953+00","The blob store should be an opaque replacement, I don’t think that means we cannot return a working URL today imo "
"2022-11-09 22:52:57.40801+00","Yeah, I'm not saying we cannot return a working URL. I just remember a conversation around it in the past, I'm gonna create a ticket for this."
"2022-11-09 22:56:57.632322+00","Can we add explicit types for this, then default to just dropping the event? In the case that we add new events in the future, it's better to not expose things than to expose things."
"2022-11-09 22:56:58.526565+00","We don't want `conf.Watch` here. That will register a watcher that will be called each time conf is updated. That will also mutate `sanitizePatterns` from a background goroutine. Just a `conf.Get()` should be fine here. "
"2022-11-09 22:59:05.831908+00","I didn't write it"
"2022-11-09 23:24:00.813681+00","This looks like the right way to get the measurement ID.   After doing this, try creating a brand new measurement and bulk-measuring on 30 photos.  ```suggestion                         ...completedMeasurements.map((points) => points[0].measId), ```"
"2022-11-09 23:24:01.421024+00","Yeah, the `_id` from hits does not look like a valid measurement ID.  We probably need to update the query with another aggregation to get the measurement ID (any ideas on how to do this @jonathan-yee)"
"2022-11-09 23:43:51.589398+00","```suggestion         const axisPagingEnabled = typeof maxCount !== 'undefined'  && maxCount > boxPlotAxisMaxCategories; ```"
"2022-11-09 23:24:02.072484+00","(style) Most of this block has inconsistent indentation"
"2022-11-09 23:25:46.489125+00","I'd sub ""fuzzy finder"" with ""autocomplete"" or something similar. Fuzzy finder as a term strikes me as overloaded and autocomplete seems more precise in this context "
"2022-11-09 23:31:02.994914+00","I am seeing nav for these languages just by poking around:  - C++ - Swift - Dart - Clojure - R - Haskell - Thrift - PowerShell  But I am probably missing some, and would prefer a definitive list (like from docs or a blog) to reference. Should I add this list into the docs? Or leave this until their docs are updated?"
"2022-11-09 23:31:49.103368+00","I think I would leave the ""full"" list out for now since it's just from my own testing, as long as we have the note that we believe more languages are supported and we're awaiting confirmation."
"2022-11-09 23:32:34.876022+00","Totally fair! I actually meant like an internal document for SG folks/our team to reference, but if you don't think its life expectancy is very high then I'm not as concerned. 🙂"
"2022-11-09 23:43:41.496338+00","Codebase styling: Extra space in front of `override`. Also we should make it `protected` as is the case with all component deps.  ```suggestion     protected override deps: Component.Deps & { ```"
"2022-11-09 23:43:43.222769+00","Codebase styling: Only one empty line space is required between params/methods."
"2022-11-10 00:03:13.422478+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     SELECT * FROM {{ ref('stg_salesforce_user') }} ``` "
"2022-11-09 23:43:43.466843+00","Codebase styling: This line fits on a single line. If we are keeping it like this, we will need to balance the opening/closing brackets."
"2022-11-09 23:43:44.285588+00","Add `disableBeforeButton` here  ```suggestion             const disableNextButton = xAxisIsCategory                 ? currentPage === 1                 :  axisPagingFetchedPages === currentPage && maxCount === actualCount;                          g ```"
"2022-11-09 23:43:45.30884+00","Let's make this padding `5` so that we don't have the label floating at an odd height compared to the info icon as seen on the left (compared with the right). <img width=""756"" alt=""Screenshot 2022-11-09 at 2 09 26 PM"" src=""https://user-images.githubusercontent.com/54614861/200952724-9062779d-aae9-4298-b47e-966b22785ef2.png"">   "
"2022-11-09 23:43:45.694836+00","Nitpick: Instead of passing this parameter to the box plot chart element, we should just use it directly in the box plot chart element. I.e. just use `RelationshipsDataPane.BOX_PLOT_AXIS_MAX_CATEGORIES` in `NumberVsCategoryBoxPlotChart`"
"2022-11-09 23:43:45.766465+00","Either one of two things needs to happen here. IMO #1 is what we should do.  1. Update this such that we don't spread the `slice`d array. Consider that `[...].slice` already returns a new array and such we do not need to spread it across another array. ```suggestion             boxes: data.boxes                 .sort(({ numberData: { count: aCount } }, { numberData: { count: bCount } }) => bCount - aCount)                 .slice((page - 1) * boxPlotAxisMaxCategories, page * boxPlotAxisMaxCategories), ``` 2. Fix the indentation of lines 2019-2020 such that they are indented from `...data.boxes`"
"2022-11-09 23:43:46.340536+00","This can fit on a single line. Either keep it on a single line or the opening/closing brackets will need to be balanced."
"2022-11-09 23:43:46.641932+00","Codebase styling: ```suggestion                 }, ${innerHeight / 2}) rotate(-90)`             ) ```"
"2022-11-09 23:43:46.66835+00","The naming convention here lead to a bit of confusion here. Let's call these params `disableBeforeButton` and `disableNextButton` (still not super ideal but at least it is referencing the button itself). The use of `Navigation` implied to me that we were disabling the navigation ability based on the above ternary, where as in fact we are disabling the button that can be used to either navigate to next or back depending on which axis is the category. That being said, it probably would help to compute/establish these params in the blocks where we will actually use them so that unnecessary computations are not required."
"2022-11-09 23:43:48.339741+00","Not sure where to leave this comment as it is UI related, so leaving it here:  1. When the chart card is the first one in a row, the tooltip is not being centered and being shown behind the scrollbar. I would suggest styling it in the same way that the category vs category heatmap does it where the tooltip points to the right no matter what.  <img width=""462"" alt=""Screenshot 2022-11-09 at 1 19 52 PM"" src=""https://user-images.githubusercontent.com/54614861/200944946-a68d9f00-1d83-46ff-88a7-500023dbbe02.png"">"
"2022-11-09 23:43:48.462371+00","This was very confusing to figure out that what we are going for is consistently setting the offset to `45`. Instead of confusing readers that sometimes we want to use the label offset associated with numbers, we should instead establish ```ts const categoryOffset = axis.categories.labelOffset + !xAxisIsCategory ? -5 : 0; ```  Then every place we need the `categoryOffset` value of `45` (I counted 5 places throughout) ```suggestion                         categoryOffset,                         xAxisIsCategory ? 'x' : 'y' ```"
"2022-11-09 23:43:48.356279+00","Should remove xAxisIsCategory check. Will always be looking at `categories` for the next/back button."
"2022-11-09 23:43:49.022491+00","Codebase styling: ```suggestion                     const content = <span>Showing categories {lastPageEndIndex + 1} - {                         lastPageEndIndex + categories.length                     } of {maxCount}.</span>; ```"
"2022-11-09 23:43:52.606133+00","Add `disableNextButton` here  ```suggestion             const disableNextButton = xAxisIsCategory                 ? axisPagingFetchedPages === currentPage && maxCount === actualCount                 : currentPage === 1;                          g ```"
"2022-11-09 23:43:56.595759+00","Nitpick: Please remove unnecessary extra line space here."
"2022-11-09 23:43:57.37683+00","We will always be looking for the `categories` name. As such, there is no need for a ternary with `xAxisIsCategory` here."
"2022-11-09 23:44:30.689362+00","Sweet, sounds good. Probably no need to add config until it's requested though. "
"2022-11-09 23:51:21.894938+00","```suggestion In addition to searching your organization’s private code, you can use Sourcegraph.com to search across 25 million public repositories from multiple code hosts.  ```"
"2022-11-09 23:52:03.152388+00","```suggestion    <td>25 million  ```"
"2022-11-09 23:55:48.215978+00","```suggestion Sourcegraph filters reduce the scope of search query results by language, repository, path, author, message, content, timeframe, visibility, and more. Sourcegraph offers auto-completion on filters in the search query.  ```"
"2022-11-10 00:17:09.622477+00","```suggestion     if (taskType !== LabsGqlWorkflowTaskType.InternalDesign && taskType !== LabsGqlWorkflowTaskType.DesignReview) { ```"
"2022-11-10 14:22:32.49746+00","Not quite yet but soon... I'll revert this part for the time being again."
"2022-11-09 23:56:40.43218+00","LGTM"
"2022-11-09 23:57:12.395027+00","```suggestion GitHub code search includes filters such as language, repository, path, and file size. GitHub automatically suggests filters to apply to your search based on your search history and information about you, such as your organization. GitHub also offers auto-complete using filters to complete a code search query.  ```"
"2022-11-10 00:01:08.077991+00","I think we want to keep the `Feedback` action available for unauth'd users here. In standup today we were chatting about this & Quinn added some optimizations to Feedback since your work has been in flight."
"2022-11-10 00:01:31.312522+00","tyty! 🙏 "
"2022-11-10 00:00:48.811887+00","I think this button should match the styles of our ""Download generated diff"" [button](https://sourcegraph.com/github.com/sourcegraph/sourcegraph/-/blob/client/web/src/enterprise/batches/detail/changesets/DownloadDiffButton.tsx?L21):  <img width=""254"" alt=""image"" src=""https://user-images.githubusercontent.com/8942601/200967025-0364e415-939b-4b71-b26b-cb4a343580d7.png"">  I believe this style is accomplished with:  ```tsx <Button outline={true} variant=""secondary"" size=""sm"" /> ```  If that's different from what was in our designs, I think it's an accidental design discrepancy, not an intentional divergence.  There, we were able to use a `Button`, but if you need an anchor for the download URL, you should be able to do `<Button as={AnchorLink} />` like we do for the [BatchSpecDownloadLink](https://sourcegraph.com/github.com/sourcegraph/sourcegraph/-/blob/client/web/src/enterprise/batches/BatchSpec.tsx?L68%3A9-77%3A10)."
"2022-11-10 00:40:10.332472+00","```suggestion             defaultSelectedValues: () => Array<string>, // Returns the default selected measurement values ```"
"2022-11-10 01:11:26.700702+00","Thanks James! I wanted to make some changes to the current script but got sidetracked by other tasks, I can walkthrough the new script with y'all during pairing tomorrow before merging 😀 "
"2022-11-10 01:50:15.970655+00","Oh sweet. I didn't know about this. Thanks."
"2022-11-10 02:24:57.849016+00","```suggestion   @spec query(Dataloader.t(), map()) :: Ecto.Query.t() ```"
"2022-11-10 02:34:55.032379+00","@lcolston08 - I don't think we need this line. I imagine it's assumed you can search across public and private repositories at the same time. "
"2022-11-10 02:34:55.335167+00","@lcolston08 Have you confirmed that it's 7?"
"2022-11-10 02:34:55.360441+00","```suggestion    <td><strong>Search across files larger than 350 KiB</strong> ```  @lcolston08 - I am correcting the typo. It still said Sarch. "
"2022-11-10 02:39:19.062644+00","per Tyler's TS upgrade: ```suggestion         } catch (err: any) { ```"
"2022-11-10 04:56:39.395649+00","`isBoolean()` is already checking it for you. you can just isBoolean to do this"
"2022-11-10 04:56:39.50593+00","is `toBoolean` to handle this in router level"
"2022-11-10 03:04:10.326742+00","I heavily inspired this component from the recommended one[ in the docs ](https://www.npmjs.com/package/react-calendly)of `react-calendly`. The main difference is that I used a `CalendlyModal` element we can reuse elsewhere, so we could also calendly from other places than just a button (which we do in Product hub when user have to select a PL before launching a calendly for this specific PL)  ``` import { PopupModal } from ""react-calendly"";  class CustomButtonExample extends React.Component {   constructor(props) {     super(props);      this.state = {       isOpen: false,     };   }    render() {     return (       <div>         <button           style={{ display: ""block"", margin: ""0 auto"" }}           onClick={() => this.setState({ isOpen: true })}         >           Custom Button         </button>         <PopupModal           url=""https://calendly.com/acmesales""           pageSettings={this.props.pageSettings}           utm={this.props.utm}           prefill={this.props.prefill}           onModalClose={() => this.setState({ isOpen: false })}           open={this.state.isOpen}           /*            * react-calendly uses React's Portal feature (https://reactjs.org/docs/portals.html) to render the popup modal. As a result, you'll need to            * specify the rootElement property to ensure that the modal is inserted into the correct domNode.            */           rootElement={document.getElementById(""root"")}         />       </div>     );   } }"
"2022-11-10 03:07:16.525665+00","I doubt the 25 million is repos that have been indexed for searching. The blog post from last December says over 5 million, and the docs on cs.github.com still say 7 million. I can't imagine they jumped to 25 million in less than a year.  Blog - https://github.blog/2021-12-08-improving-github-code-search/#:~:text=At%20the%20moment%2C%20the%20search,repositories%20you%20have%20access%20to.  Docs - https://cs.github.com/about/faq  I'm not seeing 25 million anywhere related to repos indexed for searching. "
"2022-11-10 03:42:01.892506+00","```suggestion ``` Let's delete this. There's no need to keep previous code. We can also easily get them back through git reverts"
"2022-11-10 03:42:02.332503+00","```suggestion ``` This is unused and I think was accidentally inserted when we were practicing with autocomplete"
"2022-11-10 03:59:24.020815+00","This may be inaccurate as we can specify a different key when we create a ticket from `ticket_sources`   meaning -- we can overrule the initial issue keys if we specify a `prefix` that is different from the issue's existing prefix. "
"2022-11-10 04:07:28.750308+00","To ensure users fill in the accurate ticket code, you can do the following:  - Require users to fill in the ticket link (jira issue / github link) - With the link we can parse out and understand which jira_project / github_repo it is part of - By knowing the jira_project we will be able to know the prefix to use, and also the exact ticket code.  Please take this into consideration so we can ensure tickets are not being duplicated (and developers don't need to think about ""ticket code""  Please see the `left join tickets tickets_by_code` in `jira_issues_parsed` table (and `github_issues_parsed` table) cc @richardguerre @tristantreb  "
"2022-11-10 04:07:29.646418+00","this is not required from the DB level but definitely very very required from the product perspective. "
"2022-11-10 04:09:56.392971+00","This seems to me to be the most critical failure of our process.  Can we analyse this in more detail? Essentially - how did the fix get written, reviewed and subsequently not released, so we know exactly at what point the failure occurred, and if we can put something in place to ensure this doesn't repeat."
"2022-11-10 04:15:30.896911+00","imo 11-02 was the most problematic where we didn't test the non-happy path users. but agreeing 11-04 is equally as problematic so will dig deeper "
"2022-11-10 04:52:29.48115+00","I'll add a note, something like: ""unless priorly specified, the prefix before the number is the project key (e.g., ENG) in the client's issue tracking tool"" (can be a different sentence for each tool).  We've already set and approved the scope in the [product spec](https://www.notion.so/gitstart/Leads-manually-creating-tickets-330bbf7957c3437f922c7906b9a86c8c), so I would try not to change too much at this point. This feature is considered a temporary fix for leads to manually create tickets, so releasing something fast that covers the happy-path is better than delaying the release to have something that covers all edge cases."
"2022-11-10 04:54:09.343326+00","prefer one line"
"2022-11-10 04:54:09.292106+00","I'm curios about this implementation. You are just checking true or false here. `express-validator` is already handling such logic with `isBoolean()`"
"2022-11-10 04:54:10.190494+00","you can do this in router layer. `isBoolean().toBoolean()`  1st one is validation, 2nd one is parsing the value"
"2022-11-10 04:54:10.310024+00","prefer one line for each pipeline"
"2022-11-10 04:56:14.95249+00","I added an easy fix in the backend spec #156 , so users don't need to think about the issue code at all "
"2022-11-10 05:18:18.942481+00","Why add Step 1 after Step 2?"
"2022-11-10 05:26:03.207038+00","To clarify, do you mean the `CreateTicketInput` should be: ```graphql input CreateTicketInput {   link: String! # this was `code` before   title: String!   description: String!   instanceInternalId: Int! } ``` And we parse the link in the backend?"
"2022-11-10 06:12:24.196912+00","```suggestion     it('should get envelope activities with the total and pageNumber', async () => { ``` Avoid using word ""successfully"" as it was suggested on my PR to remove it."
"2022-11-10 06:12:24.303711+00","```suggestion     it('should get envelope activities related to the envelopeId (params.id)', async () => { ``` remove word ""successfylly"""
"2022-11-10 17:03:29.936825+00","All Logger instances in root-canal are created like this, so I'd prefer to stick with the existing patter for this PR."
"2022-11-10 06:12:25.082993+00","```suggestion     it('should add profile object to each activities when withProfile is true', async () => { ```"
"2022-11-10 06:12:24.452686+00","```suggestion       // expect(result.body).toEqual(1); ``` ```suggestion ``` remove comment"
"2022-11-10 06:12:25.243836+00","```suggestion     it('should return envelopeActivities', async () => { ``` ```suggestion     it('should return envelope activities', async () => { ```"
"2022-11-10 06:12:25.403279+00","```suggestion     it('should get envelope activities created by the userId (params.userId))', async () => { ```"
"2022-11-10 06:12:28.854695+00","```suggestion     it('should get envelope activities related to the envelopeId (params.id)', async () => { ```"
"2022-11-10 06:12:26.033377+00","```suggestion     it('should add profile object to each activities when withProfile is true', async () => { ```"
"2022-11-10 06:18:04.329124+00","I've seen this used a lot and it will work but ideally it is not good practice(locale is of type `string | undefined`). I'd rather do this.  ```suggestion       ...(locale ? await serverSideTranslations(locale, [""common""] : {} )), ```  Please refer to [this article](https://bobbyhadz.com/blog/typescript-spread-types-may-only-be-created-from-object-types) for more context"
"2022-11-10 06:19:56.942483+00","### Before ![Screenshot 2022-11-10 at 9 18 45 AM](https://user-images.githubusercontent.com/39791369/201015293-0c41ffbe-7f5b-4ac6-8675-0317f6ce2e2c.png)  ### After ![Screenshot 2022-11-10 at 9 19 10 AM](https://user-images.githubusercontent.com/39791369/201015274-fb1951b9-521d-4fdb-bae7-e49dbf50f73b.png) "
"2022-11-10 06:24:12.932473+00","@elikeyz, due to `Once you're assigned to a task, it's your responsibility to split it the way you can submit reasonably sized PRs. It’s ok to have multiple PRs for a single issue` comment, we'll be dividing the PR; I'm not sure if we need to open a new ticket for it, but as it's gitstart policy, we probably should. will next carry out the required cleanup. "
"2022-11-10 06:25:31.030215+00","I'd just add a refactor for that, and it could be a good task for our interns to clean up on. Unless you want to do it yourself"
"2022-11-10 08:51:00.992744+00","Alright"
"2022-11-10 06:25:31.212475+00","This is a good case for using Repo.exists? instead and move this check to happen in the database rather than having to do it ourselves. It's also more efficient as the sql rows payload do not need to be streamed and converted to Elixir structs which is what's happening now"
"2022-11-10 06:25:33.854405+00","Why was this done? Our convention is to always use singular named bindings, not plural ones"
"2022-11-10 06:50:48.894671+00","![Screenshot 2022-11-10 at 7 49 50 AM](https://user-images.githubusercontent.com/45232708/201020340-8318b875-97e7-419c-825f-f90b2b703be2.png) "
"2022-11-10 07:21:33.340519+00","Indeed, changed back"
"2022-11-10 07:22:11.17837+00","I did split fetching the query from defining the query"
"2022-11-10 07:22:28.395254+00","Did this before reading the comment..!"
"2022-11-10 07:26:45.451446+00","Sounds like a quick hackathon project 😁! "
"2022-11-10 07:55:19.360477+00","Nuke comments"
"2022-11-10 07:55:19.38935+00","Nuke comments"
"2022-11-10 07:55:19.548249+00","Lets order imports alphabetically A-Z"
"2022-11-10 07:55:20.166797+00","Nuke comment"
"2022-11-10 07:58:10.770621+00","https://hexdocs.pm/ecto/Ecto.Multi.html#run/3"
"2022-11-10 07:58:11.717226+00","I'd do this instead from line 117 onwards: ``` get_pull_request_ticket(pull_request) # This is no longer wrapped around an ok tuple end ) |> Multi.run(:ticket, fn _repo, %{get_ticket: %Ticket{} = ticket} -> ``` Multi.run has a requirement on an ok tuple being returned from the anonymous function you pass. This is why we had the ok tuple wrapping in line 117 before. However, since `get_pull_request_ticket/1` now returns an ok tuple, the extra layer of wrapping is no longer necessary."
"2022-11-10 08:02:33.230676+00","```suggestion Solving this problem will help us detect where our system is slow and inefficient, and then we can start working on optimizing them. For example, we could set up monitoring request-response times and set up alerts on requests that take longer than a certain threshold to serve. We can then prioritize optimizing the request handlers to reduce the time below that threshold and improve our user experience. ```"
"2022-11-10 08:19:17.13395+00","```suggestion   const selectedViewValue = localStorage.getItem('ION_PlanItemSelectedView') === 'hierarchal' ? 'hierarchal' : 'flat' ```"
"2022-11-10 08:32:39.752471+00","@WajihaNiazi  nuke this ```suggestion ```"
"2022-11-10 08:32:40.093881+00","is that mean the previous `moment()` without `new Date()` didn't work? if it worked for client why doesn't it work check again and then confirm ```suggestion         conditions.expiryDate = { $gte: moment().utc().format(), $lt: moment().utc().add(6, 'month').format() }; ```"
"2022-11-10 08:34:06.74719+00","```suggestion We planned to migrate instances one by one and made an effort to ensure we only migrated developers who belonged to specific instances. ```"
"2022-11-10 08:34:51.682492+00","Should this be a debug log instead? Or do you see a value of having this as info? AFAIK the majority of customers have `INFO` as their default level, so this would show up in logs by default."
"2022-11-10 08:35:17.159409+00","Small request: can we also include the name of the slack channel here, not just the link?"
"2022-11-10 08:36:53.322489+00","To what extent would you say the time off and handover played a part in the incident?"
"2022-11-10 08:37:33.517206+00","```suggestion - Potential errors of failure (like discovering that we should have considered the client role) were discovered much later on (almost a week into writing the first line of code for redirect) ```"
"2022-11-10 08:37:51.83861+00","```suggestion - Choosing an approach like redirecting the entire app at the root level instead of at a page level should be done with more care especially as we haven't completely deprecated the app yet. ```"
"2022-11-10 08:40:17.682465+00","How about adding the condition here instead of passing a prop to `InstalledCell`. Can rendering `InstalledCell` conditionally work?"
"2022-11-10 08:45:27.003168+00","```suggestion You can manually create tickets as a [lead](./2-roles-teams.md#roles) in the community. Please use this feature as a last resort when the ticket syncers don't work and don't import client tickets as they should. ```"
"2022-11-10 08:47:00.801064+00","```suggestion Fill in the form so that the `code` matches the client's ticket. That way, once the syncer works, we don't create a duplicate ticket. So if they use: ```"
"2022-11-10 08:47:29.730682+00","Added in the Bonus section at the end"
"2022-11-10 08:54:43.418534+00","@rwagatenga  it doesn`t work "
"2022-11-10 08:48:59.076585+00","@WajihaNiazi in that case use `new Date().toISOString();`"
"2022-11-10 08:49:02.783016+00","```suggestion As already mentioned, this is a fallback feature for when the syncers don't work, so we can continue work uninterrupted. It does **not** support uploading multimedia, such as images, videos, or other files and automatically adding a link to that multimedia in the description. So if you need to copy an image from the client's ticket, we recommend copying the multimedia's URL and either pasting the URL directly into the description or using the following syntax to insert images in Markdown: ```"
"2022-11-10 08:43:55.301677+00","@rwagatenga  it does not work without the `new Date()` function if we add without this function in `find()`  in find query in works but in aggregation we need like the coz we can not assign any value we should warp it in` new Data()` you can check in unit test."
"2022-11-10 08:50:10.941688+00","yes, will make it required in the create_changeset"
"2022-11-10 08:52:43.832427+00","I guess so. That's a good way to enforce that they use the right ticket code. However, this creates a dependency on how github/jira write their urls.  - Are we sure that the ticket code is gonna stay inside the url for a reasonably long time?"
"2022-11-10 08:52:50.431608+00","@wutania "
"2022-11-10 08:53:57.483169+00","Let us add type spec as we write out the function. Also, can we add a test for this function?"
"2022-11-10 08:56:14.987519+00","okay @WajihaNiazi  use your approach but if client see that will complain coz it's like duplicates."
"2022-11-10 08:56:26.126255+00","![Uploading image.png…]() see the image"
"2022-11-10 08:56:57.612521+00","```suggestion       iex> get_refund(456)       {:error, :refund_not_found} ```"
"2022-11-10 08:58:41.378893+00","> okay @WajihaNiazi use your approach but if client see that will complain coz it's like duplicates.  @rwagatenga  Actually @sheldon-welinga  suggested this way."
"2022-11-10 09:04:26.59977+00","If the list of returned instances is empty do we want to return `{:ok, []}`?"
"2022-11-10 09:11:05.412479+00","After discussing with @wutania and @ishmam-mahmud we keep the code and will implement 1. either show the suface the code prefix based on other tickets forn the same instance 2. or substitute the code field by ticket link and in the backend extract the code from that link (through linear, github, jira url match)  This will be done as a follow up or if I have time to do it this week, first we ship this project."
"2022-11-10 09:12:02.058516+00","```suggestion   @spec get_refund(pos_integer()) :: {:ok, Refund.t()} | {:error, :refund_not_found} ```"
"2022-11-10 09:18:12.201901+00","done. "
"2022-11-10 09:12:34.647343+00","So ticket code doesn't stay in the URL, you can get the issueKey in the jira api call.  Providing link instead of code in my opinion can prevent a lot more human error. If a link is invalid, an error throws and a ticket cannot be created.   Code is easily inputted wrongly. I've attempted to fixed tickets with the wrong code many times in bug duty before. And with a wrong code, a duplicate in ticket happens + the confusion from client (why is my ticket with this weird code?)  What we discussed earlier offline is that @tristantreb will do it as a follow-up if he has time after implementing the existing spec, but I just wanted to point it out this is an easy win if we can do it to prevent human errors from inputting the wrong ticket code, which happens frequently; as I don't think this page would be deprecated anytime soon (at least for another half a year) because the road map doesn't talk about syncer improvements or ""Managed Tickets"" project which is aimed for Q2 next year.  cc @tristantreb @richardguerre "
"2022-11-10 09:18:21.153144+00","Done."
"2022-11-10 09:21:20.817781+00","Sounds good! Nice to see everyone collaborating on it, and thanks @wutania for fighting the good fight 😄   Please document this in the tech/product spec or the main thread of the PR, and ensure it's reflected in docs for leads as well. This thread will be resolved, and I wouldn't want us to lose this helpful context and discussion."
"2022-11-10 09:23:41.966188+00","Yeah. It's a non-null list"
"2022-11-10 09:25:01.405683+00","Did you forget to push?"
"2022-11-10 09:25:02.399225+00","It's still saying `** (Ecto.NoResultsError)` tho in line 42?"
"2022-11-10 09:25:22.402534+00","Please do not resolve conversations until you push the commits as well"
"2022-11-10 09:25:40.091103+00","Temporary resolution to this thread: https://github.com/Murcul/docs/pull/156#discussion_r1018828385"
"2022-11-10 09:26:22.925299+00","I've seen this in @davejrt's PR too, why not using `str == """"`? I'm just curious. "
"2022-11-10 10:18:45.389556+00","Looks more cleaner :smile: "
"2022-11-10 09:30:32.980418+00","Having read this doc, it feels like this section is missing some context buried in the later time stamps.   As a reader, at this stage, I would like to know the full context: what was the plan to migrate? How were we planning to redirect? It's helpful to know the knowledge we had, or assumed to be accurate, as we went into this effort, so we can compare it with what went wrong later on. "
"2022-11-10 09:31:02.222217+00","```suggestion func gitPushWithRetry(ctx context.Context, dir string, retry int, destOpts ...GitOpt) error { ```"
"2022-11-10 09:31:02.270845+00","ultra nit: if we have a comment explaining the two blocks, we should remove that blank line, so they're a single ""unit"". "
"2022-11-10 09:33:12.66746+00","`connectedCalendars` can be `undefined` if there's no calendar installed <img width=""941"" alt=""Screenshot 2022-11-10 at 3 16 52 PM"" src=""https://user-images.githubusercontent.com/31402501/201053860-b0eb4cea-5ca4-4252-a85d-cc3134a55ba7.png""> "
"2022-11-10 09:44:25.014971+00","```suggestion     {:ok, pull_request} = get_pull_request(pull_request_id)  ``` It's a PR, not a changeset"
"2022-11-10 09:44:25.232109+00","```elixir maybe_update_pull_request_status(pull_request, :in_progress) end) ```"
"2022-11-10 09:44:25.300901+00","```suggestion   Returns {:error, :pull_request_not_found} if the Pull request does not exist. ```"
"2022-11-10 09:44:25.459245+00","```suggestion     {:ok, %PullRequest{} = pull_request} = PullRequests.get_pull_request(pull_request.id) ```"
"2022-11-10 09:44:25.964073+00","```elixir assert {:error, :pull_request_not_found} == PullRequests.get_pull_request(pull_request.id) ```"
"2022-11-10 09:44:27.699664+00","```suggestion         pull_request ```"
"2022-11-10 09:44:27.712426+00","```suggestion     {:ok, ticket} = get_pull_request_ticket(pull_request) ```"
"2022-11-10 09:51:55.28322+00","I can tell you at the time what I was thinking, but looking at it now it doesn't make sense 😅 . At the time I was thinking ""well if SSHKey is nil, at least len will still work"" but that doesn't make any sense since a straight comparison to empty string will also just work 🤦🏼 "
"2022-11-10 09:54:11.554875+00","I agree, better to ship without (still keyboard navigable!) and figure out the shortcut pattern that we can stick with after. "
"2022-11-10 09:54:29.45032+00","I think instead of this it makes more sense to collect the metrics in `runSync` function - after we run the whole sync iteration.  Reason - the interval in which we run the syncs is configurable. Keeping the metric collection on it's own interval means it's going to be out of sync with the actual syncs running. For example you might have a sync interval set to 60 seconds, there's no need to collect metrics every 15 seconds.   AFAIK this was also the previous behavior, so we should probably return to that."
"2022-11-10 10:00:25.281805+00","nice. that's a tight query."
"2022-11-10 10:02:50.502176+00","Previously it was scheduled for every 60 seconds, but it ran separately only like in this PR and not in `runSync`.   Also, doesn't `runSync` continuously pull items from the queue? I think you rather mean `runSchedule` which is configurable and, by default, set to 15 seconds. "
"2022-11-10 10:20:51.892476+00","@Mjanuary Do we still need this since it has already been included in the controller? Unless it's functional ```suggestion ```"
"2022-11-10 10:27:58.205616+00","I agree the timeline is missing some details.   🟢: expected changes 🔴: unexpected changes  First PR (4555) redirect Team Spartan: - Dev (1 Nov 16:07) - Prd (2 Nov 17:35) - Redirect team spartan 🟢  - Do not redirect other teams 🟢  - Redirect client success 🔴  - Redirect client users 🔴   First fix PR (4570) fix redirect for clients: - Dev (3 Nov 15:01) - Prd (3 Nov 19:47) - Do not redirect client users 🟢   - Redirect client success 🔴   Second fix PR (4572) attempt to fix redirect for client users: - Dev (4 Nov 15:43) - Redirect client success 🔴  - The fix is not well tested and it still redirects client success - The PR is not released  Third fix PR (4574) fix redirect for client success: - Dev (7 Nov 09:44) - Prd (7 Nov 09:58) - Fixed redirecting client success 🟢  - Release to production  Then at 11:02, 7 Nov: - Client success report clients are wrongly redirect - Redirect code is completely reverted despite the production code is working"
"2022-11-10 10:51:27.698522+00","updated"
"2022-11-10 10:53:50.491528+00","refer here for type https://github.com/GitStartHQ/client-sass-starter-kit/blob/2abc0d05aa6b8edcd37d81b0927cfd06ddcb875f/pages/account.tsx#L103-L107"
"2022-11-10 10:53:50.766751+00","add new line at the end"
"2022-11-10 10:53:50.94966+00","just keep the comment in component and get rid of others"
"2022-11-10 11:14:40.251205+00","Can we notify the user in this condition block with a toast? `toast.error('Workspace name cannot be longer than 25 characters.')`  ```suggestion     if (newName.length <= 25) {      toast.error('Workspace name cannot be longer than 25 characters.')       setNewOrgName(newName);     } ```"
"2022-11-10 11:20:05.833812+00","Instead of duplicating this in use effects, we can set the localStorage value in one place which is dealing with the change of the view (`onChange={() => setSelectedView(<view>)}`). `setSelectedView` can be wrapped into an onChange handler and in the same handler we can set the localStorage value."
"2022-11-10 11:53:24.918021+00","Keeping this for backward compatibility until we stop using usernames as the indicator in our toolchain."
"2022-11-10 12:08:57.158717+00","```suggestion     // when next is 0, it means the Github api returned the nextPage as 0, which indicates that there are not more pages to fetch 	hasMore := next != 0 ```"
"2022-11-10 12:09:44.389116+00","```suggestion // Ensure that the next request starts at the next page ```"
"2022-11-10 16:55:14.655472+00","let's change this to `errorReportingOptions` and then allow it to take `ErrorOptions | (ctx) => ErrorOptions`.  most people aren't going to use the closure implementation, which makes the name weird"
"2022-11-10 12:13:37.323334+00","the whole app is root canal, so no need to be this specific lol.  I actually think I'm going to set up logger to accept a class and inherit its name so it makes it easier to search for logs by class.  meanwhile, I'd advocate for this:  ```suggestion         this.logger = new Logger('AlignersConversion'); ```"
"2022-11-10 12:27:40.692474+00","Another lesson I can think of:  ""this part will be deprecated soon"" / ""this is just temporary"" are not good reasons to not follow the common practice, including:  - Writing spaghetti code  - Not having a tech spec - Not having a test plan and release without testing - Merging quickly and not getting enough reviews  One reason the redirect is reverted is that the team is not confident enough that the code is working, even though the bugs are actually fixed"
"2022-11-10 12:36:49.472497+00","nit: our web app always capitalize the error message, so to make it look better, we could do ```suggestion 		err = errors.Append(err, errors.New(""the `p4.passwd` must not contain a colon. It must be the ticket generated by `p4 login -p`, not a full ticket from the `.p4tickets` file."")) ```"
"2022-11-10 12:42:01.462472+00","```suggestion     Retrieve information about an insight view and its status. Restricted to admins only. ```"
"2022-11-10 12:42:01.762508+00","do these need to be exported for a function struct?"
"2022-11-10 12:42:01.820723+00","```suggestion     A JSON dump of debug information for series on the insight view ```"
"2022-11-10 12:42:02.300738+00","```suggestion }  ```"
"2022-11-10 12:42:02.338951+00","so we only return the top 100 failures right?"
"2022-11-10 16:53:13.552294+00","please convert to John's new `withAggregate`.  it looks like he did the GQL resolvers but hasn't touched the worker."
"2022-11-10 12:42:02.590682+00","```suggestion 	// 🚨 SECURITY: This debug resolver is restricted to admins only so looking up the series does not check for the users authorization ```"
"2022-11-10 12:42:03.79101+00","I'm a bit confused at this. is the idea that upstream we'll now be able to consume status of a series through more information?"
"2022-11-10 12:49:23.174853+00","Change `hasSidbar` to `hasSidebar`"
"2022-11-10 12:49:23.189086+00","Change `hasSidbar` to `hasSidebar`"
"2022-11-10 12:49:23.276051+00","Change `hasSidbar` to `hasSidebar`"
"2022-11-10 12:49:23.91177+00","Change `hasSidbar` to `hasSidebar`"
"2022-11-10 12:49:24.148975+00","Change `hasSidbar` to `hasSidebar`"
"2022-11-10 13:10:31.201847+00","should this be a 500 level error? A not found error sounds like the remote should not retry delivering the webhook. "
"2022-11-10 13:15:08.952477+00","Yeah, I guess if the new path return 400, not found should return 404"
"2022-11-10 13:27:32.601498+00","Oooh thanks 😃, didn't catch this "
"2022-11-10 13:39:20.740985+00","This sounds like something we should decide now since it'll impact the GraphQL API. Supporting larger than 4GB makes sense. "
"2022-11-10 14:51:04.56912+00","If you connect an EOA, click ""create vault"", then reject the transaction and go back to the vault settings page, you're presented with a message targetted for multisigs.  ![image](https://user-images.githubusercontent.com/80982/201123228-8abdc5bc-d0e2-4857-a727-1c4ce7b7935b.png) "
"2022-11-10 14:55:16.343313+00","Thanks, am not sure about it too."
"2022-11-10 14:55:55.940498+00","I actually find 2 separate statements a bit more readable 😬 Ternaries are sometimes a bit hard to track in the head. No strong feelings though"
"2022-11-10 14:56:24.222188+00","We aren't returning the fill `pendingVault` object in other responses like in the `new` endpoint. We select a subset of values. See https://github.com/immunefi-team/bugs/pull/1113/files#diff-9eeeb9842afea3ae7773852f3174860ebdc0800b02ac604b2cb9849b3ad8c401R56-R64 for example.  Maybe it's a good time to create a shared select similar to https://github.com/immunefi-team/bugs/blob/protocol-multisig/lib/api/selects/paymentReceipt.ts"
"2022-11-10 14:57:42.101822+00","My thinking was that it would (if we ever get screenshot testing again) catch regressions that this doesn't render anything "
"2022-11-10 14:58:21.872474+00","weirdly no, all our modals had that problem in the past, so just copy pasted it haha. "
"2022-11-10 14:59:24.392515+00","Lodash does a better job of testing for string, with edge cases. See their [source](https://github.com/lodash/lodash/blob/4.17.15/lodash.js#L12135)."
"2022-11-10 14:59:24.434331+00","Just a curiosity question, why does this need a type? Why can't we just pass an untyped payload into the logger?"
"2022-11-10 15:06:56.406943+00","Doesn't really need it, I've just added it for structure but can remove it."
"2022-11-10 15:08:08.531219+00","It looks like `ButtonLink` to me, could you try to use it here?"
"2022-11-10 15:10:11.757496+00","Sourcegraph says no 😬 https://sourcegraph.com/search?q=context:global+repo:%5Egithub%5C.com/sourcegraph/sourcegraph%24+file:%5Ecmd/frontend/graphqlbackend/batches%5C.graphql+type%5Cs.%2BConnection&patternType=regexp"
"2022-11-10 15:11:00.172553+00","Definitely! I was unaware that we already include Lodash on this service. Will update "
"2022-11-10 15:14:42.57513+00","added the comment!"
"2022-11-10 15:17:15.992481+00","Yeah I would love some design input here, I have tried 2 or 3 iterations locally that I all hated. 😬  cc @danielmarquespt when you get to it."
"2022-11-10 15:42:35.047398+00","How to update this test without raising the postgres error? I'd like to not delete it"
"2022-11-10 15:46:45.891047+00","What's the postgres error that you get right now?"
"2022-11-10 16:04:06.342515+00","Change ordering: ```suggestion type ChartSource = 'metrics' | 'relationships'; ```"
"2022-11-10 16:53:21.098119+00","I think it's valuable to have a record of when accounts get password resets - this should happen rarely enough that there are not a lot of logs, and if it happens a lot that could be cause for concern"
"2022-11-10 16:12:09.025701+00","boss"
"2022-11-10 16:14:53.39618+00","not sure it's wise to make this random in CI.  would be better to have an explicit test against it with a URL param or header that causes it to happen."
"2022-11-10 16:15:16.002501+00","same here"
"2022-11-10 16:15:16.45925+00","Since `sortValue` is an array we can check the length directly.  Same for `groupByValue` on line `87`"
"2022-11-10 16:15:16.518113+00","Since this is a reusable component and `localStorageKey` is optional, we need to check whether the value of `localStorageKey` has been provided for us not to end up saving `ION_` when `localStorageKey` is not provided."
"2022-11-10 16:17:56.235111+00","would be good to capture the request and response if `axios.isAxiosError` is true.  you don't know when Labtrac is going to throw a new curveball and you're going to wish you had the data."
"2022-11-10 16:18:26.45249+00","commit these style adjustments pls, otherwise lgtm"
"2022-11-10 16:18:26.600278+00","```suggestion ```"
"2022-11-10 16:24:30.21251+00","is this tier correct? T4 should only be for ""unsupported"" models"
"2022-11-10 16:24:30.281901+00","```suggestion /* metadata owner_email = mirte.kraaijkamp@meetdandy.com */ /* metadata last_audited_on = 2022-11-09 */ /* metadata view_description = import of targets for AM - trainings booked */ /* metadata tier = T4 */ ```"
"2022-11-10 16:28:48.137985+00","```suggestion /* metadata owner_email = mirte.kraaijkamp@meetdandy.com */ /* metadata last_audited_on = 2022-11-09 */ /* metadata view_description = import of targets for AM - arpp */ /* metadata tier = T4 */ ```"
"2022-11-10 16:35:49.372598+00","if you wanna be super concise, I think  ```suggestion 			err = errors.Append(err, commandLogger.Flush()) ```  would also work"
"2022-11-10 16:36:29.720093+00","That feels almost _too_ concise..."
"2022-11-10 16:37:42.525248+00","Yeah not sure, this was a quick and dirty reaction to feedback from Malo and Chris on the initial prototype. I want to have a more wholistic review and QA of the designs, so I think this could be part of it. :) "
"2022-11-10 16:43:33.188505+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion             flows.flow_start ``` "
"2022-11-10 16:44:06.308158+00","Yes but then it complains about the use in `useCallback` above, which is required because the child list component injects the scope to the parent using that.  It's a bit weirdly coupled sadly. "
"2022-11-10 16:44:10.851665+00","<img width=""1252"" alt=""image"" src=""https://user-images.githubusercontent.com/26773983/201155264-58dabfd7-51c7-4291-b2b1-8286ed96caad.png""> "
"2022-11-10 17:05:14.058452+00","""by default"" implies that this can be changed with a setting. If it's not modifyable, we should remove this wording."
"2022-11-10 17:05:54.58845+00","i put it as t4 because it is directly importing from google sheets, so the most important maintenance that will have to be done is there, rather than that the mode will change over time or will need additions  if anything would cause this model not to work, the biggest chance is stakeholders not updating the google sheet or not updating it correctly"
"2022-11-10 17:06:00.662492+00","idem  i put it as t4 because it is directly importing from google sheets, so the most important maintenance that will have to be done is there, rather than that the mode will change over time or will need additions  if anything would cause this model not to work, the biggest chance is stakeholders not updating the google sheet or not updating it correctly"
"2022-11-10 17:06:37.582501+00","i'll make it T3"
"2022-11-10 17:06:43.997352+00","i'll make it T3"
"2022-11-10 17:13:14.582495+00","It's not random in CI or tests, the tests set the probability to 100% in each test"
"2022-11-10 17:14:12.312467+00","We're going to do that separately, it is sitting in https://github.com/orthly/orthlyweb/pull/5456"
"2022-11-10 18:07:55.146494+00","this was dead code"
"2022-11-10 18:48:41.109524+00","I think these two can be merged in to a single test"
"2022-11-10 17:15:44.705575+00","I thought of this, but seems unnecessary. If they don't need the context, they can just do:  ```   getErrorReportingOptions: () => ({     team: 'Supply',   }), ```  It is just as easy to read, and that way there isn't two ways to do it, simpler API."
"2022-11-10 17:16:39.837431+00","🎉Should we move the AWS One-Click to the top of our recommendation list? @slimsag @jac @jdpleiness "
"2022-11-10 17:16:59.884042+00","nit: ```suggestion     <p>Spin up a local Sourcegraph instance with Kubernetes</p> ```"
"2022-11-10 17:17:15.761809+00","nit: ```suggestion     <p>Spin up a local Sourcegraph instance with Kubernetes</p> ```"
"2022-11-10 17:17:32.087623+00","I think you can achieve this idea more simply with a [const enum](https://www.typescriptlang.org/docs/handbook/enums.html) (unless the actual value of the string is significant outside of the app, e.g. `DATASTREAMS` is essential, but `data-streams` would break something)"
"2022-11-10 17:17:32.089719+00","Just add `!physicalData` to the code that hides this section for `DATETIME` metrics. I.e., don't show the limits button for Datetime (ever) and Physical data (temporarily)"
"2022-11-10 17:17:32.923495+00","```suggestion ```"
"2022-11-10 17:32:54.525707+00","epic"
"2022-11-10 17:44:20.219941+00","Fixed"
"2022-11-10 17:49:00.462478+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     SELECT * FROM {{ ref('stg_salesforce_user') }} ``` "
"2022-11-10 17:51:03.167342+00","no it really isn't simpler.  `() => ({` is a nightmare to write & get right lol"
"2022-11-10 17:51:13.328564+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion FROM fact_training ``` "
"2022-11-10 17:51:13.482637+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     /* description is_group_training = whether training is a group training */ ``` "
"2022-11-10 17:51:13.552901+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion LEFT OUTER JOIN pod_assignment     ON stg_training.salesforce_account_id = pod_assignment.account_id     AND stg_training.created_date::date = pod_assignment.as_of_date ``` "
"2022-11-10 17:51:13.749719+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     , REPLACE(SPLIT_PART(stg_training.training_duration, ' ', 0), '+', '') AS training_duration_hours_split     , CAST(training_duration_hours_split AS decimal(15, 1)) AS training_duration_hours ``` "
"2022-11-10 17:59:16.536915+00","Fair, I updated to record partial request/response.  <img width=""664"" alt=""Screen Shot 2022-11-10 at 12 59 06 PM"" src=""https://user-images.githubusercontent.com/2664912/201171527-f2214ea9-8fa4-4528-9549-3857339e255a.png""> "
"2022-11-10 18:01:17.986386+00","```suggestion **/* @unknwon @michaellzc ```"
"2022-11-10 18:08:27.851071+00","needed for unit tests that use eventsourced's mock aggregate"
"2022-11-10 18:32:09.728442+00","`repo.id > %s` could go in preds (same query plan) if that's easier to read."
"2022-11-10 18:34:20.624492+00","true, done!"
"2022-11-10 18:36:47.587229+00","a fun potential nil panic I spotted in the old code :)"
"2022-11-10 18:39:19.117405+00",":phew:"
"2022-11-10 18:40:10.375944+00","🙌🏽 "
"2022-11-10 18:43:06.577046+00","do you know if we will use this in other places?  if so maybe a middleware for it will make it shareable. "
"2022-11-10 18:50:16.762489+00","Maybe these two can be merged too, I like the split but as our test suite grows each test will consume time and we don't want to end up waiting a bunch of time each deploy "
"2022-11-10 18:51:28.55079+00","do we need to use secrets here too?"
"2022-11-10 18:53:42.983592+00","Im curios here, how do you usually test this, I have very basic knowledge on github actions, so wondering what is your workflow here, maybe you can do a talk about this I will like to know more :)"
"2022-11-10 22:13:53.277822+00","can we capitalize the ""as"" for consistency?"
"2022-11-10 18:58:32.268189+00","Can we type the mutation here?,  similar to the code above  ```ts export function useDeveloperCreateReportSubscription() {     return useMutation<	    return useMutation<         ResolvedReturnValue<typeof api.Developer.createReportSubscription>,	        ResolvedReturnValue<typeof api.Developer.createReportSubscription>,         APITypes.APIError,	        APITypes.APIError,         MutationVariables<typeof api.Developer.createReportSubscription>	        MutationVariables<typeof api.Developer.createReportSubscription>     >((variables) => {	    >((variables) => {         return api.Developer.createReportSubscription(variables);	        return api.Developer.createReportSubscription(variables);     });	    }); }	} ```"
"2022-11-10 19:40:17.212485+00","This was just moved from previous location because the sort order changed due to the new product id on line 182"
"2022-11-10 19:47:44.001552+00","Ah, thanks Becca!"
"2022-11-10 19:53:19.502479+00","I think that the way this is written may be a bit confusing. I would suggest using the function meant to handle this type of thing: `getWorkflowTaskName` https://github.com/orthly/orthlyweb/blob/master/packages/graphql-operations/src/workflow-task-names.ts#L20  Also, we do have a type guard for this. Take a look at: `isLabsGqlDesignStaffTaskType` https://github.com/orthly/orthlyweb/blob/master/packages/veneer/src/components/DesignerStatus/DesignerStatusDialog.tsx#L30"
"2022-11-10 20:35:01.612497+00","this signifies that labs-server ""owns"" this data, but it requires the external fields `id` and `type` from retainer in order to resolve it.   notably, its also a nullable field"
"2022-11-10 20:35:33.269616+00","Enums can be repeated in as many subgraph schemas as you want, as long as they are identical in each"
"2022-11-10 20:36:13.522541+00","this is weird and may break schema check - easily fixable if so. has to do with metadata on the enum registration"
"2022-11-10 20:37:24.262488+00","optional in typescript because labs-server doesn't own this field - we don't have to return this in entities that reference organization"
"2022-11-10 20:39:50.842033+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion /* metadata view_description = This model pulls in orders, items, and units, and translates the Portal data to our defined MPN data, ``` "
"2022-11-10 20:40:28.320119+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion         , FIRST_VALUE(             timestamp         ) OVER (PARTITION BY first_event_id_in_this_seeding ORDER BY timestamp ASC) AS first_event_in_this_seeding_at         , LAST_VALUE(             timestamp         ) OVER (PARTITION BY first_event_id_in_this_seeding ORDER BY timestamp ASC) AS last_event_in_this_seeding_at ``` "
"2022-11-10 20:46:08.791082+00","I don't think this should have ever changed to `SlaResponsibleParty`.  probably a side effect of them being aliases."
"2022-11-10 20:47:07.61449+00","Cool, I agree - I think that's a good idea. I brought back the Feedback popover for unauth'd users in the top nav. For auth'd users, the Feedback will now be in the user menu to simplify to top nav space."
"2022-11-10 20:48:30.659902+00","## Unauth'd users  ### Before ![Screen Shot 2022-11-10 at 3 47 47 PM](https://user-images.githubusercontent.com/1733936/201202676-95c0c087-0132-4bb0-83af-bd7c58f768dc.png)  ### After ![Screen Shot 2022-11-10 at 3 47 55 PM](https://user-images.githubusercontent.com/1733936/201202677-f347ceae-5c76-4b8c-a112-82bf32d603ac.png) "
"2022-11-10 20:51:32.909953+00","## Auth'd users  ### Before ![Screen Shot 2022-11-10 at 3 50 39 PM](https://user-images.githubusercontent.com/1733936/201203149-58137edc-4b61-4a50-b25b-0485a1773fc2.png)  ### After ![Screen Shot 2022-11-10 at 3 49 54 PM](https://user-images.githubusercontent.com/1733936/201203148-cd0a3b3c-f607-457b-859f-d1c12d754058.png)"
"2022-11-10 21:00:58.828292+00","I absolutely agree, hence needing to comment what should just be a simple line. However,  `getWorkflowTaskName` doesn't help, since I don't want this as a string, I need the enum check to make sure it's one of the two usable values. Even as a string, I can't use it with `DesignStaffSupportedTaskTypes`.   `isLabsGqlDesignStaffTaskType` is where this code comes from. That method cannot be imported, even if exported from there. I was told to copy paste it over.   "
"2022-11-11 07:39:24.47203+00","We are outside the scope of this story, I would very strongly insist we remove this method and leaving it for the @jb's follow up story. If it is the case we really do need it, we should discuss the reason in more detail and we will need to clean up this method (i.e. better description, missing param descriptions, incorrect param description names, etc.)"
"2022-11-10 21:13:04.002488+00","definitely include this link in the code! given it's on the npm it's very likely to be permanent."
"2022-11-10 21:20:16.391326+00","Yes, definitely.  I also suggest we remove the _other_ AWS option (instructions for launching from an image) and instead just link to those from the one-click page."
"2022-11-10 21:43:49.880634+00","no because I just use it to make a json string all within the func"
"2022-11-10 21:44:49.274411+00","yeah I wanted to cut it off at some point because it could be many thousands figured 100 would be enough to get some details out of."
"2022-11-10 21:47:10.014321+00","Looks like some things I can remove that were left over from the fully typed version. I'll remove them."
"2022-11-10 21:58:56.056195+00","🖖 "
"2022-11-10 22:04:44.784754+00","I guess we could receive more requests for this environment. Following the YAGNI principle, ... what if we extract this validation into a middleware until we receive the next feature request environment?"
"2022-11-12 00:47:38.612492+00","Great suggestion, thanks!"
"2022-11-10 22:13:59.237345+00","can we capitalize the ""as"" for consistency?"
"2022-11-10 22:16:45.501974+00","can you add `table_name.` before the field name?"
"2022-11-10 22:17:08.207006+00","Before: 4x (query and process one record) After: query 16 records and 4 workers process them concurrently"
"2022-11-10 22:19:12.678884+00","is valid_from the beginning of time, or is it the first snapshot time? Want to make sure we're not losing historical data (even though it might not be 100% correct since teams change)"
"2022-11-10 22:20:48.314086+00","ah no it isn't the beginning of time"
"2022-11-10 22:25:53.066091+00","do we still need the user table in here? That should all be in your snapshot table now, right?"
"2022-11-10 22:26:56.158295+00","yeah I can change this out with `dim_cx_user`"
"2022-11-10 23:03:18.262029+00","yeah you're right. it doesn't cause schema issues so think we're good"
"2022-11-10 23:17:07.231204+00","I recommend not using these double roles and instead nesting these inside `ul > li`. Even better if you can use `<input type=""checkbox"">` directly instead of the role. You can hide the input if you want (`<input type=""checkbox"" id=""something"" class=""sr-only>`) and then associate it with a label (`<label for=""something"">`) to make it pretty.  In general, if we can use native HTML elements instead of ARIA, that is much better and saves us a lot of work implementing events ourselves."
"2022-11-10 23:20:23.744547+00","I wanted to follow the **_single expectation test_** style, which can be resumed as **_each test should make only one assertion_**. This helps in finding possible errors, going directly to the failing test, and making code readable.  But as you said, this would have the implication to make the test suite slower.. In this case, I think it's fine to specify more than one isolated behavior. Thanks for the suggestion.  See: https://www.betterspecs.org/#single    "
"2022-11-10 23:20:35.943805+00","I'll do."
"2022-11-10 23:23:19.914532+00","I don't think that it would make a difference since this Postgres instance is created on the fly on the testing workflow. It's using a pattern called docker on docker, wich is a docker instance that instantiates more docker containers."
"2022-11-10 23:27:31.110425+00","Just talking out loud:  If a record is currently queued when this runs, we should be fine because the new recording time will be written whenever that job executes."
"2022-11-10 23:27:31.172392+00","seems like you could move this into the loop above?"
"2022-11-10 23:27:31.863509+00","When locking rows access should always been in a stable order to prevent deadlocks in postgres:  `order by id`"
"2022-11-10 23:38:36.859045+00","```suggestion 			logger.Debug(""insights backfill incomplete repo writing all datapoints"", ```"
"2022-11-10 23:38:54.573296+00","There are some tools that allow you to test your GitHub action definitions locally. I have used this one: https://github.com/nektos/act  Also, not ideal but trial and error is another way to go. If you want to see the results of the latest run, you can use this link: https://github.com/immunefi-team/bugs/actions/runs/3438896484/jobs/5735542284"
"2022-11-10 23:40:33.355191+00","Initially, I didn't type this response since it's responding with an HTTP 204 No content and it requires no params. but I guess we are losing the error formatting. I'll take care of it."
"2022-11-10 23:45:29.415627+00","Sequence data for shift triggers is also included in the API response. Is there a reason we can't treat shift triggers like trend and overControl?"
"2022-11-10 23:45:29.463075+00","Also, I think we want > vs <, and don't include points exactly on the centerline as shifts."
"2022-11-11 00:18:11.242469+00","Would it be worth resetting the counter if the value is equal to the center line (or at least ensuring it behaves consistently whether it's 'above' or 'below' if it does)? Probably a very unlikely case, depending on the data.  edit: oops Max beat me to this comment"
"2022-11-11 00:25:18.568538+00","Any specific reason for using `backdoor_`; would it make sense to have it be `internal_` (if it is not meant to be used elsewhere) or `_builtin_` (if it is OK to use elsewhere, but less preferred)?"
"2022-11-11 00:34:44.199534+00","Should be Envelope document if am not wrong, if so it already exists"
"2022-11-11 00:34:46.96914+00","I think condition here is clear, we don't need the comment"
"2022-11-11 00:34:48.239697+00","Since you are only getting ids update your function name to mention it"
"2022-11-11 00:34:51.219743+00","```suggestion if (document?.storageType !== StorageTypeEnums.S3) { ```"
"2022-11-11 00:34:52.339612+00","`getEnvelopeDocumentIdsByEnvelopeId(`"
"2022-11-11 00:34:53.765203+00","Prefer full name `ENVELOPE_DOCOUMENT_DOWNLOAD`"
"2022-11-11 00:34:54.665535+00","Get envelope should come first"
"2022-11-11 00:39:50.641411+00","Error code-message mismatch"
"2022-11-11 00:39:52.356494+00","Should be done in the first query in the documents service to avoid a lot of queries"
"2022-11-11 00:42:09.649805+00","please swap the order of these lol ```suggestion         if (!downloadUrl) {             throw new Error('No Download URL found');         }         const writer = fs.createWriteStream(savePath); ```"
"2022-11-11 00:44:16.165592+00","Done"
"2022-11-11 00:50:50.782191+00","How are we going to handle this going forward? Mostly curious, but it seems like these lifecycle rules were in place for a reason. Maybe we should get rid of the rules altogether and just have a worker task on our end, which would be backend agnostic?"
"2022-11-11 00:50:51.152598+00","if minio is still supported for now (is the default val), I think it should still be part of the list in the help text."
"2022-11-11 00:50:51.652469+00","Would be nice to wrap it in our dockerfile template so that we get the proper labels on the OCI which renovate and the likes can consume."
"2022-11-11 00:50:52.670676+00","same as above"
"2022-11-11 00:58:56.537242+00","@limitedmage I was thinking about having real checkbox here. But it seemed to me as a lot of work and code for something that we can do without it. For example, we need to render input type checkbox, then we need to hide it, then we need to render label, then we need to care about label input connection with unique id. This seems like a lot of work  and I don't have good enough reason to do this.   I understand that aria roles is a promise. When we use something non standard we need to implement all standard behaviour but in this particular case we don't need to implement anything besides aria attributes. It makes me thing that in this exact case it's okay to use non standard checkbox.   About double roles I agree, for the record it works as expected in Voice Over and NVDA and I brought this solution in order to simplify react and DOM call tree. You're the second person who suggests to not use double roles and I agree it may be tricky so I will use composition here.  "
"2022-11-11 01:55:26.021316+00","I would try first to use Oban in Grafana through `PromEx` library: https://github.com/akoutmos/prom_ex#available-plugins  Let's not reinvent the wheel, if something is supported, let's use it"
"2022-11-11 01:13:02.032493+00","> To add the correct measurement id, it should be as simple as adding 'inspections.measurements.id', to this includes block. To access the intent id would then be something like ...map(({ _source: { id } }) => id).  This is the same solution I've arrived at. So @gitstart-instrumental  make these two changes:  1. In es-query: (Ignore addition on line 28) <img width=""857"" alt=""CleanShot 2022-11-10 at 17 10 52@2x"" src=""https://user-images.githubusercontent.com/10248067/201239014-d8330894-a948-45e1-8455-a80dc562e346.png"">  3. In this file:  <img width=""764"" alt=""CleanShot 2022-11-10 at 17 08 56@2x"" src=""https://user-images.githubusercontent.com/10248067/201238865-de8c0503-790b-4377-b0e8-4c5b72009dd6.png"">  Finally, please fix the inconsistent indentation through out this diff.  I think once these changes are made, the workflow will still be incomplete, but maybe  75% finished.  ---  Another thing that's missing is that the `minMaxPoints` is only accounting for the completed points that were measured within the modal. It does not incorporate that points that are saved. I will handle this in my follow up."
"2022-11-11 01:21:32.665356+00","done!"
"2022-11-11 01:21:44.224271+00","done!"
"2022-11-11 01:22:10.950279+00","I didn't know that was available!  I will update the PR to handle Shift, Over-Control, and Trend triggers in a similar way"
"2022-11-11 01:06:04.517998+00","A couple items that will need to be adjusted here to get this to work:  1. To add the correct measurement id, it should be as simple as adding `'inspections.measurements.id',` to [this](https://github.com/dfxmachina/frontend/blob/master/app/modules/measurements/es-queries.ts#L281-L283) `includes` block. To access the intent id would then be something like `...map(({ _source: { id } }) => id)`. 2. However, even with that change we would still be failing to include any newly saved measurements (i.e. the measurements saved above in `api.saveImageFeatureMeasurements`). Luckily, `saveImageFeatureMeasurements` does provide a response of all measurements saved, so we will just need to include those ids here as well. This is particularly important for the user flow where a user bulk measures a new measurement (only one measurement saved prior to opening modal) and immediately creates an automeasure monitor. In the current implementation, we would only send one measurement id to the backend. 3. Somewhere in this modal (I haven't looked to figure out where yet) we are skipping the `onBeforeConfirm` call if there are no new physical measurements to save. The specific scenario I am thinking of where this will matter is if a user bulk measures 50 measurements, saves and closes the bulk measure modal (without creating a monitor), and returns later to create a monitor via the bulk measure modal. In this scenario, the user would not be able to create an automeasure monitor. We need to adjust the logic to account for this situation.  @jonboiser I will leave it up if you think it would be best to address 2 and 3 in a separate ticket as I am uncertain of the scope of the changes required, but at the very least suggestion 1 should unblock this PR (~~assuming my untested solution works~~ tested locally and it appears to work )."
"2022-11-11 01:55:25.702468+00","I like this example, concrete 👍 "
"2022-11-11 01:55:25.966855+00","I configued the alert in appsignal and I could use `expressions` to get the percentages of things.  Does fly provides something like this?  Btw, I used fly metrics in the alert, you can see it [here](https://equanimity-grafana-prod.fly.dev/d/eiRE4umnz/fly-app-grafana-dashboards?orgId=1&editPanel=32&tab=alert)"
"2022-11-11 01:55:26.083007+00","typo: `allosws`"
"2022-11-11 01:55:27.56985+00","You mean `while Fly.io does?`  PromEx runs at the application level, we could get the Mem total memory by calling the OS api with elixir but I don't think we can do that.  I think it's ok to have these in AppSignal. We could also open a support ticket to ask if they are going to support `%` alerts"
"2022-11-11 01:55:27.606154+00","Is not a thing.  AFAIK, this is how it works: 1. Prod build is done, files are produced in a folder e.g. `/dist` 2. This files are uploaded into a repo / CDN 3. CDN serves all of the files, there is not memory to manage  Unless we are doing server side rendering, but I don't think so 🤔 "
"2022-11-11 01:55:28.876295+00","`including tracking the exact SQL query strings` -> `including tracking the exact SQL query`"
"2022-11-11 01:55:28.937808+00","+1"
"2022-11-11 01:55:27.791829+00","They aren't? Weird. We can setup a custom telemetry handler for errors. Something like this: https://hexdocs.pm/oban/Oban.html#module-reporting-errors but adapt it to use AppSignal API  I would definitely start with this one, we DO need to know if jobs are failling ASAP"
"2022-11-11 01:55:27.867232+00","I would start small: 1. Create the alert for requests that take > 2 seconds 2. Setup monitoring / tracing to know where to debug 3. Deploy changes 4. Visualize tracing  What do you think?  My thoughts is that is easier to start small and build knowledge from something concrete instead of trying to instrument our whole system and parts that we don't actually know how (oban, absinthe internals, etc)"
"2022-11-11 01:55:28.43862+00","Normally alerts are fine tuned as we go in time :). I set up Grafana for > 50% mem usage to alert. We could easily moved to 80%.  Don't stress too much, set up an initial value and we reconfigure as we discover how our system behaves"
"2022-11-11 01:58:45.412131+00","done"
"2022-11-11 02:35:39.501652+00","Here we can mention that the ticket pricing is the sum of all alreated pull-requests prices, is this correct?"
"2022-11-11 02:35:39.917337+00","```suggestion - [ ]  **Complex implementation:** PR implementation requires extensive engineering knowledge to build it correctly ```"
"2022-11-11 02:35:40.264692+00","```suggestion - [ ]  **Novel solutions:** PR may demand optimal and/or out-of-the-box solutions. It will require > 1d of PR spec to discover the solution ```"
"2022-11-11 02:35:40.515989+00","h4 it's `####`. See [this](https://www.markdownguide.org/basic-syntax/#headings) guide  ```suggestion #### A. PR complexity ```"
"2022-11-11 02:35:40.517555+00","Who is the project manager? Is it the team lead?  It's the first time I see the concept of ""project manager"""
"2022-11-11 02:35:42.399429+00","I would remove this 🤔 "
"2022-11-11 02:35:42.613237+00","Oh this is hard, even for an experienced programmer is hard to measure how much lines this ticket will take"
"2022-11-11 02:35:42.627608+00","Here you mention: `Ticket scope is clear`. Does this means that if the scope isn't clear, then the ticket level must be from 3-5? Isn't the scope required to know ""what"" is the ticket is and therefore estimate the level correctly?  My though is that it can be a level 5 and have a clear scope"
"2022-11-11 02:35:43.463059+00","Isn't this setup automatically? I thought we ran the CI/CD in the GitSlide repo and report back the results in the PR"
"2022-11-11 02:40:48.667192+00","Here `client`, do you refer to the developer using `Gitstart` to accelerate himself, right?  Or the client as ""company paying""?"
"2022-11-11 02:40:52.755222+00","What do you mean with ""not much refactoring""?  I would add: `no typed classes (if applies)`"
"2022-11-11 03:05:24.12051+00","```suggestion export const getServerSideProps: GetServerSideProps = async ({ req, locale }) => { ```"
"2022-11-11 02:50:55.893222+00","@jonathan-yee @jonboiser  In order to display the information such as `avg` & `std.deviation`, I had to first fetch the histogram data this way."
"2022-11-11 02:52:15.045662+00","@nweidinger @jonathan-yee do we have the most recent mock-up yet?"
"2022-11-11 02:54:56.192386+00","@jonathan-yee I created a mapping method `createImageMap()` that pulls in parent image ids given the metric card ids. Though, the mock-up does not show where the image info should display so this method is just chilling idly for now."
"2022-11-11 03:02:22.092477+00","Is this spec correct?   What if there is no instance with the given `instance_id`? In that case, doesn't [`Repo.one/2`](https://hexdocs.pm/ecto/Ecto.Repo.html#c:one/2) return `nil`?"
"2022-11-11 03:05:23.237565+00","translate these strings too"
"2022-11-11 03:05:23.204009+00","```suggestion         <EmptyState title={t('no_connections_found')} href={`/admin/connection/new`} /> ```"
"2022-11-11 03:05:25.201999+00","`ConfirmationModal` title and description can be translated too"
"2022-11-11 03:05:45.771784+00","> Raises `Ecto.NoResultsError` if the Ticket refund does not exist.  Line 34 should also be changed."
"2022-11-11 03:12:53.762472+00","```suggestion     test ""creates a ticket when user leads a team working for that instance"", %{ ```"
"2022-11-11 03:12:53.837577+00","I think `Logger.error` would be more adequate in this case. Also, do we want to keep logs in tests or should we use them only for debugging purposes?  cc @ishmam-mahmud, @rlopzc "
"2022-11-11 03:12:53.91035+00","The function name doesn't really describe the fact that a join is happening. 🤔 Could you please change it to something more representative? Maybe ""join_with_manager_and_instances""?"
"2022-11-11 03:12:54.372636+00","```suggestion     test ""creates a ticket when user owns a repo of that instance"", %{conn: conn, user: user} do ```"
"2022-11-11 03:16:59.096818+00","I observed during the traffic ramp-up that this thing needs more RAM."
"2022-11-11 03:17:32.414528+00","Could you please include an example of code that _uses_ the pipe operator vs. code that _doesn't use_ it?"
"2022-11-11 03:22:41.222481+00","I can use `internal_` instead since it's only meant to be exposed to the sandbox that provides the actual API."
"2022-11-11 03:22:56.102543+00","Will need to make the same change in #44247."
"2022-11-11 03:52:24.755721+00","I recently did this [same kind of work for the diff page](https://github.com/sourcegraph/sourcegraph/pull/43632) and adding unique IDs and hiding the checkboxes is IMO very straightforward, I recommend giving it a try. In this case, the unique ID can be the chart ID combined with the series item ID. This is what I've done for years to build accessible custom checkboxes and radio buttons. I think having a more standard, accessible markup is worth it."
"2022-11-11 04:06:00.367918+00","We'd likely want to use _.isEqual, otherwise this `==` comparison probably won't do what you're expecting."
"2022-11-11 04:08:51.935718+00","```suggestion             globalErrorHandler(new Error('SpanNameSamplerConfig must have a fallback sampler configured')); ```"
"2022-11-11 04:31:29.63732+00","Hmm... I'm confused why `lower_to_upper_distance_map` doesn't look for `'lowertoupperdistancemap'`.  Also, I realize this is still a draft; let me know if you prefer no comments until a pull request is ready for review."
"2022-11-11 04:53:06.623502+00","```suggestion ```"
"2022-11-11 04:53:06.722478+00","```suggestion       resolve(fn %User{id: id}, _args, _resolution -> {:ok, Accounts.developer_lead?(id)} end) ``` Might be a better name to differentiate between developer and client accounts"
"2022-11-11 04:56:43.951236+00","Is it because it currently throws the postgres error using the client id foreign key instead or something?"
"2022-11-11 04:56:44.791876+00","```suggestion     |> change(%{client_id: Clients.get_client_id_for_instance_id(attrs.instance_id)}) ``` I think there's two You can either write a validate_change function instead, and pattern match on the response of get_client_id_for_instance_id, and then call put_error or add_error or something. If you do this, you should remove the foreign key constraint checks on instance and client id as both of those are validated by this validate_change function already  Secondly, you could experiment with the order in which you call the foreign_key_constraint calls for both instance_id and client_id. It might resolve your issue"
"2022-11-11 04:59:42.715587+00","Error is better in this case. I would keep them, as I don't mind seeing all the error messages in the test output myself. As long as I can see the test assertions that failed and their stack traces, I can live with that"
"2022-11-11 04:59:42.795638+00","Are these defaults? If so, I'd add change calls in the Ticket.create_changeset function instead for this, so that everyone who uses create_ticket does not have to remember to do this"
"2022-11-11 05:13:23.488305+00","I currently already started with the CPU and memory ones and enabled them. I am currently debugging those with some stress testing to see if the appsignal implementation works, and then can move to this one"
"2022-11-11 05:24:03.850753+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion             flows.flow_start ``` "
"2022-11-11 05:24:04.54173+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     /* description is_new_design_prep = DesignPreps are attributed to all internal design attempts until there is a new one. To avoid double counting design prep units, use this flag to filter the count for only the first time the design prep was used */ ``` "
"2022-11-11 05:32:31.001917+00","Nitpick: This can be simplified to:  ```suggestion         const textLocation = annotationType === 'lower'             ? -5 + (xLocation <= textAnnotationHeight ? textAnnotationHeight : 0)             : -5 + (xLocation >= innerWidth - textAnnotationHeight ? 0 : textAnnotationHeight); ```"
"2022-11-11 05:37:58.315466+00","```suggestion 	""ruby"":       ""sourcegraph/scip-ruby"", ```"
"2022-11-11 05:39:24.535447+00","Q: Can we somehow colocate this list with the indexer list (or avoid the duplication)? I spent some time trying to debug why my patterns weren't getting picked up, it was because I didn't realize I needed to update this too."
"2022-11-11 05:40:31.302534+00","reverted!"
"2022-11-11 05:42:17.842483+00","We [do support](https://sourcegraph.com/github.com/sourcegraph/sourcegraph@71cb15117b34d2f6444352e8bf183f642e776ce0/-/blob/internal/search/query/date_format.go?L40-43) dates with timezones, so it's only when the timezone is unspecified do we assume UTC."
"2022-11-11 05:45:22.927461+00","Just add it to the right of the station name for now, similar styling as the station name."
"2022-11-11 05:48:31.101837+00","I will look at this method, but as we have discussed in past feedback, we should try to avoid adding methods/params/code that isn't used yet as it will be difficult to evaluate if it is unused yet. That being said, we can add the image name to the right of the station name for now."
"2022-11-11 06:06:04.587077+00","I'm not sure about everything in this article though. I think the ""Differentiating non-matching clauses"", for example, should result in a credo warning."
"2022-11-11 07:13:43.758964+00","is there any reason why this wasn't done via a fragment? is it because the type is not related to `viewer`? "
"2022-11-11 06:08:04.116007+00","I do not think getting distribution data is necessary for getting the average and standard deviation values for physical measurements. As we discussed offline, I thought it made sense to look at what was going on for future reference, but I believed that we were grabbing the extended stats for the measurement values as part of the initial ES query. In fact, the extended stats are being requested [here](https://github.com/dfxmachina/frontend/blob/master/app/modules/metrics/es-queries.ts#L207-L210) as I included in my suggested es query for the previous PR with the specific intention of having that data already available. All we need to do is select the correct stats to store in the processing and we should have this data already piped in. This will save us from having to do an additional query later.  Please update the PR accordingly as this PR is now reaching outside the scope of the original story (and is in the 500+ line changes)."
"2022-11-11 06:32:24.815392+00","I'd rather not have multiple sources of information, but I think that having metrics coming from only 2 places (not more than that) could be beneficial. We could compare them to identify any inconsistencies in one or the other."
"2022-11-11 06:32:27.278941+00","Do we already have alerts for queues? It would be interesting to know whether they're too long or completely empty"
"2022-11-11 07:37:21.542169+00","You are right. That's something we're trying to resolve in the other comments"
"2022-11-11 05:37:31.975572+00","@efritz is there a better way to do this? The patterns earlier in this function already provide the paths, so this is superfluous. However, supplying `{}` here leads to the recognizer not running at all."
"2022-11-11 06:46:28.246476+00","Looks good to me for only invited users, but the settings for who can post should be ""Entire Organization"" instead of ""anyone"""
"2022-11-11 06:54:39.622479+00","Relying on Typescript project references makes it possible to avoid adding type declarations via the `paths` property as we do in some `tsocnfig.json` files."
"2022-11-11 06:58:36.003495+00","Not same. Mine is plural"
"2022-11-11 07:00:16.630128+00","I'm not done with the code. Put that as a reminder to include a condition"
"2022-11-11 06:59:02.252501+00","`ENVELOPE_DOC_DOWNLOAD` already existed in the codebase I just used it"
"2022-11-11 06:53:03.202492+00","Moved `FetchFileParameters` from the `search-ui` package to the `shared` package:  1. To remove the circular dependency between `search-ui` and `search`. 2. To colocate with the fetch function where this interface is required – `fetchHighlightedFileLineRanges`."
"2022-11-11 07:03:22.762483+00","There are many functions that use lead? instead of developer_lead? And there are no lead? function for the client accounts. I'm therefore tempted to keep lead? for consistency with the current implementation @ishmam-mahmud. "
"2022-11-11 07:02:50.442618+00","@jonathan-yee You are right. We do not need to calculate the distribution data like I did on line 69 - 79 to get the stats. It is only for the distribution chart. I understand I could toggle it.  Though, what I meant to say was that if the histogram data is ready for the distribution chart, the charts can render without any errors and it would be easy to test.  The stats data gets updated in metrics controller by a method `updateMetricsDistributionStats`.  If I recall it right, you mentioned that it would be a good practice for me to get the histogram data so I thought it would be okay but did not realize how big the PR has gotten. 😣  "
"2022-11-11 07:13:43.688429+00","+ are these all instances? or instances that the user is allowed to create a ticket for? "
"2022-11-11 07:13:43.746731+00","i don't realllly get this refactor here"
"2022-11-11 07:39:28.883315+00","We will not be loading control chart data/charts for a while. Let's undo the changes here and leave the method as is. We can't call it if we don't provide the UI for the physical measurement cards."
"2022-11-11 08:55:31.490031+00","I have tested those alerts since in the `engineering-notifications` channels and verified they work. I lowered the thresholds for my testing"
"2022-11-11 07:13:43.836773+00","any reason why we don't be more descriptive to be `instanceId` here? 🤔 "
"2022-11-11 07:10:32.87736+00","@jonathan-yee Since we do not have an official mock-up to confirm where the image name actually should appear, I will add that method separately for a ticket [WEB-2245](https://instrumental-inc.atlassian.net/browse/WEB-2245).  "
"2022-11-11 07:17:47.613616+00","I will implement this in a separate ticket. https://instrumental-inc.atlassian.net/browse/WEB-2245"
"2022-11-11 07:18:29.662633+00","This way, this PR does get another additional 10 lines of code.😅"
"2022-11-11 07:25:42.710144+00","My understanding of why it's required: the `branded` package has `observability-client` file in resolved modules, but because it doesn't rely on Typescript project references in some of the edges leading to `observability-client` modules, they are resolved using this `tsconfig.json`. The resolved modules graph doesn't have type definitions defined in the `observability-client` package `tsconfig.json`, so we need to manually add them here.  Even if we find the resolution path that leads from this package to `observability-client` modules, it won't be possible to use the Typescript project references (that would remove the need to add type-declarations to `paths`) because the `shared` package is part of multiple circular import graphs, which [are not allowed.](https://github.com/microsoft/TypeScript/issues/33685) "
"2022-11-11 07:36:23.946022+00","Hmm, I don't know what this is meant to line up with, but running into a networking error where this isn't being found when trying `src code-intel upload`."
"2022-11-11 07:36:51.217736+00","Auto-fixed by Typescript as a redundant type-casting."
"2022-11-11 07:39:26.311074+00","Let's drop this for now."
"2022-11-11 07:39:24.543281+00","Considering the changes from this line (47) to line 79 are all related to getting histogram data, I would suggest we skip adding this for now and save it for JB's story as I do not believe we need to make these calls yet to get Avg. and Std. Deviation."
"2022-11-11 07:39:26.554457+00","Just a note for future reference considering my suggestion will remove the need for this, but if the block is already wrapped in a single element, we do not then need to include an additional `<>`"
"2022-11-11 07:39:24.582806+00","As we discussed offline, anytime we need to use `_source` I get wary as to why we couldn't just aggregate the data fields as necessary. That being said, I have investigated getting the measurement name when there is no monitor and it will be more unnecessarily time consuming to try and include it here given the state of the rest of this PR. We have upcoming stories where we will get image measurement ids where it will make more sense to do the work for this then. As such, I would remove all parts of this PR that are used to get photo intent id for now."
"2022-11-11 07:39:26.941709+00","Let's drop this for now. We will come back later to handle getting image intent ids/names. It will be simple when there is a monitor, not so much when there isn't a monitor."
"2022-11-11 07:39:24.96982+00","Why not follow suit with what we have been doing in other places? That way we don't have to indent this whole block just to un-indent it later. I.e.  ```ts <div class={`metric-card-actions-dropdown-wrapper ${ isPhysicalData && 'hidden' }`}> ```"
"2022-11-11 07:39:25.339643+00","While we are here, I should also point out that the `exploreUnitsLink` is broken. It does not include an image intent name to auto select to. Considering my suggestion above is to leave out getting the image intent name/id, I would suggest hiding this button as well for now. Perhaps just hiding the entire action button wrapper for physical measurements."
"2022-11-11 07:39:25.520018+00","As mentioned in my other comment, I would suggest removing these changes for distribution stats/chart data. It is reaching outside the scope of this ticket and is actually not necessary if we pipe the data properly."
"2022-11-11 07:39:25.73195+00","In our move of naming conventions, we have not only removed the method description for this method, but we have also replaced with an extra empty line."
"2022-11-11 07:39:25.818898+00","We are again letting the scope of this story creep. Why can't we just leave this method and the type above as is considering we are hiding the button that would trigger this anyways? It should never be the case that we can trigger this method for a physical measurement yet."
"2022-11-11 07:39:26.695622+00","FYI, this entire line fits on a single line, but also there is an unnecessary space that has been added in front of `async`"
"2022-11-11 07:39:28.868064+00","Lines 285 - 294 can be removed."
"2022-11-11 07:39:28.923255+00","We can drop this for now. Note we added a typing here, but aren't actually requesting this as part of the query (i.e. we added code that isn't being used yet)."
"2022-11-11 07:43:26.564174+00","```suggestion truck_over_maximum_speed? = total_speed > 80 and vehicle.is_truck?  if truck_over_maximum_speed?, do: create_speed_ticket() ``` Should this also have a trailing question mark?"
"2022-11-11 07:43:45.449803+00","OK, looks like host.docker.internal is incorrect for Linux. There is also a separate EXECUTOR_FRONTEND_URL in sg.config.yaml, so unsure if this is needed...  https://github.com/sourcegraph/sourcegraph/blob/086462a2486bf127ae82ef0bb78513578f1a70f5/doc/admin/external_service/src_serve_git.md?plain=1#L37"
"2022-11-11 07:49:17.974279+00","```suggestion   # credo:disable-for-lines:<count> ``` You need to actually put a number here, not just count"
"2022-11-11 07:44:51.240735+00","It appears we have also lost the feature flag check we added in (this PR)[https://github.com/dfxmachina/frontend/pull/2606]. Please make sure it is added back appropriately. We should not be showing any auto measure features as long as the feature flag equals `ignore`"
"2022-11-11 07:53:18.496051+00","> If I recall it right, you mentioned that it would be a good practice for me to get the histogram data so I thought it would be okay but did not realize how big the PR has gotten.  As I mentioned, `I thought it made sense to look at what was going on for future reference`. In this case, ""looking"" would be just to follow the different pieces along as they get the data and flow it to the distribution chart considering we are somewhat poking around the same code. I definitely mentioned as well that it was not going to be the same way we need to implement it considering we already had the stats. As mentioned in a number of my comments below, by going down this path, we have allowed another story to scope creep."
"2022-11-11 07:56:02.411211+00","Should this TODO be removed? I think `warn` is better here"
"2022-11-11 07:56:02.470156+00","let's use scoped `logger` which is defined in the beginning of the function"
"2022-11-11 07:56:02.472492+00","this log will be spammy, I wouldn't add it"
"2022-11-11 07:56:02.66506+00","this log will be spammy, I wouldn't add it"
"2022-11-11 07:56:04.302654+00","when there is an error during getting `lastFetched`, we can get a zero-valued `Time`. in this case we won't update the repo, is it an expected behaviour?"
"2022-11-11 07:56:04.449058+00","alternative version suggestion:  ```suggestion 	// We compare all fields because we don't expect any changes ```"
"2022-11-11 07:56:02.643367+00","lil typo fix  ```suggestion 		// Perform a fresh repo update only if the current time is beyond the threshold ```"
"2022-11-11 07:56:03.209227+00","`repoLastFetched`'s documentation says: `This breaks on file systems that do not record mtime and if Git ever changes this undocumented behavior.`  Do you think it is a good thing to make this change if we know that it will brake on some file systems?"
"2022-11-11 07:56:03.264722+00","```suggestion 	// Create a new request with the Since interval set to a long duration to verify that the ```  probably?"
"2022-11-11 07:56:03.350224+00","this looks redundant, we have already set this value above"
"2022-11-11 07:56:04.222854+00","I would move `repoLastFetched` call before the `if !repoCloned(dir) && !s.skipCloneForTests` so that we don't call it two times instead of one."
"2022-11-11 07:56:05.140367+00","this value doesn't seem to be changed by your test 🤔 "
"2022-11-11 08:00:35.352486+00","We can also make isntance_id required and remove client_id from required field in the DB constraint"
"2022-11-11 08:13:41.442496+00","```suggestion import graphiql from 'graphiql' ```"
"2022-11-11 09:23:19.634366+00","@tristantreb forgot to add non_null here: ```suggestion field :internal_id, non_null(:integer) do ``` Created a [linear issue](https://linear.app/gitstart/issue/ENG-1467/make-instanceinternalid-non-null) for this"
"2022-11-11 08:05:55.422691+00","yes you are right, the two steps should switch order due to dependency  when we onboard a new instance from an existing client, we will need to add the leads to the Client-GitHub Team so they can slice the client repo "
"2022-11-11 08:08:21.356928+00","Hi, @phunguyenmurcul I added `target=""_blank""` here, IMO it's weird to replace the current window with the doc link since you might want to see the doc to help with the query. I would leave a comment on the client's end about this also once pushed.  Do you see some potential issues with it?"
"2022-11-11 08:13:41.450006+00","```suggestion                 <ButtonLink to=""/help/api/graphql"" variant=""link""> ``` IMO we don't need to add `target=""_blank""` since we already don't have it for a long long time :D "
"2022-11-11 08:18:45.636711+00","Sure, although I think it's a nice addition here, would remove it now, but also suggest it to the client on PR in case it's found beneficial."
"2022-11-11 08:21:07.237279+00","> Is there any reason why this wasn't done via a fragment?  Making it a fragment means I would bloat the TicketsList view queries (Actionable and All tickets) with something that might not be needed 90% of the time. It is only needed when the user is a lead and that lead needs to create a ticket. I expect most users to go to the TicketsList views to get to a ticket, not create a ticket.  > are these all instances? or instances that the user is allowed to create a ticket for?  Only the instances that the user has access to/can create tickets for."
"2022-11-11 08:21:55.587136+00","This may have been two different typos :)   https://en.wiktionary.org/wiki/iff  Should change either to what you suggested or leave ""iff"" and remove ""only"""
"2022-11-11 08:34:32.225524+00","Then we wouldn't get any emails from outside. This setting is meant to allow who can send emails to this email address"
"2022-11-11 08:30:29.964498+00","By creating `Ticket_ticket` as a fragment I can make the `createTicket` mutation payload return a payload that also matches `Ticket_ticket` (by spreading that fragment) and can directly redirect to the ticket view and all information necessary to render the view is already loaded in the Relay store.  The other solution is to manually keep both the `createTicket` mutation payload and the TicketViewQuery in sync, which is really hard to do. Or don't keep it in sync and the store might not have everything necessary to render the Ticket view, so rendering is delayed until the network request for the TicketViewQuery is complete."
"2022-11-11 08:22:31.089264+00","It's more readable in the jsx as the field is a dropdown, where the label is the name of the instance, and the value is the id of the instance."
"2022-11-11 08:54:31.421837+00","I'd rather keep it explicit to 1 or whatever Enum.count returns here. Being explicit is better here and more likely to catch breaking changes"
"2022-11-11 08:55:39.473505+00","Hi @valerybugakov just a thought. Would it be beneficial to target this link to a blank tab (target=""_blank"") instead of replacing the active tab? since user might want to see doc in this context as a reference to ongoing operations on api/console page."
"2022-11-11 09:01:20.546218+00","Please include the whole latest version and not just `uploadedAt`"
"2022-11-11 09:02:54.762839+00","@sheldon-welinga I think it was added as `latestVersion` below you can see it."
"2022-11-11 09:07:33.016486+00","Yeah they are exposed in that link, but that is a non-editable and non-alertable grafana. Our own grafana on `https://equanimity-grafana.fly.dev` does not have host metrics dashboards, whereas our own prod grafana at `https://equanimity-grafana-prod.fly.dev` does have host metrics dashboards. I don't know why this is the case"
"2022-11-11 09:07:34.056585+00","more like `both Fly.io and Appsignal do`. They both collect host metrics while PromEx only collects metrics related to the elixir application"
"2022-11-11 09:07:35.96248+00","I configured a memory usage alert as well in appsignal. I just set it to greater than 80% for now as per what I wrote in this spec. It definitely was easier to do than writing PromQL in grafana. That's partly why I think alerts in appsignal while monitoring for more detailed metrics in Grafana might be a good fit for us, as the metrics appsignal has is rather immature compared to grafana right now"
"2022-11-11 09:07:38.0023+00","I only really enabled this alert for now because it was a suggested alert from Appsignal. I'm not sure we can hit it ever if we already have an alert for normal memory and we just scale everytime"
"2022-11-11 09:12:58.415101+00","We could extract this number into a constant (e.g., `MAX_VISIBLE_ORGS`) to make it more explicit and easier to tweak in the future."
"2022-11-11 09:17:23.225518+00","never mind my second comment -- we need to read it again anyway because last fetched is updated after repo sync.  this way, I feel stronger about not implementing this change because we increase disk pressure (and add disk reading latency) by the factor of 2 in this case."
"2022-11-11 09:22:38.339228+00","Is `useCallback` required here to fix a performance issue? "
"2022-11-11 09:22:38.456419+00","I see that these changes are a copy-paste from the previous version, but I cannot understand the reason for having a `condition({})` statement here. It seems that passing an empty object there instead of the `Context` makes this condition redundant. What do you think?"
"2022-11-11 09:22:38.061529+00","It looks like the return type can be inferred by TS here.  ```suggestion     const collapseMobileSidebar = useCallback(() => setIsMobileExpanded(false), []) ```"
"2022-11-11 09:29:49.762227+00","@gitstart-sourcegraph, I agree. I'll float this idea in our Slack and get back to you after that so we can change it in a follow-up PR."
"2022-11-11 09:34:47.131466+00","Let's create a separate CSS module for the new component."
"2022-11-11 09:42:31.096026+00","We also sync permissions based on repositories, see method [`syncRepoPerms`](https://sourcegraph.com/github.com/sourcegraph/sourcegraph/-/blob/enterprise/cmd/repo-updater/internal/authz/perms_syncer.go?L715)  Should we extend this type to include that as well? E.g. something like: ```suggestion type PermsResults struct { 	repoIDs      []uint32 	userIDs      []uint32 	subRepoPerms map[api.ExternalRepoSpec]*authz.SubRepoPermissions } ```"
"2022-11-11 09:47:16.602526+00","Opted for first option"
"2022-11-11 10:15:20.156531+00","```suggestion ```"
"2022-11-11 10:17:04.128034+00","Oops. I was mutating `updateReq` earlier in the test and then edited it. Forgot to remove this bit after that. 🤦🏽‍♂️"
"2022-11-11 10:17:53.222492+00","Left over after I edited the code around the test. Forgot to fix this. 🤦‍♂️"
"2022-11-11 10:25:35.179264+00","```suggestion ```"
"2022-11-11 10:27:09.111783+00","```suggestion Given the project requirements and decision drivers, Phoenix LiveView is the best option out of ```"
"2022-11-11 10:28:19.692549+00","Done @jonathan-yee "
"2022-11-11 10:34:02.62149+00","Let's loop in @rlopzc as well."
"2022-11-11 10:34:02.632501+00","Should we also consider LiveBook?"
"2022-11-11 10:34:03.392486+00","Let's avoid acronyms."
"2022-11-11 10:36:52.61794+00","we can probably remove this now. the only reason I moved it to alerts was so that shard timeout errors would be retried. now they live in their own other error that will be retried too (and we return before we look at alerts anyway)"
"2022-11-11 10:38:07.949096+00","This Context section sounds like it's missing some context. How did we decide we need to build an app? It sounds like a given here. I might know the answer, but not everyone reading it does.   Community ops do need to approve leaves, but we also know that we'll likely to support other management features, like ... promoting devs, changing roles, etc.  If there are more, they will play an important role in the decision drivers, namely scalability. With that in mind, what other (immediate) requirements can we foresee?  "
"2022-11-11 10:38:27.188029+00","interesting thank you. I'll add this to the oob migration development docs too"
"2022-11-11 10:40:32.312481+00","An unfamiliar reader would want to know - what is LiveView?   And how do these two options address the decision drivers mentioned above? How would we know LiveView is ""simpler"" than a new frontend app? "
"2022-11-11 10:55:29.430138+00","Yep, was going for `iff` here. Should remove the preceding `only`. 👍 "
"2022-11-11 10:58:07.476978+00","Yes, the purpose of the function has changed and I did not rename it"
"2022-11-11 11:03:06.662471+00","I think we can drop this comment. ```suggestion ```"
"2022-11-11 11:03:06.830954+00","jsdoc format: ```suggestion      * Renders the automation success message. ```"
"2022-11-11 11:03:07.905231+00","nitpick: Why don't we rename this to just `allPoints`?"
"2022-11-11 11:03:07.912473+00","Let's just have the comment about merging the points. ```suggestion                 // Merge all the points ```"
"2022-11-11 11:03:06.902489+00","This comment doesn't describe this property accurately. Let's try: ```suggestion      * The list of photo ids that were skipped. ```"
"2022-11-11 11:03:10.471916+00","nitpick:  ```suggestion             // If the user clicked the ""skip"" button, add Photo id to memory ```"
"2022-11-11 11:03:10.46222+00","Still need to fix indentation here."
"2022-11-11 11:17:44.935798+00","> This Context section sounds like it's missing some context. How did we decide we need to build an app? It sounds like a given here. I might know the answer, but not everyone reading it does.  Thanks for the feedback! I'm adding some more context.  > If there are more, they will play an important role in the decision drivers, namely scalability. With that in mind, what other (immediate) requirements can we foresee?  Do you foresee any changes in terms of traffic or amount of data being transferred with the new features? I didn't list scalability as a decision driver since this admin panel won't be accessed by many users or have a high rate of interaction."
"2022-11-11 11:19:48.440114+00","Thanks for the feedback! I'll add more context to the list of considered options"
"2022-11-11 11:26:34.842471+00","Do we need that? Chromatic screenshots are expensive so we generally only enable them for important core components"
"2022-11-11 11:27:31.584648+00","I didn't know about it, glad that you mentioned this! Will remove "
"2022-11-11 11:28:45.882484+00","why remove type?"
"2022-11-11 11:44:23.029332+00","I think it's more about Extensibility rather than Scalability."
"2022-11-11 11:45:02.602825+00","Modules should have a @moduledoc tag."
"2022-11-11 11:45:02.684215+00","Can we just return `map()`"
"2022-11-11 11:45:02.922481+00","Same  here"
"2022-11-11 11:45:03.482568+00","This is supposed to be a wrapper around `get_github_app_creds` "
"2022-11-11 11:56:08.037787+00","Drive by comment: I think a `sg` command, such as `sg cloud sign-site-config` or something, is better than having these scripts lying around in subfolders."
"2022-11-11 11:56:37.706627+00","Okay "
"2022-11-11 11:57:12.496376+00","Is it necessary to wrap the `ctx` again and again with each iteration of the loop?"
"2022-11-11 11:58:31.046152+00","Probably not, I'll prepare a fix"
"2022-11-11 12:01:44.290166+00","Also, I think there's potentially a shadowing issue here since we're changing the value of `ctx` outside of the closure."
"2022-11-11 12:08:01.929298+00","Why do we need this class name added?"
"2022-11-11 12:16:57.219898+00","Oooh thanks, let me clean this up"
"2022-11-11 12:19:15.299705+00","+1  I think we can also consider adding the customer/instance name to the payload that we sign. That way it would be ~impossible~harder to use config from a wrong instance if we also add a check for it on the read path."
"2022-11-11 12:19:15.395319+00","This check is repeated twice. I think we can consider writing a function on the cloud site config, e.g. something like `cloudSiteConfig.SGOperatorAuthDefined()` or similar "
"2022-11-11 12:19:17.521978+00","Is this comment still valid? If yes, can we explain why this mock makes it impossible to run parallel tests?"
"2022-11-11 12:29:42.422044+00","What is this part achieving? I think we are supposed to skip if they are not numbers - You can have a look at the second approach"
"2022-11-11 12:29:42.422132+00","We can use the check that was used in the second function on the attached resource. It is more readable"
"2022-11-11 13:23:04.329321+00","@jonathan-yee the essence of passing this `source` prop is to determine the page where the chart is being used. There is a `page` prop available already but we're not sure of the best way to check that the chart is on the `Relationships page`.  A solution we thought to implement was to get the `path` from the `currentPathInfo` using `deps.router` and check against `Pages.RELATIONSHIPS` and `Pages.RELATIONSHIPS_SNAPSHOT` to determine the page and then store the name in a new class property when the chart loads. But we went with the source prop since it requires just passing the name of the page directly.  Do you think either of the approaches above make sense or you'd prefer another implementation?"
"2022-11-11 12:29:42.48253+00","Removing duplicates is outside the scope of the function. It can be done outside if it is desired."
"2022-11-11 12:29:42.505897+00","We can add some documentation to the function and a link to where we got it from."
"2022-11-11 12:33:19.197561+00","@collinewait  this function is used only in this component so i think so should not be a problem "
"2022-11-11 12:34:40.468267+00","How does app signal access memory metrics?  I was confused between Fly.io, AppSignal and Grafana 😅 "
"2022-11-11 12:50:11.232324+00","I don't see any write to `providerStates` in this method. Do you plan to add it?"
"2022-11-11 12:50:11.309936+00","I think we should extend this check to log a potential error in `providerStates` that could be there even if we do not have `err` returned from the sync. Otherwise we would still potentially swallow a provider error."
"2022-11-11 12:57:09.156683+00","Should we add a log.Debug statement that would give us the provider states even if there is no error? E.g. something like `""All providers succeeded""`?"
"2022-11-11 12:59:55.544652+00","```suggestion      * Renders the automation success message. ```"
"2022-11-11 13:24:25.962913+00","> repoLastFetched's documentation says: > This breaks on file systems that do not record mtime and if Git ever changes this undocumented behavior. >  > Do you think it is a good thing to make this change if we know that it will brake on some file systems?  Overall I'm not too worried about this at the moment because we are currently using the same function to set the last fetched time [here](https://sourcegraph.com/github.com/sourcegraph/sourcegraph/-/blob/cmd/gitserver/server/server.go?L1930-1948) which ultimately writes to the DB. So if this breaks in the future we will have big problems anyway.   Maybe adding a metric to track this and an alert might be a good idea to guard against that scenario in the future though. What do you think about that? "
"2022-11-11 13:36:04.942114+00","I personally pass these things in independently, dont need to instantiate a service if we're not using it. Minor nit though, so w/e"
"2022-11-11 13:36:19.912487+00","Ah im assuming this is related to the stores being internal?"
"2022-11-11 13:44:43.450857+00","so good!"
"2022-11-11 13:44:43.560108+00","I must say that I massively dislike this notation. Not your fault ofc, but I have to cry out loud 😢  Did we ever figure out why the screenreader reads these things so weirdly? "
"2022-11-11 13:53:29.77899+00","Updated in both."
"2022-11-11 13:53:52.760713+00","let's please `logger.info` this and the generated array below for debugging and observability purposes"
"2022-11-11 13:56:14.422471+00","TODO: check if still relevant"
"2022-11-11 13:56:34.986887+00","Passing in the weird repo name is.. weird.  Maybe we can have two versions of `do`? One that takes a repo and another that doesn't?   The one that that doesn't can just pass an empty string to the other.  Also, see the comment above ""do""? Maybe we can remove the ""GET"" param as it's always the same"
"2022-11-11 14:09:00.876378+00","You'll want to add scip-ruby to the array in this sh script as well to keep it up to date."
"2022-11-11 13:56:57.932485+00","TODO: think of a better name and comment"
"2022-11-11 13:57:27.940778+00","Agree. The fake repo-name is more confusing than the previously duplicated code, IMHO"
"2022-11-11 13:58:08.239639+00","TODO: - think of a more efficient way to get the code cell (e.g., know the code cell selector in advance?) - add comment"
"2022-11-11 13:58:29.21881+00","```suggestion         selector: getPermalinkSelector(), ```"
"2022-11-11 13:59:12.192472+00","```suggestion     const permalink = document.querySelector<HTMLAnchorElement>(selector) ``` Handle not existing selector appropriately"
"2022-11-11 14:05:08.380094+00","we cant change this to `!!bookingsToday.length &&` and remove `: null`?"
"2022-11-11 14:05:12.344108+00","I began with an empty string (repo name), but then changed it. I can either pass an empty string to trace attribute, or just in this case remove this attribute altogether.  About ""GET"": I'll remove this input argument 👍🏻  WDYT? @ryanslade @mrnugget "
"2022-11-11 14:19:10.528101+00","I think if the string is missing then don't add it as an attribute"
"2022-11-11 14:21:28.122503+00","@slimsag This might be a problem in particular for cmd/server (as we'll never cleanup certain types of files and we'll fill up the disk).  Before merging I'd suggest that we implement a background routine (in the shared upload handler package) that scans the bucket for things older than some configurable age. We might want to have an additional envvar to disable this in the case that they set up S3 to do it itself when they provisioned it.  Let me know if you want me to whip something up there (can do that in a parallel branch)."
"2022-11-11 14:30:12.513828+00","you already own a lot of things, if you'd like I can take ownership of this one so you don't have to "
"2022-11-11 14:32:12.820897+00","yes, that worked"
"2022-11-11 14:32:40.405119+00","Only because it is a Friday afternoon, I'll give you my coding competition version :P Please ignore, more just fun for me to write.  ```go maxIdx := 0 for i := 1; i < n; i++ {   if fm[i].Score > fm[maxIdx].Score {     maxIdx = i   } }  for maxIdx > 0 {   fm[maxIdx-1], fm[maxIdx] = fm[maxIdx], fm[maxIdx-1]   maxIdx-- } ```"
"2022-11-11 14:32:54.692804+00","@Strum355 do you plan to tackle making the metrics reporters consistent across services the way you think is best?"
"2022-11-11 14:33:57.874603+00","Not sure if youre referencing something more general than Im thinking here, the ones named here should be back with the jobs that theyre related to (where they originally were), while this job should be only for executor push metrics as it was originally"
"2022-11-11 14:34:23.561521+00","I think it would also be good to include something about the number of design attempts and number of reviews. That way users can understand if the first and last values being the same are because there was only one attempt, or because the same users did the first/last reviews/designs"
"2022-11-11 14:34:24.811732+00","I agree it's the #1 source -- and to be honest, we should be fixing it upstream. The root cause isn't retry -- it's the GPU bug. Regardless, I have already turned off filtering for this in Sentry as it's the largest source of errors in the entire company for Sentry. This doesn't mean we won't fix it -- we just haven't actioned on it in months and so it's not a productive to keep as `Error` vs `Warning`."
"2022-11-11 14:35:10.751989+00","Ah so these seem like the only ones that got grouped in too eagerly? Do you plan to do this TODO note after moving the remaining codenav background package stuff?"
"2022-11-11 14:36:12.892479+00","> Ah so these seem like the only ones that got grouped in too eagerly? Do you plan to do this TODO note after moving the remaining codenav background package stuff?  At any stage once this PR has landed on main"
"2022-11-11 14:38:34.635055+00","```suggestion   - '@lrhacker'   - '@philipp-spiess' ```  TY"
"2022-11-11 14:47:57.670719+00","> Even if we find the resolution path that leads from this package to observability-client modules, it won't be possible to use the Typescript project references (that would remove the need to add type-declarations to paths) because the shared package is part of multiple circular import graphs, which are not allowed.  Hm but if we find it and eliminate the resolution path, do we still need to use the TypeScript project references? I’m thinking that ideally the `branded` module does not know anything about `observability-client`."
"2022-11-11 15:15:20.253836+00","Can you also add something here to say that the `repo` is optional?"
"2022-11-11 15:27:28.603677+00","```suggestion   ""enterprise_readiness_for_b2b_saas_straight_out_of_the_box"": ""Enterprise readiness for B2B SaaS, straight out of the box."", ```"
"2022-11-11 15:46:08.032481+00","Yeah, I can combine these in a follow-up PR"
"2022-11-11 15:48:50.123532+00","```suggestion     local jobs = {}     for root in pairs(roots) do       table.insert(jobs, {         steps = {},         root = root,         indexer = indexer,         indexer_args = { ""scip-ruby-autoindex"" },         outfile = outfile,       })     end     return jobs ```  Is there a reason you're registering a new callback here that isn't conditional? You can just return a list of jobs."
"2022-11-11 15:49:00.227473+00","https://github.com/sourcegraph/sourcegraph/pull/44265/files#r1020339976"
"2022-11-11 15:53:58.427415+00","Is it ok to have the default set to `junior` and not `novice`? It seems that `novice` is the lowest value. Please not that I'm not up to date with the spec."
"2022-11-11 17:26:22.412489+00","@limitedmage I've fixed the nested li button problem but I'm still not convinced about `.sr-only` and native checkbox here. I tried to implement this and I've got a few problems: - Our wildcard components (`<Input />` with type `checkbox` or `<Checkbox />`) even with `.sr-only` class render additional elements in the DOM and this breaks our legend scroll box measurements, because of this we start to have a weird small scroll in the legend item container.  - I see that in the diff panel you've used a label element as a container for the radio  input and this might be ok because in your case it was a radio group but label itself isn't focusable and in my case I would have to use tabIndex and fix its style to add a focus ring.   I know that in MDN clearly suggests to use native input element but I truly believe that in this particular case it's ok to use `aria-checked`, It doesn't have any disadvantages from a11y perspective and keyboard navigation and this helps a lot to deal with legend item UI codebase.   Overall, I think I like the current structure (I was a bit afraid that nested groups will look like to much for this case but it seems ok) And this structure also will help me in [this PR](https://github.com/sourcegraph/sourcegraph/pull/43842) about adding additional UI inside of legend item block.   <img width=""516"" alt=""Screenshot 2022-11-11 at 14 10 15"" src=""https://user-images.githubusercontent.com/18492575/201393641-6963f96d-ee5a-497c-aeab-4f97fcc68b42.png"">  "
"2022-11-11 16:17:09.236628+00","The linter didn't like my solution either :-)"
"2022-11-11 16:18:09.827533+00","so, this would be an absolutely insane edge case if two people with the same name had the same created_at time, but can we make these IDs instead of names just to make our data completely edge-case-proof?"
"2022-11-11 16:24:23.012492+00","Better to err on the side of caution! Will do"
"2022-11-11 16:30:32.629661+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion             , COALESCE(                 identifier__kustomer_user_id , identifier__playvox_user_id , identifier__dialpad_user_id , identifier__paylocity_id             ) ASC ``` "
"2022-11-11 16:32:00.579968+00","It wasn't obvious what the return value was meant to be -- the other files seem to be returning empty lists/tables in a bunch of places."
"2022-11-11 16:43:38.895185+00","beautiful code. nice"
"2022-11-11 17:23:05.502351+00","@collinewait  if any of the value is alphabet we assign in the array which gets validated on the validateFuncation so that's why i pushed it on the array"
"2022-11-11 16:44:49.45651+00","Looks like you accidentally copied this from above!"
"2022-11-11 16:49:47.930044+00","Yep, totally right about this. I will handle this in the other PR: https://github.com/immunefi-team/bugs/pull/1105."
"2022-11-11 16:55:25.282481+00","It's true that we checked that the user can indeed delete this pendingVault in the access control. Still, this line is a great opportunity to add in some defensive programming. In this case we can also pass the `projectId`."
"2022-11-11 16:56:32.492489+00","Ooops. Nevermind. `delete` only accepts `unique` input args. `projectId` isn't unique so it isn't valid here. "
"2022-11-11 17:06:48.208762+00","@jonathan-yee Just to reiterate, this call does not update the stats. It only gets the histogram data. The stats comes from the measurements model set by the main ES query for the manual measurements. The stats already have the calculated bucket size which then helps us to get the histogram data here. "
"2022-11-11 17:14:38.436206+00","This method renders the stats that comes from the measurements model for avg and std.deviation. So why we need to remove this since the data is already available here?"
"2022-11-11 17:15:29.43425+00","All migrations have to be idempotent so that they can run multiple times if necessary. For your migration here that means:  ```suggestion ALTER TABLE gitserver_repos DROP COLUMN IF EXISTS repo_status; ```  If it now runs the second time, it would just see the column is already gone and all will be fine."
"2022-11-11 17:15:29.474799+00","```suggestion ```  This is just informational for the editor, but doesn't need to be part of the final migration."
"2022-11-11 17:15:30.684314+00","Same comment as below, can you guess how this migration would be idempotent? :) "
"2022-11-11 17:24:29.207426+00","Both prs are updated now 🙌 "
"2022-11-11 17:31:31.322474+00","```suggestion             if (e.key === ""b"" && (e.ctrlKey || e.metaKey)) { ``` add support for mac"
"2022-11-11 17:31:31.262919+00","here too"
"2022-11-11 17:31:32.041877+00","here too"
"2022-11-11 17:33:53.27169+00","Ahh I see, yes, we've seen issues with `sr-only` breaking scrolling in certain cases. Thanks for the explanation and reasoning, let's go with your implementation here."
"2022-11-11 17:47:55.761218+00","Doesn't the `fill` transition need to be applied to the `path` element? 🤔 "
"2022-11-11 17:36:34.441245+00","literally just got back from the bodega before reviewing this  love the file names"
"2022-11-11 17:36:34.731342+00","there are a lot of inline styles throughout this component - may make sense to pull them out into a `useStyles`"
"2022-11-11 17:36:34.777005+00","this component is also really big and complex - may want to consider refactoring / breaking it down into smaller components"
"2022-11-11 17:36:34.834491+00","i think it's still `data` because there's multiple properties within it? either way i like to see the word `datum` in use lmao"
"2022-11-11 17:37:27.382487+00","sorry I left these comments before turning off whitespace but sentiment still stands, maybe fix in another PR"
"2022-11-11 17:39:22.555311+00","I have it on my list to break it down in the next two weeks as we need to share it with the patients tab. going to hold off on making styling changes at the moment, because breaking it down will cause a lot of refactoring in general"
"2022-11-11 17:40:47.190128+00","suggestion: you can use the existing utility instead of adding a new class.  ```suggestion                     <div className={classNames('text-muted text-center mt-3 mr-2 pr-2 border-right')}>Search millions of open source repositories</div> ```"
"2022-11-11 17:47:55.59249+00","Could move the `localeOptions` to a constant that could be re-used in lines 1238, 1241, 1245 and 1250?"
"2022-11-11 17:50:25.911608+00","Understood, but these changes should be saved for [WEB-2095](https://instrumental-inc.atlassian.net/browse/WEB-2095). For now all we need to do is route away from this method (i.e. never call `updateMetricsDistributionData`). This is scope creep for this story. As such, we should review any changes to these associated methods during the review for WEB-2095."
"2022-11-11 17:51:59.583633+00","I guess it's not really needed here since this sidebar is simple. "
"2022-11-11 17:58:22.514115+00","Looks like `condition` is not being used at all for this sidebar so I've removed it."
"2022-11-11 18:02:59.041499+00","this won't be shown in checkout / chairside right?"
"2022-11-11 18:04:25.012476+00","yeah it requires display rules to show up on the extras screen, this is ops portal only"
"2022-11-11 19:40:33.871588+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     , SUM(         (COALESCE(order_tasks.task_closeout_event__waxupreview_rejected::INT, 1) = 0)::INT     ) AS reviews__waxup_review_approvals ``` "
"2022-11-11 18:07:45.558666+00","This may be more of a clarification question than anything else.   I've been taking time to read through the basrat gitbook typescript deep dive suggested in the FE Readme.  One of the sections focuses on [using null vs undefined](https://basarat.gitbook.io/typescript/recap/null-undefined).  I see that for the input arg val is undefined in one function, and null in the other, if it isn't provided (at least, that is what I understand the "" | null"" and "" | undefined"" to mean).  Is there any particular reason for the different approaches?  From what I get from the Null vs Undefined reading, I would have guessed that we would want to use undefined - the input arg should be available, but not initialized if the user doesn't provide an argument.  Either way, for checking for null or undefined, it looks like null == undefined, undefined == undefined, and null == null will all return true.  So when checking the input args, would it be better to use val == null (or val == undefined) as a standard?  As far as this._selectedRange, is this a root level thing?    I think one thing I don't understand is what is considered root level?  Is a private member of a class considered root level?  Either way, I see we use === null in the private method, and typeof ... === 'undefined' in the other method.  Wouldn't we want to use the same check for either one?  If it isn't a root level item, maybe we could stick with == null, since that would work for both null & and undefined variables.  Again, I realize this is a little in the weeds - as best as I can tell, on stage, this change seems to be working as described in the story.  Outside of this question, I think everything looks great."
"2022-11-11 18:13:06.618546+00","`updateMetricsDistributionStats` is only called from `updateMetricsDistributionCharts`. For this story we should focus on the scope defined for just the cards' info and wall off everything else. Included in items behind this wall should be updating any methods related to distribution charts, which will be tackled in [WEB-2095](https://instrumental-inc.atlassian.net/browse/WEB-2095). What should be done is prevent a call to `updateMetricsDistributionCharts`.  We have two options here:  1. We already have the stats when we make [this call](https://github.com/dfxmachina/frontend/pull/2593/files#diff-f69cc52fa517f6831d248eb7121c8fb56178fba0fc56329efcb245142165e85eR182), and so why not just render it directly [here](https://github.com/dfxmachina/frontend/blob/master/app/modules/metrics/metric-card.tsx#L394-L401) by doing something like `dataType === [physical measurement type] ? [pass it average] : -`. The reason stats are updated the way they are is because for data stream metrics (only) we need to make the stats call later as all of our metrics data comes from the backend and not ES. This reasoning does not apply to physical measurements 2. Wait for JB's work to make `updateMetricsDistributionCharts` viable for physical measurements and potentially get rendering for free. In this case, it would be best to leave a note on JB's JIRA story  Reasons for avoiding scope creep here: 1. As JB implements getting data for distribution charts and rendering them, he may see a way that makes the most sense but does not actually fit with what we have changed in this PR so far. As such, there could then be a chance he would then be refactoring changes that were made in this PR right after they have been added. 2. As a reviewer, we would be reviewing changes outside of the defined parameters of the story. These means two things, we then are reviewing two different items instead of focusing on one which means a larger number of line changes to review and long reviews/cycles. This then means we have longer time to feedback and will potentially block others who need the work set out by this PR. As a rule of thumb, 100-200 lines of change is a reasonably nice size for line changes. Most of our story descriptions typically fit inside that number with the exceptions of es query PRS and (sometimes) chart implementations. 3. Scope creep can sometimes lead to half finished features. For example, it could have been the case that we made the method for getting distribution data viable for physical measurements but didn't render the chart (please do not take this literally as it may not be the case that this happened). In that case we would have half finished features that the next developer would be picking up. This would be a great opportunity for items to be missed and bugs to get introduced as it would be two different developers working on what should have been one feature/PR."
"2022-11-11 18:14:37.704539+00","Let's do this at the `_bulk-measure.scss` level instead since `Perpendicular` is used in other places outside of the bulk measure modal and as such said places might have different styling needs."
"2022-11-11 18:14:37.82654+00","Nitpick: does it make a difference if we do this here or closer to lines 356-359 where we seem to be reseting similar things?"
"2022-11-11 18:18:09.837707+00","✅  Thank you, @limitedmage!"
"2022-11-11 18:18:37.76844+00","That's a good question!  Throughout the lifecycle of this component, `this._selectedRange` will start as `undefined`, but then potentially be `null` or `[number, number]`. Here, `null` is significant because of how D3 brush encodes range that contain no data points. So basically, I am tayloring this code to match the D3 brush's behavior.  So, this particular line is an optimization to prevent the component performing unnecessary side-effects (e.g. hiding an already-hidden tooltip) if trying to replace `null` with `null`.  But you bring up a valid point that `this._selectedRange` should be match its typing and only exist as `null | [number, number]` (and try to exclude `undefined)`. The TS compiler for this project is not as strict and allows any variable to be potentially `undefined` [because the strictNullCheck option is turned off](https://www.typescriptlang.org/tsconfig#strictNullChecks) and the strictPropertyInitialization rule as well"
"2022-11-11 18:26:28.802488+00","I added a commit to initialize `this._selectedRange` as `null`, to add another small optimization.  Btw, this optimization was not that useful before, but now _every_ open control chart will be attempting to hide its tooltips whenever a specific control chart begins a selection (and, at most, one other Control Chart will actually need to hide a tooltip)"
"2022-11-11 18:27:19.557218+00","I'm using variables to avoid code repetition"
"2022-11-11 18:27:20.05844+00","I'm using day.js because moment.js doesn't support separate imports. The day.js doesn't either, but it is much lighter than the moment"
"2022-11-11 18:27:21.582495+00","In the issue description, the client talks about timestamp strings. But the dayjs function only works with numbers. It also mentions the Date timestamp, it is also a number. Should we really allow strings and convert them to numbers?"
"2022-11-11 19:17:04.021502+00","@johnmastro want to make sure this is ok"
"2022-11-11 19:31:17.153938+00","to make sure I understand: a sequence may be *longer* than the number of points needed to trigger, but only one point will be an alert point?"
"2022-11-11 19:31:41.752684+00","Ohh got it! Nice!"
"2022-11-11 19:32:18.337103+00","should this comment also mention the shift trigger?"
"2022-11-11 19:39:06.493655+00","It looks like this helper's `tickIndex` parameter is no longer used, should we drop it and update its call sites?"
"2022-11-11 19:39:06.671553+00","Is there a reason why we're not making a straight copy from the original method implementation with regards to this method's signature? This still feels like it can fit into a single line plus, even though not a big deal, the return type was dropped."
"2022-11-11 19:39:07.289946+00","This feels like it can fit into a single line?  Same applies below in other similar places."
"2022-11-11 19:39:07.515796+00","Couple things about this doc block: * It's missing punctuation on description and each parameters' description. * It's stating that it's removing overlapping ticks but this method's name and logic is hiding them instead * There's no need to explicitly reference types in parameter's descriptions since we can get information about those from the method's signature; and if they ever change there's a change that we might end up forgetting to update the parameter's description * If we want to make it clear that this method hides overlapping ticks on the x-axis I'd suggest we change its name too to better reflect that  Based on the above here's what I'd suggest: ```ts /**  * Hides overlapping x-axis ticks.  *  * @param ticks Tick elements.  * @param padding Padding between tick elements.  */ export function hideOverlappingXAxisTicks(ticks: Array<SVGGElement>, padding = 10): void ```"
"2022-11-11 19:40:31.405441+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion ``` "
"2022-11-11 19:45:48.622474+00","need to revise the name/approach here lol @efritz "
"2022-11-11 19:51:35.142476+00","Pub McPubFace."
"2022-11-11 19:57:32.670694+00","fix/remove?"
"2022-11-11 20:05:36.102975+00","can you pass the generic worker.Record interface here instead so we don't need to import from codeintel in here? "
"2022-11-11 20:05:36.123963+00","can we get this back?"
"2022-11-11 20:05:36.160754+00","```suggestion ```"
"2022-11-11 20:05:37.046604+00","can we reinstate this?"
"2022-11-11 20:05:38.104719+00","why is that interface required? "
"2022-11-11 20:05:39.254861+00","why can't we use queueOptions.name like before? Now the name ist stored both in the map and on the QueueOptions object, which could lead to mismatches of the two values"
"2022-11-11 20:06:20.28559+00","we should just increase this width, subtracting 5 on the typography is a bandaid that will break if copy ever changes"
"2022-11-11 20:07:57.162859+00","Discussed it offline with Jonathan. This will be solved in the other ticket once this edge case gets discussed with Nic. More updates to come. Will update information accordingly in [WEB-2155](https://instrumental-inc.atlassian.net/browse/WEB-2155)"
"2022-11-11 20:08:51.05416+00","Because the constructs here were used [here](https://github.com/sourcegraph/sourcegraph/pull/44294/files#diff-ef0bd2d6bf4a501c46ace5df83b56a55ce1042dc3a7edf5719cdb4378de41a9fL34-L37) before, but we cant have `QueueOptions[SomeCodeIntelType]` and `QueueOptions[SomeBatchesType]` in the same slice, so this works around that problem (see the green/new side of that file)"
"2022-11-11 20:09:13.584162+00","yep, just realised that thats possible lol"
"2022-11-11 20:10:15.21259+00","ah I see, can we remove the Name field from the queueOptions then so it's not in two places? (I previously moved from map to slice and then added that field :D)"
"2022-11-11 20:10:23.623387+00","nit: You could use `some` like  ``` const needs_attachments_upper = report.attachments.some(a => a.toothNum < 30) ```  which reads a bit nicer I think!"
"2022-11-11 20:10:30.022479+00","I find this a bit hard to follow. I was wondering if we can have a case where an attachment starts at a later step? In this case it reads to me like we possibly return `true` with `needs_attachment_lower` set to `true` for step `0` even if the attachment comes later? I don't know if I explained this well but was just trying to understand this and it wasn't clear to me."
"2022-11-11 20:12:57.877969+00","_technically_ it is still using `QueueOptions.Name` https://github.com/sourcegraph/sourcegraph/pull/44294/files#diff-ef0bd2d6bf4a501c46ace5df83b56a55ce1042dc3a7edf5719cdb4378de41a9fR41-R42, but yea its additionally stored in the map now. I think theres a solution for this, standby"
"2022-11-11 20:15:58.355042+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion         , FIRST_VALUE(subsequent_pursuit_id)         IGNORE NULLS OVER (             PARTITION BY                 first_event_id_in_this_seeding             ORDER BY timestamp ASC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW         ) AS subsequent_pursuit_id ``` "
"2022-11-11 20:20:58.349879+00","[`a98c7bd` (#44294)](https://github.com/sourcegraph/sourcegraph/pull/44294/commits/a98c7bd715833f8fd2907dea399587f465c54134)"
"2022-11-11 20:21:06.632478+00","[`a98c7bd` (#44294)](https://github.com/sourcegraph/sourcegraph/pull/44294/commits/a98c7bd715833f8fd2907dea399587f465c54134)"
"2022-11-11 20:23:06.560345+00","Cool Thx!"
"2022-11-11 20:24:42.552477+00","Yes. Originally, this condition was looser as  ``` const isAlertPoint = sequenceCounts.get(sequenceId) >= numberOfPoints; ```  But in a PR review (can't find it ATM), Isaac made a comment that made me change it to the current, stricter, condition. I believe that the idea was if we had a bunch of ""!"" icons, it would make the chart messier.  Thus, only the first bucket that would result in an alert email is shown on the chart (even if emails would continue to be sent)"
"2022-11-11 20:42:04.639854+00","Sounds, good. I moved this one over to you and aligned the date with the design task flow model"
"2022-11-11 20:43:10.396681+00","Update these (and in monitoring)"
"2022-11-11 20:49:42.292489+00","Note!"
"2022-11-11 20:50:01.095118+00","Rename these to fit new service"
"2022-11-11 21:14:08.809908+00","This is how it looks after ac65b21.  <img width=""1712"" alt=""Screenshot 2022-11-11 at 1 08 20 PM"" src=""https://user-images.githubusercontent.com/43425812/201431587-5ed5f118-90cb-4620-b20f-57b8e921fb72.png"">"
"2022-11-11 21:14:22.667895+00","```suggestion                     <em>{measurementName}</em> automation has been saved successfully. ```"
"2022-11-11 21:14:22.978121+00","```suggestion     ): Promise<APICreateAutomeasureMonitorsResponse> { ```"
"2022-11-11 21:14:24.302633+00","```suggestion                 ].flat();                  // Get the minimum and maximum points that contains all training samples                 const minMaxPoints = allPoints.reduce((acc, point) => {                     if (acc.minX > point.xPx) acc.minX = point.xPx;                     if (acc.minY > point.yPx) acc.minY = point.yPx;                     if (acc.maxX > point.xPx) acc.maxX = point.xPx;                     if (acc.maxY > point.yPx) acc.maxY = point.yPx;                     return acc;                 }, { minX: Infinity, minY: Infinity, maxX: -Infinity, maxY: -Infinity }); ```"
"2022-11-11 21:14:24.316117+00","Again, `points[0].measId` is the ID of the photo measurement the point was placed on. What we need instead is the IDs of the `ImageFeatureMeasurement`s that are returned from the `api.saveImageFeatureMeasurements` on lines 321-323."
"2022-11-11 22:30:25.838745+00","Let's replace the hardcoded string before merging."
"2022-11-11 21:10:20.47895+00","I know, I absolutely hate this, too. 😞 No, I didn't. I was trying to remember/relocate when this had come up before and couldn't find the conversation (I'm guessing lost to Slack's retention period). I spent some time trying to research this yesterday and really couldn't find anything about it online (though, admittedly, it's hard to search for). All I know so far is:  - It only impacts readouts for elements rendered as multiple distinct static text elements within a `<main />`, e.g. ""0"" and "" open"" in this example:   <img width=""135"" alt=""image"" src=""https://user-images.githubusercontent.com/8942601/201425360-01138116-223f-4f14-956d-5ab001ad356e.png""> 	- This also means the same text sounds different when read out from a component's Storybook story (where there's no `<main />`) vs. where it's actually used in a running app. 🙄 - I can reproduce it in a minimal React [codesandbox](https://codesandbox.io/s/reverent-snowflake-79t9q2?file=/src/App.tsx). - I can't seem to force it to happen on another site, like GitHub, by purely manipulating the DOM. - There are no obvious CSS differences between the `main`s. - The accessibility tree generated for the text nodes looks the same across the three scenarios:   <img width=""201"" alt=""image"" src=""https://user-images.githubusercontent.com/8942601/201426351-41c7c938-ad0b-44c6-8588-55e525bd77b1.png"">  I don't enough about know how MacOS Voiceover goes from DOM -> readout to know what else to look for here. :/ "
"2022-11-11 22:21:38.97521+00","yep!"
"2022-11-11 22:21:39.022488+00","why not do `_.isEqual(...)` here like you did on the frontend?"
"2022-11-11 22:21:39.212502+00","but is this reversed, should it be `!actor?.staff?.roles.includes(StaffRole.admin)`"
"2022-11-11 22:21:39.982678+00","i might just be getting thrown off by the name, but are doctors always considered admins?"
"2022-11-11 22:30:25.454959+00","Won't this include all measurements that have *either* a subscription label or are above threshold?  I'd expect this to take into account measurements that have a subscription label, are above threshold, are not hidden and have not been flagged by users as not useful; which is what I believe the [example](https://github.com/dfxmachina/frontend/blob/master/app/modules/subscriptions/es-queries.ts#L74-L149) that Isaac pointed out is doing."
"2022-11-11 22:30:25.656539+00","`List of subscriptions to aid in failure calculations.`"
"2022-11-11 22:30:25.727819+00","Indentation seems to be off here."
"2022-11-11 22:30:27.214239+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion                     WHEN event_unit_type = 'Aligners' THEN 'Aligner'                     ELSE event_unit_type END AS unit_type ``` "
"2022-11-11 22:30:27.338801+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion                     WHEN event_unit_type = 'Aligners' THEN 'Aligner'                     ELSE event_unit_type END AS unit_type ``` "
"2022-11-11 22:35:28.984228+00","I thought returning means they're valid, no? "
"2022-11-11 22:38:23.910225+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion                     WHEN event_unit_type = 'Aligners' THEN 'Aligner'                     ELSE event_unit_type END AS unit_type ``` "
"2022-11-11 22:41:30.204754+00","temporarily yes, we noticed that there are some portals where the user that logs in is not the same as the doctor profile, so the doctor user that gets created would not be the same admin user, and we want to allow the doctor to still be able to create/invite other staff members; right now the doctor preferences model only takes a single role and not multiple, so we'll be changing that as a fast follow to also allow multiple roles on the pref model so a doctor can be both, and once that happens we'll change this so that only admins are admins"
"2022-11-11 22:42:16.452508+00","ah, essentially `staffMember.roles.includes` should pretty much do the same thing here because of how the migration works, but `_.isEqual` is probably cleaner so will update this 👍 "
"2022-11-11 23:02:52.949475+00","d'oh, you're right, i was confused"
"2022-11-11 23:03:09.142482+00","makes sense, thanks!"
"2022-11-11 23:12:38.508198+00","`{' '}` is not needed here. Spaces are preserved when the text is on the same line:  ```tsx <span>A</span> B // outputs: <span>A</span> B  <span>A</span> B // outputs: <span>A</span>B ```"
"2022-11-11 23:12:39.415434+00","Curly braces should match indent level:  ```suggestion                 async (batch) => {                     return (await api.saveImageFeatureMeasurements({ toSave: batch })).successes;                 },                 'parallel'             ); ```"
"2022-11-11 23:24:46.227644+00","From what I understood from our last chat with the product team, we might list more than 25 five whitehats. So it might be better not to use `top25` as a value on this enum.  Maybe you would like to use`top_whitehat_leaderboard` instead of `top25 ."
"2022-11-11 23:31:19.942508+00","Just a heads up that this query won't return any user with a paid report count of zero, since the where condition won't allow that. So the following condition will never be met:  ``` WHEN count(r) = 0 THEN 'novice'::public.""WhitehatLevel"" ```  No action is required. :)"
"2022-11-11 23:38:13.622468+00","A long time ago, the events table didn't exist, so there are a few reports in the `paid` status that will be dismissed.  i.e.: `#3`, `#4`, `#6.`  Maybe you would like to remove the following conditions:  ```SQL AND ra.""paidHackerAmount""   IS NOT NULL AND ra.""paidHackerCurrency"" IS NOT NULL AND EXISTS (     SELECT * FROM ""Event"" e WHERE e.""reportId"" = r.id AND e.""type"" = 'status_updated' AND e.""content"" ->> 'to' = 'paid' ) ```"
"2022-11-11 23:38:47.55248+00","Not a big deal, but the `ORDER BY r.""userId"" asc` is not required."
"2022-11-12 00:33:04.409183+00","Instead of rendering this with `display:none`, let's not render it at all if the date is before the `displayUntil`."
"2022-11-12 00:33:05.442492+00","suggestion/questions on this CSS: - Remove comments.  - Does this work in other browsers like Firefox and Safari? - Are we using the gradient colors anywhere else? Can we move them to `colors.scss`?"
"2022-11-12 00:33:06.330793+00","I recommend mocking the date on the Storybook tests to prevent this from causing a visual test failure when this date arrives."
"2022-11-12 00:36:06.467824+00","I think that the `updateWhitehatLevel` function is not doing what you're expecting.  I think that your intention is to trigger the calculation of the whitehat level since we might be storing the amount paid to the whitehat.  The problem is that the `updateWhitehatLevel` function will only consider reports with the status updated event older than two weeks ago, so if an account manager updates the report annotations before those two weeks, the report won't be included in the calculation.  My suggestion is to remove this statement from this controller and only perform the calculation on the update-status controller."
"2022-11-12 00:39:57.132778+00","Should we add the ""open in new tab"" icon to the link?"
"2022-11-12 00:40:43.016502+00","What would be the difference between calling this function directly and consuming Prisma API?  I do not see a benefit from it."
"2022-11-12 00:43:41.791431+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion , output AS (     SELECT * FROM marketing_channel_targets     UNION ALL     SELECT * FROM sales_channel_targets ``` "
"2022-11-12 00:43:42.641831+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion WITH marketing_channel_targets AS (     SELECT         budget_month ``` "
"2022-11-12 00:46:18.697559+00","I think that this function is not doing what you're expecting.  The `updateWhitehatLevel` function it's filtering out the reports without a status updated event older than two weeks. So, the current report won't be included in the paid reports count, since its status just has changed.  The two weeks rule applies to the whitehat leaderboard, but I wasn't able to find on the spec the two weeks requirement. Where did you get that rule? "
"2022-11-12 00:49:13.439897+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     FROM         {{ source('google_sheets','marketing_targets_by_sales_channel') }} ``` "
"2022-11-12 00:49:14.270638+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion SELECT * FROM output ``` "
"2022-11-12 00:49:15.111607+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion     FROM         {{ source('google_sheets','marketing_targets') }} ``` "
"2022-11-12 00:49:15.957673+00","**[sqlfluff-fix]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br> ```suggestion , sales_channel_targets AS (     SELECT         budget_month ``` "
"2022-11-12 00:49:20.81131+00","**This seems to be a very dangerous function.** For each entry on the whitehat leaderboard, we will perform an `UPDATE` statement, so that would be ~400 `UPDATE` statements at the same time.  That would definitively exhaust the database connections, and possibly cause an outage.  The following code will execute sequentially the `UPDATE`  statements **(which is still not ideal),** but it will only consume a single database connection:   ```suggestion     let ranking = 1;      for (const datum of dataset) {         await prisma.user.update({             where: {                 id: datum.userId,             },             data: {                 whitehatLevel: getWhitehatLevel(data.validReportsCount, ranking);             }         })          ranking++;     }    ```"
"2022-11-12 00:49:44.823854+00","This operation seems to be expensive. I think that we could simplify a lot the calculations if we;  - Update the reports from all the users ranked in the top places of the leaderboard with a simple `updateMany` statement. - Then, with another query, we find the users that were ranked out from the whitehat leaderboard top ranks and individually handle those calculations. "
"2022-11-12 00:51:14.597212+00","It's possible to get the expected results with a single query. 🤓   If you want, we can pair on it. No action is required."
"2022-11-12 01:01:10.842477+00","Good questions. I've added a Big Fat Comment to explain what's going on. Basically we always design cases such that attachments start at the beginning of the treatment, and if we ever tried starting them in the middle it'd break our code in a variety of places, not just here."
"2022-11-12 02:49:00.530822+00","Sorry if I was unclear about the details of how this should work. The ❗ point is not actually intended to show when an alert was / would be sent out - if that was the case, we would keep the behavior of showing the ❗ for every point in a sequence after the trigger's minimum number of points (`sequenceCounts.get(sequenceId) >= numberOfPoints`). Instead, the ❗ should always be the last point in a sequence. The intuition is that from the perspective of a user who is just looking at a chart, they may not be receiving alerts for that chart and don't have any indication of the trigger rules (at least, not without hovering); they just see a whole sequence of red points as a phenomenon of interest. So it's not obvious why a point in the middle of a sequence would be highlighted, whereas a highlighted point at the end seems like a reasonable way to say ""hey, look at what happened leading up to this event.""  This implies three changes:  1. The condition for which point should get a big ❗ should be something like this (untested):  ```ts function sequenceIdsForPoint(mesVal): Array<string> {     return mesVal.metadata.sequenceIdsByTrigger?.flatMap(({ sequenceIds }) => sequenceIds) ?? []; } const sequenceIdsForCurrentPoint = sequenceIdsForPoint(mesVal); const sequenceIdsForNextPoint = sequenceIdsForPoint(mesData.values[index + 1]); const isAlertPoint = (sequenceIdsForCurrentPoint.length && !mesData.values[index + 1]) ||     !sequenceIdsForCurrentPoint.every((id) => sequenceIdsForNextPoint.includes(id)); ```  Here's an example given a 6-point trend trigger:  | Index: | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | | ------ | - | - | - | - | - | - | - | - | - | - | - | - | | Value: | 5 | 5 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | | 4 | | Visual: | . | . | r | r | r | r | r | r | r | ! | | . |  Key: . = normal, non-highlighted point r = small red point ! = big red point  In the `BT_RX_BDR_BER_DH0_2404` [example](https://app-stage.instrumental.ai/branches/jb-triggers-seq-id/metrics?project=control-charts-and-spc-alerts-testing&filters=&name=BT_RX_BDR_BER_DH0_2404):  <img width=""1449"" alt=""image"" src=""https://user-images.githubusercontent.com/203177/201452014-4a217e62-5463-47f0-b50b-c0350e8a0201.png"">  2. The trigger explanations like ""9 points in a row on one side of the centerline"" should actually say ""9+ points in a row on one side of the centerline"" (note the plus sign) since the trigger may have identified more than the minimum number of points. 3. [should] Ideally, when hovering over a point in a sequence, the other points that have any of the same sequence IDs as the hovered point should also get the hover state.  At this point, we can address these items as a separate story. I filed WEB-2256 to track this."
"2022-11-12 03:37:04.752525+00","Yes, it should not know anything about it. We have many circular imports between packages, making it hard to analyze this structure and find specific resolution paths. We definitely should do it, but I'd love to have a plan first to ensure we won't regress after fixing the resolution graph."
"2022-11-12 03:47:07.773838+00","I don't think we should filter on the active build because it would be confusing if you added a filter at the top of the page for a different build and it showed no data."
"2022-11-12 03:47:07.775334+00","Nitpick - it seems to be most common in software to capitalize as `buildKpiQuery` (treating the KPI acronym as a word on its own). Personally, I prefer `buildKPIQuery` so this codebase probably features more examples like that. Some prior art includes: `appendUTMParams`, `getEDITree`, `simplifyDPStep`, `createPDFTextElement`, `prepareAPIResults`...  However you treat acronyms, though, the Q in ""query"" should be capitalized."
"2022-11-12 03:47:07.787887+00","No, but it is true that this is missing the checks for the measurement not having a below-threshold user-created label for each subscription. Since this is a yield calculation, it also needs to check that the label's `.source` is `SearchUnitSubscriptionLabelSource.AUTOMATED_REVIEW`."
"2022-11-12 03:47:07.874316+00","This simplifies to:  ```suggestion                                         query: {                                             term: {                                                 'externalInspections.measurements.isWithinLimits': false,                                             },                                         }, ```"
"2022-11-12 03:47:08.752435+00","Just to build some intuition here, there are a lot of different kinds of image monitors (aka subscriptions). Here are the most common things to have to think about: - Monitors can be either public (visible to all users in the project) or private (visible only to the creator and SITE_ADMINs) depending on their `.visibility` - Monitors can be ""data quality monitors,"" meaning any photo they flag gets marked as `HIDDEN`, depending on the value of `.hideMatchingImages` - Monitors can have one of many different `.status`es. Notably, a monitor can be `PERMANENTLY_ARCHIVED`, in which case it will stop evaluating new photos and it will be hidden by default (though still accessible) on the Monitor page - Monitors can be ""Region Registry monitors"" (an internal tool for the ML team) if one of its `.labels` has a certain structure - Monitors can either run on Instrumental stations or in the cloud depending on their `.rtdStatus`. The term ""intercept"" (as a noun) refers to monitors whose `rtdStatus === true` - Technically, Auto Measure Monitors are also monitors, although we work with them using separate API endpoints  There are some relationships between these attributes. For example, if `rtdStatus === true` you can assume that `visibility` is public and the monitor is not a data quality monitor or a region registry monitor or archived. Another example is that region registry monitors are always private, always archived, and are never intercepts or data quality monitors.  In this case, we are interested in using these monitors to calculate Yield, so we are only interested in public, non-data-quality monitors. Note that only units flagged by a monitor on-station count as a failure against yield, but we have to check this at the label level; we can't just query against currently active intercepts because monitors can run on-station for awhile and then be turned off."
"2022-11-12 03:47:09.644459+00","We can simplify this using `lastMeasured` instead of inspection timestamps. The `lastMeasured` field is the timestamp of the most recent inspection (either internal or external). It would be preferable to use inspection timestamps if we wanted to include units with any inspection in the date range instead of units whose most recent inspection is in the date range. In this case, since we're defaulting to the most recent data anyway, we don't have to worry much about whether to include units with measurements that are newer than the date range.  Note that due to https://github.com/dfxmachina/dfxmachina/pull/2988 not all units in stage/prod will have the `lastMeasured` property until WEB-2143 is complete.  ```suggestion                 filter: {                     range: {                         'lastMeasured': {                             gte: timePeriod.from.toISOString(),                             lt: timePeriod.to.toISOString(),                         },                     },                 }, ```"
"2022-11-12 05:03:28.248755+00","This is the same:  ```suggestion         to: new Date(), ```  Also note that this is only going to get set once, when the page first loads. I think we want these dates to update every time the page loads, so we should set the values in the `load` method."
"2022-11-12 05:03:28.313795+00","Personally I have mixed feelings about this, but JB would probably say to use `Utils.durationInMillis.ONE_DAY` instead of `1000 * 60 * 60 * 24` 🙂"
"2022-11-12 05:03:29.057008+00","`toFixed()` produces a string, so calling `toLocaleString()` on it just prints the string. You want this instead:  ```ts value.toLocaleString(undefined, { minimumFractionDigits: 1, maximumFractionDigits: 1, signDisplay: 'negative' }) ```  (this also applies to other uses of toFixed elsewhere in this PR)"
"2022-11-12 05:03:29.147482+00","Any time you interpolate a value into a selector, wrap it in `CSS.escape()` or use the `Utils.selector` template string tag to avoid potentially inserting a user-provided value. If the value is user-supplied and not escaped, it may not be a valid selector, which would throw an error; or, worst case, it could cause a security vulnerability. It doesn't really matter here because the ID will always be hardcoded but it's a good practice to get into.  You may have seen other places in the codebase where we don't do this, primarily on the Correlations (aka Relationships) page. This is because we wrote the page specifically to use numeric IDs. But we try to do it everywhere where it's not clear if the interpolated value could be supplied by a user."
"2022-11-12 05:03:31.083652+00","Why store subscriptions in a map if you're only ever going to use them in an array?"
"2022-11-12 05:03:31.106037+00","You can write this more simply:  ```suggestion                 filter: [                     {                         term: {                             'build.name.raw': 'PVT',                         },                     },                     filterQuery, ```"
"2022-11-12 05:03:31.202698+00","I mentioned in https://github.com/dfxmachina/frontend/pull/2609/files#r1020663193 which types of monitors we want to filter out:  `private`, `data-quality`, and `in-ml-registry`. (`archived` is fine - archived monitors may have intercepted units before they were archived.)"
"2022-11-12 05:03:31.126805+00","GitHub won't let me comment on it below, but presumably the `page-load-possibly-complete` event shouldn't fire until content is loaded."
"2022-11-12 05:03:31.33037+00","1. This is missing a race condition check. Often this means checking `loadId === this.loadId` or using a `noRace` API instance. However, by default `loadId` is only set when the page is loaded, and presumably `loadKpiValues` also gets called when the search filters update, so you either need to also update `this.loadId` on search or create a separate ID that updates on search that you can check. 2. I would move the check for `Object.keys(this.model.subscriptionsMap).length === 0` into `this.getSubscriptions`. That way, call sites for `this.getSubscriptions` never have to care about whether the data is loaded or not. 3. I would also rename `this.getSubscriptions` to `this.loadSubscriptions` or something along those lines. The word `get` implies that the method will retrieve and return the data with no side effects, whereas here the data is not being returned and there are side effects."
"2022-11-12 05:03:32.238766+00","If there are no values in the last 7 days, this will divide by zero and display `NaN`. If this isn't addressed here, a comment would at least be helpful noting that it is handled at render time."
"2022-11-12 05:03:33.343141+00","`errorHandler` automatically handles AbortErrors. You don't need to wrap it in this check. (But the `setState` below does need the check.)"
"2022-11-12 13:15:27.602479+00","Revert this change not required "
"2022-11-12 16:27:19.204869+00","No, It doesn't."
"2022-11-12 16:34:25.829409+00","I didn't get it last time, what is the reason for this type casting here? is `ReadableSpan` 1:1 comparable with more wide interface `Span`? "
"2022-11-12 21:55:20.478909+00","All this is doing is adding an error message for when the automation is not in a saveable state. My boomer brain got confused why I couldn't save an automation"
"2022-11-12 22:12:52.479798+00","big diff but its just adding the tooltip for the error message"
"2022-11-12 22:15:46.205702+00","this is just type-safety so every validator doesn't have to check `__typename`"
"2022-11-12 22:20:19.162489+00","someone's on fire with UX improvements"
"2022-11-12 22:20:54.448208+00","when?"
"2022-11-12 22:37:04.078052+00","I removed that :) "
"2022-11-13 00:47:27.4725+00","small perf optimization - this only needs `doctor_preferences_id`, not the entire object. we were loading it in unnecessarily in a few places"
"2022-11-13 03:20:22.669119+00","Thanks for raising this! I [pushed the update](https://github.com/sourcegraph/sourcegraph/pull/44315/commits/26b17a3a47eecf50ec397b8fe154f9d65e628694)  with more self-explanatory types and relevant comments. "
"2022-11-13 03:28:54.74581+00","this is the backend support for copy fields. you can see what they look like in the loom at 1:10"
